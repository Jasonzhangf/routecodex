{
  "root_path": "/Users/fanzhang/Documents/github/routecodex-worktree/dev",
  "modules": {
    "web-interface": {
      "path": "web-interface",
      "readme_file": "README.md",
      "files": [
        "tsconfig.node.json",
        "index.html",
        "tailwind.config.js",
        "package-lock.json",
        "package.json",
        "tsconfig.json",
        ".env.example",
        "vite.config.ts",
        "postcss.config.js",
        ".eslintrc.json"
      ],
      "subdirectories": [
        "config",
        "public",
        "scripts",
        "src"
      ]
    },
    "docs/dry-run": {
      "path": "docs/dry-run",
      "readme_file": "README.md",
      "files": [],
      "subdirectories": []
    },
    "docs/pipeline": {
      "path": "docs/pipeline",
      "readme_file": "README.md",
      "files": [
        "ARCHITECTURE.md",
        "LMStudio.md"
      ],
      "subdirectories": []
    },
    "docs/transformation-tables": {
      "path": "docs/transformation-tables",
      "readme_file": "README.md",
      "files": [
        "claude-code-router-openai-to-lmstudio.json",
        "claude-code-router-provider-conversions.json",
        "状态管理需求分析.md",
        "静态表vs动态分析.md",
        "静态表准确性评估.md",
        "claude-code-router-anthropic-to-gemini.json",
        "Gemini-FinishReason完整转换表.json",
        "claude-code-router-openai-to-anthropic.json",
        "完整的工具执行流程转换表.json",
        "claude-code-router-openai-to-gemini.json",
        "claude-code-router-openai-to-textgenwebui.json",
        "非流式场景分析.md",
        "claude-code-router-openai-to-ollama.json",
        "工具调用模式分析.md",
        "claude-code-router-anthropic-to-openai.json",
        "对话历史维护分析.md"
      ],
      "subdirectories": []
    },
    "sharedmodule/llmswitch-core": {
      "path": "sharedmodule/llmswitch-core",
      "readme_file": "README.md",
      "files": [
        ".npmignore",
        "tsconfig.tsbuildinfo",
        "rcc-llmswitch-core-0.1.40.tgz",
        "package-lock.json",
        "package.json",
        "tsconfig.json"
      ],
      "subdirectories": [
        "src"
      ]
    },
    "sharedmodule/config-engine": {
      "path": "sharedmodule/config-engine",
      "readme_file": "README.md",
      "files": [
        "test-fixed-sanitization.js",
        "tsconfig.tsbuildinfo",
        "test-object-sanitization.js",
        "package-lock.json",
        "package.json",
        "tsconfig.json",
        "routecodex-config-engine-1.0.0.tgz"
      ],
      "subdirectories": [
        "src"
      ]
    },
    "sharedmodule/config-testkit": {
      "path": "sharedmodule/config-testkit",
      "readme_file": "README.md",
      "files": [
        "test-validation.js",
        "test-keyalias-extraction.js",
        "package-lock.json",
        "package.json",
        "tsconfig.json"
      ],
      "subdirectories": [
        "test",
        "test-snapshots",
        "src"
      ]
    },
    "sharedmodule/config-compat": {
      "path": "sharedmodule/config-compat",
      "readme_file": "README.md",
      "files": [
        "tsconfig.tsbuildinfo",
        "package-lock.json",
        "package.json",
        "tsconfig.json",
        "routecodex-config-compat-1.0.0.tgz"
      ],
      "subdirectories": [
        "src"
      ]
    },
    "sharedmodule/llmswitch-ajv": {
      "path": "sharedmodule/llmswitch-ajv",
      "readme_file": "README.md",
      "files": [
        ".gitignore",
        "package.json",
        "tsconfig.json"
      ],
      "subdirectories": [
        "src"
      ]
    },
    "verified-configs": {
      "path": "verified-configs",
      "readme_file": "README.md",
      "files": [],
      "subdirectories": [
        "v0.45.0"
      ]
    },
    "verified-configs/v0.45.0": {
      "path": "verified-configs/v0.45.0",
      "readme_file": "README.md",
      "files": [
        "merged-config.5521.json",
        "qwen-5522-qwen3-coder-plus.json",
        "lmstudio-5521-gpt-oss-20b-mlx.json",
        "qwen-5522-qwen3-coder-plus-final.json",
        "merged-config.qwen-5522.json",
        "qwen-5522-qwen3-coder-plus-fixed.json"
      ],
      "subdirectories": []
    },
    "scripts": {
      "path": "scripts",
      "readme_file": "README.md",
      "files": [
        "claude-e2e-listdir-from-list.sh",
        "enhance-module.js",
        "execute-refactoring.ts",
        "mock-iflow-oauth-server.ts",
        "run-bg.sh",
        "mock-iflow-api-server.ts",
        "simple_dead_function_finder.py",
        "claude-e2e-listdir-per-config.sh",
        "build-and-install.bat",
        "cleanup-deprecated-code.sh",
        "dead_function_analyzer.py",
        "claude-e2e-listdir.sh",
        "phase1-cleanup.sh",
        "iflow-auth.ts",
        "simple-install.sh",
        "cleanup-unused-code.sh",
        "test-guidance.mjs",
        "verify-cleanup-safety.sh",
        "run-fg-gtimeout.sh",
        "generate-merged-config.ts",
        "claude-e2e-listdir-all.sh",
        "build-and-install.sh",
        "verify-tool-arguments.mjs",
        "quick-install.sh"
      ],
      "subdirectories": [
        "lib"
      ]
    },
    "package": {
      "path": "package",
      "readme_file": "README.md",
      "files": [
        "LICENSE",
        "package.json"
      ],
      "subdirectories": [
        "bin",
        "scripts"
      ]
    },
    "src": {
      "path": "src",
      "readme_file": "README.md",
      "files": [
        "cli.ts",
        "index.ts"
      ],
      "subdirectories": [
        "types",
        "core",
        "config",
        "server",
        "utils",
        "commands",
        "modules",
        "logging"
      ]
    },
    "src/types": {
      "path": "src/types",
      "readme_file": "README.md",
      "files": [
        "rcc-llmswitch-core.d.ts",
        "http-types.ts",
        "shared-dtos.ts",
        "json.ts",
        "common-types.ts",
        "config-types.ts",
        "pipeline-types.ts",
        "debug-types.ts",
        "rcc-modules.d.ts",
        "ambient-mods.d.ts",
        "glob.d.ts",
        "external-modules.d.ts"
      ],
      "subdirectories": []
    },
    "src/core": {
      "path": "src/core",
      "readme_file": "README.md",
      "files": [
        "request-handler.ts",
        "base-module.ts",
        "request-handler.ts.backup",
        "dry-run-engine.ts",
        "provider-manager.ts"
      ],
      "subdirectories": []
    },
    "src/config": {
      "path": "src/config",
      "readme_file": "README.md",
      "files": [
        "tool-mapping-loader.ts",
        "auth-file-resolver.ts",
        "config-paths.ts",
        "unified-config-paths.ts",
        "unimplemented-config-types.ts",
        "merged-config-types.ts",
        "default-config.json"
      ],
      "subdirectories": []
    },
    "src/server": {
      "path": "src/server",
      "readme_file": "README.md",
      "files": [
        "responses-sse-simulator.ts",
        "anthropic-sse-simulator.ts",
        "anthropic-sse-transformer.ts",
        "types.ts",
        "http-server.ts",
        "RouteCodexServer.ts",
        "protocol-handler.ts",
        "responses-sse-transformer.ts"
      ],
      "subdirectories": [
        "types",
        "core",
        "config",
        "utils",
        "protocol",
        "streaming",
        "conversion",
        "handlers"
      ]
    },
    "src/utils": {
      "path": "src/utils",
      "readme_file": "README.md",
      "files": [
        "external-mocks.js",
        "error-handler.ts",
        "key-429-tracker.ts",
        "error-handling-utils.ts",
        "error-handler-registry.ts",
        "load-balancer.ts",
        "logger.ts",
        "failover.ts",
        "debug-utils.ts",
        "module-config-reader.ts",
        "pipeline-health-manager.ts",
        "system-prompt-loader.ts"
      ],
      "subdirectories": [
        "model-field-converter"
      ]
    },
    "src/utils/model-field-converter": {
      "path": "src/utils/model-field-converter",
      "readme_file": "README.md",
      "files": [
        "request-transformer.ts",
        "field-mapping-rules.ts",
        "types.ts",
        "model-field-converter.ts",
        "index.ts"
      ],
      "subdirectories": []
    },
    "src/commands": {
      "path": "src/commands",
      "readme_file": "README.md",
      "files": [
        "dry-run.ts",
        "offline-log.ts"
      ],
      "subdirectories": []
    },
    "src/modules": {
      "path": "src/modules",
      "readme_file": "README.md",
      "files": [
        "unimplemented-module-factory.ts",
        "unimplemented-module-analytics.ts",
        "unimplemented-module.ts"
      ],
      "subdirectories": [
        "dry-run",
        "pipeline",
        "enhancement",
        "dry-run-engine",
        "config-manager",
        "initialization",
        "virtual-router",
        "monitoring",
        "resource",
        "debug"
      ]
    },
    "src/modules/dry-run": {
      "path": "src/modules/dry-run",
      "readme_file": "README.md",
      "files": [
        "dry-run-interface.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline": {
      "path": "src/modules/pipeline",
      "readme_file": "README.md",
      "files": [
        "index.ts"
      ],
      "subdirectories": [
        "dry-run",
        "types",
        "core",
        "config",
        "plugins",
        "utils",
        "testing",
        "errors",
        "monitoring",
        "modules",
        "validation",
        "interfaces"
      ]
    },
    "src/modules/pipeline/types": {
      "path": "src/modules/pipeline/types",
      "readme_file": "README.md",
      "files": [
        "external-types.ts",
        "provider-types.ts",
        "pipeline-types.ts",
        "transformation-types.ts",
        "external-types.js",
        "base-types.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/core": {
      "path": "src/modules/pipeline/core",
      "readme_file": "README.md",
      "files": [
        "pipeline-manager.ts",
        "pipeline-registry.ts",
        "base-pipeline.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/config": {
      "path": "src/modules/pipeline/config",
      "readme_file": "README.md",
      "files": [
        "pipeline-config-manager.ts",
        "pipeline-assembler.ts",
        "default-config.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/utils": {
      "path": "src/modules/pipeline/utils",
      "readme_file": "README.md",
      "files": [
        "transformation-engine.ts",
        "debug-logger.ts",
        "schema-arg-normalizer.ts",
        "preflight-validator.ts",
        "pipeline-creator.ts",
        "tool-mapping-executor.ts",
        "oauth-helpers.ts",
        "oauth-manager.ts",
        "enhanced-auth-resolver.ts",
        "inline-auth-resolver.ts",
        "error-integration.ts",
        "auth-resolver.ts",
        "tool-result-text.ts",
        "oauth-config-manager.ts",
        "oauth-device-flow.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/modules": {
      "path": "src/modules/pipeline/modules",
      "readme_file": "README.md",
      "files": [],
      "subdirectories": [
        "compatibility",
        "provider",
        "workflow"
      ]
    },
    "src/modules/pipeline/modules/compatibility": {
      "path": "src/modules/pipeline/modules/compatibility",
      "readme_file": "README.md",
      "files": [
        "glm-compatibility.ts",
        "iflow-compatibility.ts",
        "field-mapping.ts",
        "glm-api.md",
        "passthrough-compatibility.ts",
        "qwen-compatibility.ts",
        "lmstudio-compatibility.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/modules/provider": {
      "path": "src/modules/pipeline/modules/provider",
      "readme_file": "README.md",
      "files": [
        "GLM_COMPATIBILITY.md",
        "iflow-oauth.ts",
        "generic-openai-provider.ts",
        "iflow-provider.ts",
        "openai-provider.ts",
        "generic-http-provider.ts",
        "qwen-oauth.ts",
        "qwen-provider.ts",
        "glm-http-provider.ts",
        "generic-responses.ts",
        "lmstudio-provider-simple.ts"
      ],
      "subdirectories": [
        "shared"
      ]
    },
    "src/modules/pipeline/modules/workflow": {
      "path": "src/modules/pipeline/modules/workflow",
      "readme_file": "README.md",
      "files": [
        "streaming-control.ts"
      ],
      "subdirectories": []
    },
    "src/modules/pipeline/interfaces": {
      "path": "src/modules/pipeline/interfaces",
      "readme_file": "README.md",
      "files": [
        "pipeline-interfaces.ts"
      ],
      "subdirectories": []
    },
    "src/modules/enhancement": {
      "path": "src/modules/enhancement",
      "readme_file": "README.md",
      "files": [
        "enhancement-config-manager.ts",
        "module-enhancement-factory.ts",
        "module-enhancement-factory.js"
      ],
      "subdirectories": [
        "templates"
      ]
    },
    "src/modules/dry-run-engine": {
      "path": "src/modules/dry-run-engine",
      "readme_file": "README.md",
      "files": [
        "index.ts"
      ],
      "subdirectories": [
        "core"
      ]
    },
    "src/modules/config-manager": {
      "path": "src/modules/config-manager",
      "readme_file": "README.md",
      "files": [
        "config-manager-module.ts",
        "merged-config-generator.ts",
        "config-watcher.ts"
      ],
      "subdirectories": []
    },
    "src/modules/initialization": {
      "path": "src/modules/initialization",
      "readme_file": "README.md",
      "files": [
        "parallel-initializer.ts"
      ],
      "subdirectories": []
    },
    "src/modules/virtual-router": {
      "path": "src/modules/virtual-router",
      "readme_file": "README.md",
      "files": [
        "protocol-manager.ts",
        "pipeline-config-manager.ts",
        "virtual-router-module.ts",
        "virtual-router-dry-run.ts",
        "route-target-pool.ts"
      ],
      "subdirectories": [
        "classifiers"
      ]
    },
    "src/modules/monitoring": {
      "path": "src/modules/monitoring",
      "readme_file": "README.md",
      "files": [
        "monitor-config.ts",
        "types.ts",
        "recorder.ts",
        "monitor-module.ts"
      ],
      "subdirectories": []
    },
    "src/modules/resource": {
      "path": "src/modules/resource",
      "readme_file": "README.md",
      "files": [
        "resource-manager.ts"
      ],
      "subdirectories": []
    },
    "src/modules/debug": {
      "path": "src/modules/debug",
      "readme_file": "README.md",
      "files": [
        "debug-file-logger.ts",
        "debug-enhancement-manager.ts"
      ],
      "subdirectories": []
    },
    "src/logging": {
      "path": "src/logging",
      "readme_file": "README.md",
      "files": [
        "LoggerFactory.ts",
        "UnifiedLogger.ts",
        "types.ts",
        "constants.ts",
        "index.ts",
        "interfaces.ts"
      ],
      "subdirectories": [
        "validator",
        "parser",
        "__tests__",
        "indexer"
      ]
    }
  },
  "files": [
    {
      "path": "VIOLATIONS_ANALYSIS_REPORT.md",
      "module": "root"
    },
    {
      "path": "ARCHITECTURE_PRINCIPLES_UPDATE_REPORT.md",
      "module": "root"
    },
    {
      "path": "SIMPLE_DEAD_FUNCTION_REPORT.md",
      "module": "root"
    },
    {
      "path": "rcc",
      "module": "root"
    },
    {
      "path": "ROUTECODEX_DEAD_FUNCTION_CLEANUP_REPORT.md",
      "module": "root"
    },
    {
      "path": "DEPRECATED_CODE_ANALYSIS_REPORT.md",
      "module": "root"
    },
    {
      "path": "dead-code-analysis-report.json",
      "module": "root"
    },
    {
      "path": "jest.config.js",
      "module": "root"
    },
    {
      "path": "IFLOW.md",
      "module": "root"
    },
    {
      "path": "INSTALL.md",
      "module": "root"
    },
    {
      "path": "UNIFIED_LOGGING_IMPLEMENTATION_TODO.md",
      "module": "root"
    },
    {
      "path": "package-lock.json",
      "module": "root"
    },
    {
      "path": "package.json",
      "module": "root"
    },
    {
      "path": "tsconfig.json",
      "module": "root"
    },
    {
      "path": "DEAD_CODE_ANALYSIS_SUMMARY.md",
      "module": "root"
    },
    {
      "path": "DEAD_CODE_CLEANUP_PLAN.md",
      "module": "root"
    },
    {
      "path": "MODULE_README_UPDATE_GUIDE.md",
      "module": "root"
    },
    {
      "path": "AGENTS.md",
      "module": "root"
    },
    {
      "path": "dead-code-analyzer.cjs",
      "module": "root"
    },
    {
      "path": "graceful-port-handler.sh",
      "module": "root"
    },
    {
      "path": "CLAUDE.md",
      "module": "root"
    },
    {
      "path": "config/modules-5520.json",
      "module": "config"
    },
    {
      "path": "config/merged-config.5520.json",
      "module": "config"
    },
    {
      "path": "config/merged-config.json",
      "module": "config"
    },
    {
      "path": "config/config.json",
      "module": "config"
    },
    {
      "path": "config/responses-conversion.json",
      "module": "config"
    },
    {
      "path": "config/config.json.bak.20251013-092339",
      "module": "config"
    },
    {
      "path": "config/modules.json",
      "module": "config"
    },
    {
      "path": "config/merged-config.backup.20251031.json",
      "module": "config"
    },
    {
      "path": "config/merged-config.test.json",
      "module": "config"
    },
    {
      "path": "config/dry-run/single-test-request.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/dynamic-routing-config.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/node-config.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/batch-test-requests.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/load-balancer-config.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/dynamic-routing-test-requests.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/dry-run/multi-provider-test-request.json",
      "module": "config/dry-run"
    },
    {
      "path": "config/tool-mappings/glm.json",
      "module": "config/tool-mappings"
    },
    {
      "path": "config/schemas/openai-chat.response.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/openai-responses.request.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/responses-conversion.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/openai-chat.request.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/anthropic-messages.request.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/openai-responses.response.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/schemas/anthropic-messages.response.schema.json",
      "module": "config/schemas"
    },
    {
      "path": "config/samples/user-modelscope.json",
      "module": "config/samples"
    },
    {
      "path": "config/samples/user-qwen.json",
      "module": "config/samples"
    },
    {
      "path": "config/samples/user-lmstudio.json",
      "module": "config/samples"
    },
    {
      "path": "config/samples/user-iflow-oauth.json",
      "module": "config/samples"
    },
    {
      "path": "config/samples/user-glm.json",
      "module": "config/samples"
    },
    {
      "path": "config/conversion/llmswitch-profiles.json",
      "module": "config/conversion"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238156.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624765.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956830344.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188872.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924698944.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867577.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994630.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502563.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238160.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188957.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924699030.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624752.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951863999.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956994009.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624841.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925816963.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761909492791.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924698932.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925816938.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951983899.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624764.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956993899.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994698.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867567.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502573.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956830374.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956993929.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951864056.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994616.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956830457.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925816953.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994640.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956993928.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761909492670.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761909492703.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951863989.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258342.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925817026.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502564.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188840.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761909492716.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258357.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188883.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925817029.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867553.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951863990.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238095.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867640.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951983824.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502550.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624721.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994639.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951983809.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951864059.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867636.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258356.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188953.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956993940.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238085.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258432.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956830385.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956994006.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951983834.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258367.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502629.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624751.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761925258428.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238070.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951863975.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761951983896.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924698931.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761909492793.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926502632.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959624838.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924699032.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924698896.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761924867578.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761959188871.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761952994701.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761926238084.json",
      "module": "debug-logs"
    },
    {
      "path": "debug-logs/pipeline-session-session_1761956830453.json",
      "module": "debug-logs"
    },
    {
      "path": "tests/openai-router-pipeline.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/openai-router-sse.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/base-pipeline-e2e.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/setup.ts",
      "module": "tests"
    },
    {
      "path": "tests/test-messagecenter.js",
      "module": "tests"
    },
    {
      "path": "tests/pipeline-dto.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/default-user-config.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/e2e-glm-real.spec.ts",
      "module": "tests"
    },
    {
      "path": "tests/mocks/rcc-basemodule.ts",
      "module": "tests/mocks"
    },
    {
      "path": "tests/mocks/rcc-debugcenter.ts",
      "module": "tests/mocks"
    },
    {
      "path": "tests/mocks/yaml.js",
      "module": "tests/mocks"
    },
    {
      "path": "tests/mocks/rcc-errorhandling.ts",
      "module": "tests/mocks"
    },
    {
      "path": "tests/core/config-manager.test.ts",
      "module": "tests/core"
    },
    {
      "path": "tests/config/config-merger.test.ts",
      "module": "tests/config"
    },
    {
      "path": "tests/config/virtual-router.test.ts",
      "module": "tests/config"
    },
    {
      "path": "tests/integration/sample.integration.test.ts",
      "module": "tests/integration"
    },
    {
      "path": "tests/server/responses-pipeline.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/responses-sse.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/http-server.test.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/protocol-tools-streaming-e2e.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/responses-glm-config.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/responses-route.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/server/protocol-tools-e2e.spec.ts",
      "module": "tests/server"
    },
    {
      "path": "tests/utils/helpers.ts",
      "module": "tests/utils"
    },
    {
      "path": "tests/llmswitch/unified-tools.test.ts",
      "module": "tests/llmswitch"
    },
    {
      "path": "tests/fixtures/responses_1760615123370_request.meta.json",
      "module": "tests/fixtures"
    },
    {
      "path": "tests/fixtures/responses_fixture.tar.gz",
      "module": "tests/fixtures"
    },
    {
      "path": "tests/fixtures/responses_1760615123370_request.json",
      "module": "tests/fixtures"
    },
    {
      "path": "tests/fixtures/responses_output_text_events.json",
      "module": "tests/fixtures"
    },
    {
      "path": "tests/fixtures/responses_1760615123370_request.summary.json",
      "module": "tests/fixtures"
    },
    {
      "path": "tests/fixtures/responses_1760615123370/stream-events.jsonl",
      "module": "tests/fixtures/responses_1760615123370"
    },
    {
      "path": "tests/fixtures/responses_1760615123370/stream-events.parsed.json",
      "module": "tests/fixtures/responses_1760615123370"
    },
    {
      "path": "tests/commands/three-dry-run-modes.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "tests/commands/real-virtual-router-load-balancer.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "tests/commands/virtual-router-load-balancer.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "tests/commands/dry-run-load-balancer.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "tests/commands/dry-run-integration.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "tests/commands/dry-run.test.ts",
      "module": "tests/commands"
    },
    {
      "path": "web-interface/tsconfig.node.json",
      "module": "web-interface"
    },
    {
      "path": "web-interface/index.html",
      "module": "web-interface"
    },
    {
      "path": "web-interface/tailwind.config.js",
      "module": "web-interface"
    },
    {
      "path": "web-interface/README.md",
      "module": "web-interface"
    },
    {
      "path": "web-interface/package-lock.json",
      "module": "web-interface"
    },
    {
      "path": "web-interface/package.json",
      "module": "web-interface"
    },
    {
      "path": "web-interface/tsconfig.json",
      "module": "web-interface"
    },
    {
      "path": "web-interface/vite.config.ts",
      "module": "web-interface"
    },
    {
      "path": "web-interface/postcss.config.js",
      "module": "web-interface"
    },
    {
      "path": "web-interface/config/env-config.ts",
      "module": "web-interface/config"
    },
    {
      "path": "web-interface/public/vite.svg",
      "module": "web-interface/public"
    },
    {
      "path": "web-interface/scripts/dev-with-backend.js",
      "module": "web-interface/scripts"
    },
    {
      "path": "web-interface/src/App.tsx",
      "module": "web-interface/src"
    },
    {
      "path": "web-interface/src/main.tsx",
      "module": "web-interface/src"
    },
    {
      "path": "web-interface/src/types/index.ts",
      "module": "web-interface/src/types"
    },
    {
      "path": "web-interface/src/utils/cn.ts",
      "module": "web-interface/src/utils"
    },
    {
      "path": "web-interface/src/utils/formatters.ts",
      "module": "web-interface/src/utils"
    },
    {
      "path": "web-interface/src/styles/globals.css",
      "module": "web-interface/src/styles"
    },
    {
      "path": "web-interface/src/components/RoutingTestPanel.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/Dashboard.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/EventLog.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/RoutingRuleEditor.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/MetricCard.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/RoutingManager.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/BackendStatusIndicator.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/ModuleStatusCard.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/ModuleDetails.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/PerformanceChart.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/ProtocolAnalyzer.tsx",
      "module": "web-interface/src/components"
    },
    {
      "path": "web-interface/src/components/ui/tabs.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/card.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/switch.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/badge.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/button.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/select.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/textarea.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/components/ui/input.tsx",
      "module": "web-interface/src/components/ui"
    },
    {
      "path": "web-interface/src/hooks/useApi.ts",
      "module": "web-interface/src/hooks"
    },
    {
      "path": "web-interface/src/hooks/useWebSocket.ts",
      "module": "web-interface/src/hooks"
    },
    {
      "path": "web-interface/src/pages/NotFoundPage.tsx",
      "module": "web-interface/src/pages"
    },
    {
      "path": "web-interface/src/pages/ModuleDetailsPage.tsx",
      "module": "web-interface/src/pages"
    },
    {
      "path": "web-interface/src/services/websocket.ts",
      "module": "web-interface/src/services"
    },
    {
      "path": "web-interface/src/services/api.ts",
      "module": "web-interface/src/services"
    },
    {
      "path": "web-interface/src/services/protocolAnalyzer.ts",
      "module": "web-interface/src/services"
    },
    {
      "path": "web-interface/src/services/native-websocket.ts",
      "module": "web-interface/src/services"
    },
    {
      "path": "web-interface/src/services/backendService.ts",
      "module": "web-interface/src/services"
    },
    {
      "path": "docs/glm-api-reference.md",
      "module": "docs"
    },
    {
      "path": "docs/ARCHITECTURE.md",
      "module": "docs"
    },
    {
      "path": "docs/debug-system-design.md",
      "module": "docs"
    },
    {
      "path": "docs/pipeline-routing-report.md",
      "module": "docs"
    },
    {
      "path": "docs/chat-anth-openai-llmswitch-refactor.md",
      "module": "docs"
    },
    {
      "path": "docs/pipeline-architecture.md",
      "module": "docs"
    },
    {
      "path": "docs/llmswitch-migration-plan.md",
      "module": "docs"
    },
    {
      "path": "docs/anthropic-openai-streaming-bridge.md",
      "module": "docs"
    },
    {
      "path": "docs/responses-generic-provider.md",
      "module": "docs"
    },
    {
      "path": "docs/CONFIG_ARCHITECTURE.md",
      "module": "docs"
    },
    {
      "path": "docs/lmstudio-tool-calling.md",
      "module": "docs"
    },
    {
      "path": "docs/openai-responses-streaming-bridge.md",
      "module": "docs"
    },
    {
      "path": "docs/MODULE_ENHANCEMENT_SYSTEM.md",
      "module": "docs"
    },
    {
      "path": "docs/lmstudio-dry-run-summary.md",
      "module": "docs"
    },
    {
      "path": "docs/architecture-update-summary.md",
      "module": "docs"
    },
    {
      "path": "docs/glm-chat-completions.md",
      "module": "docs"
    },
    {
      "path": "docs/oauth-authentication-guide.md",
      "module": "docs"
    },
    {
      "path": "docs/ANTHROPIC_OPENAI_LLAMASWITCH_DESIGN.md",
      "module": "docs"
    },
    {
      "path": "docs/llmswitch-responses-plan.md",
      "module": "docs"
    },
    {
      "path": "docs/USER_CONFIG_PARSER_CHANGES.md",
      "module": "docs"
    },
    {
      "path": "docs/chat-glm-500-analysis.md",
      "module": "docs"
    },
    {
      "path": "docs/mapping-tables/anthropic-to-openai.json",
      "module": "docs/mapping-tables"
    },
    {
      "path": "docs/mapping-tables/openai-to-iflow.json",
      "module": "docs/mapping-tables"
    },
    {
      "path": "docs/mapping-tables/iflow-to-openai.json",
      "module": "docs/mapping-tables"
    },
    {
      "path": "docs/mapping-tables/openai-passthrough.json",
      "module": "docs/mapping-tables"
    },
    {
      "path": "docs/dry-run/README.md",
      "module": "docs/dry-run"
    },
    {
      "path": "docs/pipeline/ARCHITECTURE.md",
      "module": "docs/pipeline"
    },
    {
      "path": "docs/pipeline/README.md",
      "module": "docs/pipeline"
    },
    {
      "path": "docs/pipeline/LMStudio.md",
      "module": "docs/pipeline"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-openai-to-lmstudio.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-provider-conversions.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/状态管理需求分析.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/静态表vs动态分析.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/静态表准确性评估.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-anthropic-to-gemini.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/Gemini-FinishReason完整转换表.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-openai-to-anthropic.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/完整的工具执行流程转换表.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-openai-to-gemini.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-openai-to-textgenwebui.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/非流式场景分析.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/README.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-openai-to-ollama.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/工具调用模式分析.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/claude-code-router-anthropic-to-openai.json",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/transformation-tables/对话历史维护分析.md",
      "module": "docs/transformation-tables"
    },
    {
      "path": "docs/verification/modelscope-verify.md",
      "module": "docs/verification"
    },
    {
      "path": "docs/monitoring/Design.md",
      "module": "docs/monitoring"
    },
    {
      "path": "sharedmodule/DIRECT_API_KEY_MIGRATION_GUIDE.md",
      "module": "sharedmodule"
    },
    {
      "path": "sharedmodule/package-lock.json",
      "module": "sharedmodule"
    },
    {
      "path": "sharedmodule/package.json",
      "module": "sharedmodule"
    },
    {
      "path": "sharedmodule/DEPLOYMENT_SUMMARY.md",
      "module": "sharedmodule"
    },
    {
      "path": "sharedmodule/llmswitch-core/tsconfig.tsbuildinfo",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/rcc-llmswitch-core-0.1.40.tgz",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/README.md",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/package-lock.json",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/package.json",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/tsconfig.json",
      "module": "sharedmodule/llmswitch-core"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/index.ts",
      "module": "sharedmodule/llmswitch-core/src"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/types/express-shim.d.ts",
      "module": "sharedmodule/llmswitch-core/src/types"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/guidance/index.ts",
      "module": "sharedmodule/llmswitch-core/src/guidance"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/llmswitch/llmswitch-response-chat.ts",
      "module": "sharedmodule/llmswitch-core/src/llmswitch"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/llmswitch/llmswitch-conversion-router.ts",
      "module": "sharedmodule/llmswitch-core/src/llmswitch"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/llmswitch/llmswitch-responses-passthrough.ts",
      "module": "sharedmodule/llmswitch-core/src/llmswitch"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/llmswitch/anthropic-openai-converter.ts",
      "module": "sharedmodule/llmswitch-core/src/llmswitch"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/schema-validator.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/switch-orchestrator.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/types.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/index.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/codec-registry.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/codecs/responses-openai-codec.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/codecs"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/codecs/openai-openai-codec.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/codecs"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/codecs/anthropic-openai-codec.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/codecs"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/responses/responses-openai-bridge.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/responses"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/text-markup-normalizer.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/args-mapping.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/tooling.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/openai-message-normalize.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/tool-canonicalizer.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/jsonish.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/reasoning-mapping.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/tool-mapping.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/media.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/shared/payload-budget.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/shared"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/streaming/anthropic-sse-emitter.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/streaming"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/streaming/openai-to-responses-transformer.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/streaming"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/streaming/openai-sse-parser.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/streaming"
    },
    {
      "path": "sharedmodule/llmswitch-core/src/conversion/streaming/openai-to-anthropic-transformer.ts",
      "module": "sharedmodule/llmswitch-core/src/conversion/streaming"
    },
    {
      "path": "sharedmodule/config-engine/test-fixed-sanitization.js",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/tsconfig.tsbuildinfo",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/test-object-sanitization.js",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/README.md",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/package-lock.json",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/package.json",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/tsconfig.json",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/routecodex-config-engine-1.0.0.tgz",
      "module": "sharedmodule/config-engine"
    },
    {
      "path": "sharedmodule/config-engine/src/index.ts",
      "module": "sharedmodule/config-engine/src"
    },
    {
      "path": "sharedmodule/config-engine/src/types/config-types.ts",
      "module": "sharedmodule/config-engine/src/types"
    },
    {
      "path": "sharedmodule/config-engine/src/core/config-parser.ts",
      "module": "sharedmodule/config-engine/src/core"
    },
    {
      "path": "sharedmodule/config-engine/src/utils/secret-sanitization.ts",
      "module": "sharedmodule/config-engine/src/utils"
    },
    {
      "path": "sharedmodule/config-engine/src/utils/shared-config-paths.ts",
      "module": "sharedmodule/config-engine/src/utils"
    },
    {
      "path": "sharedmodule/config-engine/src/utils/version-management.ts",
      "module": "sharedmodule/config-engine/src/utils"
    },
    {
      "path": "sharedmodule/config-engine/src/utils/json-pointer.ts",
      "module": "sharedmodule/config-engine/src/utils"
    },
    {
      "path": "sharedmodule/config-testkit/test-validation.js",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/README.md",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/test-keyalias-extraction.js",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/package-lock.json",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/package.json",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/tsconfig.json",
      "module": "sharedmodule/config-testkit"
    },
    {
      "path": "sharedmodule/config-testkit/test/integration/blackbox.test.js",
      "module": "sharedmodule/config-testkit/test/integration"
    },
    {
      "path": "sharedmodule/config-testkit/test/integration/secret-sanitization.test.js",
      "module": "sharedmodule/config-testkit/test/integration"
    },
    {
      "path": "sharedmodule/config-testkit/test-snapshots/test-snapshot.json",
      "module": "sharedmodule/config-testkit/test-snapshots"
    },
    {
      "path": "sharedmodule/config-testkit/src/index.ts",
      "module": "sharedmodule/config-testkit/src"
    },
    {
      "path": "sharedmodule/config-testkit/src/types/testkit-types.ts",
      "module": "sharedmodule/config-testkit/src/types"
    },
    {
      "path": "sharedmodule/config-testkit/src/tests/performance-benchmark.ts",
      "module": "sharedmodule/config-testkit/src/tests"
    },
    {
      "path": "sharedmodule/config-testkit/src/tests/blackbox-tester.ts",
      "module": "sharedmodule/config-testkit/src/tests"
    },
    {
      "path": "sharedmodule/config-testkit/src/tests/golden-snapshot-tester.ts",
      "module": "sharedmodule/config-testkit/src/tests"
    },
    {
      "path": "sharedmodule/config-testkit/src/fixtures/sample-configs.ts",
      "module": "sharedmodule/config-testkit/src/fixtures"
    },
    {
      "path": "sharedmodule/config-compat/tsconfig.tsbuildinfo",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/README.md",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/package-lock.json",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/package.json",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/tsconfig.json",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/routecodex-config-compat-1.0.0.tgz",
      "module": "sharedmodule/config-compat"
    },
    {
      "path": "sharedmodule/config-compat/src/compatibility-engine.ts",
      "module": "sharedmodule/config-compat/src"
    },
    {
      "path": "sharedmodule/config-compat/src/index.ts",
      "module": "sharedmodule/config-compat/src"
    },
    {
      "path": "sharedmodule/config-compat/src/types/compatibility-types.ts",
      "module": "sharedmodule/config-compat/src/types"
    },
    {
      "path": "sharedmodule/config-compat/src/normalization/key-alias-normalization.ts",
      "module": "sharedmodule/config-compat/src/normalization"
    },
    {
      "path": "sharedmodule/config-compat/src/normalization/compatibility-string-normalization.ts",
      "module": "sharedmodule/config-compat/src/normalization"
    },
    {
      "path": "sharedmodule/config-compat/src/normalization/thinking-config-normalization.ts",
      "module": "sharedmodule/config-compat/src/normalization"
    },
    {
      "path": "sharedmodule/config-compat/src/normalization/provider-normalization.ts",
      "module": "sharedmodule/config-compat/src/normalization"
    },
    {
      "path": "sharedmodule/config-compat/src/exporters/pipeline-assembler-exporter.ts",
      "module": "sharedmodule/config-compat/src/exporters"
    },
    {
      "path": "sharedmodule/config-compat/src/utils/stable-sort.ts",
      "module": "sharedmodule/config-compat/src/utils"
    },
    {
      "path": "sharedmodule/config-compat/src/utils/direct-api-key-config.ts",
      "module": "sharedmodule/config-compat/src/utils"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/README.md",
      "module": "sharedmodule/llmswitch-ajv"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/package.json",
      "module": "sharedmodule/llmswitch-ajv"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/tsconfig.json",
      "module": "sharedmodule/llmswitch-ajv"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/index.ts",
      "module": "sharedmodule/llmswitch-ajv/src"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/types/index.ts",
      "module": "sharedmodule/llmswitch-ajv/src/types"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/types/rcc-basemodule.d.ts",
      "module": "sharedmodule/llmswitch-ajv/src/types"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/core/conversion-engine.ts",
      "module": "sharedmodule/llmswitch-ajv/src/core"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/core/llmswitch-adapter.ts",
      "module": "sharedmodule/llmswitch-ajv/src/core"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/core/test-adapter.ts",
      "module": "sharedmodule/llmswitch-ajv/src/core"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/core/schema-mapper.ts",
      "module": "sharedmodule/llmswitch-ajv/src/core"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/test/codex-sample-test.ts",
      "module": "sharedmodule/llmswitch-ajv/src/test"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/test/test-suite.ts",
      "module": "sharedmodule/llmswitch-ajv/src/test"
    },
    {
      "path": "sharedmodule/llmswitch-ajv/src/schemas/index.ts",
      "module": "sharedmodule/llmswitch-ajv/src/schemas"
    },
    {
      "path": "verified-configs/README.md",
      "module": "verified-configs"
    },
    {
      "path": "verified-configs/v0.45.0/merged-config.5521.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/qwen-5522-qwen3-coder-plus.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/lmstudio-5521-gpt-oss-20b-mlx.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/qwen-5522-qwen3-coder-plus-final.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/README.md",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/merged-config.qwen-5522.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "verified-configs/v0.45.0/qwen-5522-qwen3-coder-plus-fixed.json",
      "module": "verified-configs/v0.45.0"
    },
    {
      "path": "scripts/claude-e2e-listdir-from-list.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/enhance-module.js",
      "module": "scripts"
    },
    {
      "path": "scripts/execute-refactoring.ts",
      "module": "scripts"
    },
    {
      "path": "scripts/mock-iflow-oauth-server.ts",
      "module": "scripts"
    },
    {
      "path": "scripts/run-bg.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/mock-iflow-api-server.ts",
      "module": "scripts"
    },
    {
      "path": "scripts/simple_dead_function_finder.py",
      "module": "scripts"
    },
    {
      "path": "scripts/claude-e2e-listdir-per-config.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/build-and-install.bat",
      "module": "scripts"
    },
    {
      "path": "scripts/cleanup-deprecated-code.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/dead_function_analyzer.py",
      "module": "scripts"
    },
    {
      "path": "scripts/README.md",
      "module": "scripts"
    },
    {
      "path": "scripts/claude-e2e-listdir.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/phase1-cleanup.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/iflow-auth.ts",
      "module": "scripts"
    },
    {
      "path": "scripts/simple-install.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/cleanup-unused-code.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/test-guidance.mjs",
      "module": "scripts"
    },
    {
      "path": "scripts/verify-cleanup-safety.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/run-fg-gtimeout.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/generate-merged-config.ts",
      "module": "scripts"
    },
    {
      "path": "scripts/claude-e2e-listdir-all.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/build-and-install.sh",
      "module": "scripts"
    },
    {
      "path": "scripts/verify-tool-arguments.mjs",
      "module": "scripts"
    },
    {
      "path": "scripts/quick-install.sh",
      "module": "scripts"
    },
    {
      "path": "replay/original.json",
      "module": "replay"
    },
    {
      "path": "replay/embed-as-text.out",
      "module": "replay"
    },
    {
      "path": "replay/embed-as-text.json",
      "module": "replay"
    },
    {
      "path": "replay/models.headers",
      "module": "replay"
    },
    {
      "path": "replay/models.out",
      "module": "replay"
    },
    {
      "path": "replay/no-tool-only.json",
      "module": "replay"
    },
    {
      "path": "replay/req_1761822737048_ro11mdv2i_normalized.json",
      "module": "replay"
    },
    {
      "path": "replay/embed-as-text.headers",
      "module": "replay"
    },
    {
      "path": "package/LICENSE",
      "module": "package"
    },
    {
      "path": "package/README.md",
      "module": "package"
    },
    {
      "path": "package/package.json",
      "module": "package"
    },
    {
      "path": "package/bin/qodercli",
      "module": "package/bin"
    },
    {
      "path": "package/scripts/install.js",
      "module": "package/scripts"
    },
    {
      "path": "src/cli.ts",
      "module": "src"
    },
    {
      "path": "src/README.md",
      "module": "src"
    },
    {
      "path": "src/index.ts",
      "module": "src"
    },
    {
      "path": "src/types/rcc-llmswitch-core.d.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/http-types.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/shared-dtos.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/json.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/common-types.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/config-types.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/pipeline-types.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/debug-types.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/rcc-modules.d.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/README.md",
      "module": "src/types"
    },
    {
      "path": "src/types/ambient-mods.d.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/glob.d.ts",
      "module": "src/types"
    },
    {
      "path": "src/types/external-modules.d.ts",
      "module": "src/types"
    },
    {
      "path": "src/core/request-handler.ts",
      "module": "src/core"
    },
    {
      "path": "src/core/base-module.ts",
      "module": "src/core"
    },
    {
      "path": "src/core/README.md",
      "module": "src/core"
    },
    {
      "path": "src/core/request-handler.ts.backup",
      "module": "src/core"
    },
    {
      "path": "src/core/dry-run-engine.ts",
      "module": "src/core"
    },
    {
      "path": "src/core/provider-manager.ts",
      "module": "src/core"
    },
    {
      "path": "src/config/tool-mapping-loader.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/auth-file-resolver.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/config-paths.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/unified-config-paths.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/unimplemented-config-types.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/merged-config-types.ts",
      "module": "src/config"
    },
    {
      "path": "src/config/README.md",
      "module": "src/config"
    },
    {
      "path": "src/config/default-config.json",
      "module": "src/config"
    },
    {
      "path": "src/server/responses-sse-simulator.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/anthropic-sse-simulator.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/anthropic-sse-transformer.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/README.md",
      "module": "src/server"
    },
    {
      "path": "src/server/types.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/http-server.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/RouteCodexServer.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/protocol-handler.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/responses-sse-transformer.ts",
      "module": "src/server"
    },
    {
      "path": "src/server/types/handler-types.ts",
      "module": "src/server/types"
    },
    {
      "path": "src/server/core/service-registry.ts",
      "module": "src/server/core"
    },
    {
      "path": "src/server/core/service-container.ts",
      "module": "src/server/core"
    },
    {
      "path": "src/server/core/service-initializer.ts",
      "module": "src/server/core"
    },
    {
      "path": "src/server/config/schema-validator.ts",
      "module": "src/server/config"
    },
    {
      "path": "src/server/config/responses-config.ts",
      "module": "src/server/config"
    },
    {
      "path": "src/server/utils/response-normalizer.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/request-validator.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/error-context.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/error-builder.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/streaming-manager.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/text-filters.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/utils/tool-executor.ts",
      "module": "src/server/utils"
    },
    {
      "path": "src/server/protocol/anthropic-adapter.ts",
      "module": "src/server/protocol"
    },
    {
      "path": "src/server/protocol/openai-adapter.ts",
      "module": "src/server/protocol"
    },
    {
      "path": "src/server/protocol/protocol-detector.ts",
      "module": "src/server/protocol"
    },
    {
      "path": "src/server/streaming/base-streamer.ts",
      "module": "src/server/streaming"
    },
    {
      "path": "src/server/streaming/responses-streamer.ts",
      "module": "src/server/streaming"
    },
    {
      "path": "src/server/streaming/anthropic-streamer.ts",
      "module": "src/server/streaming"
    },
    {
      "path": "src/server/streaming/openai-streamer.ts",
      "module": "src/server/streaming"
    },
    {
      "path": "src/server/conversion/responses-converter.ts",
      "module": "src/server/conversion"
    },
    {
      "path": "src/server/conversion/responses-mapper.ts",
      "module": "src/server/conversion"
    },
    {
      "path": "src/server/handlers/base-handler.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/messages.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/embeddings.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/completions.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/models.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/chat-completions.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/server/handlers/responses.ts",
      "module": "src/server/handlers"
    },
    {
      "path": "src/utils/external-mocks.js",
      "module": "src/utils"
    },
    {
      "path": "src/utils/error-handler.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/key-429-tracker.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/error-handling-utils.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/error-handler-registry.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/load-balancer.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/README.md",
      "module": "src/utils"
    },
    {
      "path": "src/utils/logger.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/failover.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/debug-utils.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/module-config-reader.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/pipeline-health-manager.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/system-prompt-loader.ts",
      "module": "src/utils"
    },
    {
      "path": "src/utils/model-field-converter/request-transformer.ts",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/utils/model-field-converter/README.md",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/utils/model-field-converter/field-mapping-rules.ts",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/utils/model-field-converter/types.ts",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/utils/model-field-converter/model-field-converter.ts",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/utils/model-field-converter/index.ts",
      "module": "src/utils/model-field-converter"
    },
    {
      "path": "src/commands/dry-run.ts",
      "module": "src/commands"
    },
    {
      "path": "src/commands/offline-log.ts",
      "module": "src/commands"
    },
    {
      "path": "src/commands/README.md",
      "module": "src/commands"
    },
    {
      "path": "src/modules/README.md",
      "module": "src/modules"
    },
    {
      "path": "src/modules/unimplemented-module-factory.ts",
      "module": "src/modules"
    },
    {
      "path": "src/modules/unimplemented-module-analytics.ts",
      "module": "src/modules"
    },
    {
      "path": "src/modules/unimplemented-module.ts",
      "module": "src/modules"
    },
    {
      "path": "src/modules/dry-run/README.md",
      "module": "src/modules/dry-run"
    },
    {
      "path": "src/modules/dry-run/dry-run-interface.ts",
      "module": "src/modules/dry-run"
    },
    {
      "path": "src/modules/pipeline/README.md",
      "module": "src/modules/pipeline"
    },
    {
      "path": "src/modules/pipeline/index.ts",
      "module": "src/modules/pipeline"
    },
    {
      "path": "src/modules/pipeline/dry-run/memory-interface.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/bidirectional-pipeline-dry-run.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/pipeline-dry-run-framework.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/input-simulator.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/error-boundaries.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/memory-management.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/dry-run-pipeline-executor.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/dry-run/pipeline-dry-run-examples.ts",
      "module": "src/modules/pipeline/dry-run"
    },
    {
      "path": "src/modules/pipeline/types/external-types.ts",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/provider-types.ts",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/pipeline-types.ts",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/README.md",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/transformation-types.ts",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/external-types.js",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/types/base-types.ts",
      "module": "src/modules/pipeline/types"
    },
    {
      "path": "src/modules/pipeline/core/pipeline-manager.ts",
      "module": "src/modules/pipeline/core"
    },
    {
      "path": "src/modules/pipeline/core/pipeline-registry.ts",
      "module": "src/modules/pipeline/core"
    },
    {
      "path": "src/modules/pipeline/core/README.md",
      "module": "src/modules/pipeline/core"
    },
    {
      "path": "src/modules/pipeline/core/base-pipeline.ts",
      "module": "src/modules/pipeline/core"
    },
    {
      "path": "src/modules/pipeline/config/pipeline-config-manager.ts",
      "module": "src/modules/pipeline/config"
    },
    {
      "path": "src/modules/pipeline/config/pipeline-assembler.ts",
      "module": "src/modules/pipeline/config"
    },
    {
      "path": "src/modules/pipeline/config/default-config.ts",
      "module": "src/modules/pipeline/config"
    },
    {
      "path": "src/modules/pipeline/config/README.md",
      "module": "src/modules/pipeline/config"
    },
    {
      "path": "src/modules/pipeline/plugins/plugin-system.ts",
      "module": "src/modules/pipeline/plugins"
    },
    {
      "path": "src/modules/pipeline/utils/transformation-engine.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/debug-logger.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/schema-arg-normalizer.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/preflight-validator.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/pipeline-creator.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/tool-mapping-executor.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/oauth-helpers.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/oauth-manager.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/README.md",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/enhanced-auth-resolver.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/inline-auth-resolver.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/error-integration.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/auth-resolver.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/tool-result-text.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/oauth-config-manager.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/utils/oauth-device-flow.ts",
      "module": "src/modules/pipeline/utils"
    },
    {
      "path": "src/modules/pipeline/testing/test-utils.ts",
      "module": "src/modules/pipeline/testing"
    },
    {
      "path": "src/modules/pipeline/errors/pipeline-errors.ts",
      "module": "src/modules/pipeline/errors"
    },
    {
      "path": "src/modules/pipeline/monitoring/performance-monitor.ts",
      "module": "src/modules/pipeline/monitoring"
    },
    {
      "path": "src/modules/pipeline/modules/README.md",
      "module": "src/modules/pipeline/modules"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/glm-compatibility.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/iflow-compatibility.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/field-mapping.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/glm-api.md",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/passthrough-compatibility.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/qwen-compatibility.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/lmstudio-compatibility.ts",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/compatibility/README.md",
      "module": "src/modules/pipeline/modules/compatibility"
    },
    {
      "path": "src/modules/pipeline/modules/provider/GLM_COMPATIBILITY.md",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/iflow-oauth.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/generic-openai-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/iflow-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/README.md",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/openai-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/generic-http-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/qwen-oauth.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/qwen-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/glm-http-provider.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/generic-responses.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/lmstudio-provider-simple.ts",
      "module": "src/modules/pipeline/modules/provider"
    },
    {
      "path": "src/modules/pipeline/modules/provider/shared/base-http-provider.ts",
      "module": "src/modules/pipeline/modules/provider/shared"
    },
    {
      "path": "src/modules/pipeline/modules/provider/shared/provider-helpers.ts",
      "module": "src/modules/pipeline/modules/provider/shared"
    },
    {
      "path": "src/modules/pipeline/modules/workflow/streaming-control.ts",
      "module": "src/modules/pipeline/modules/workflow"
    },
    {
      "path": "src/modules/pipeline/modules/workflow/README.md",
      "module": "src/modules/pipeline/modules/workflow"
    },
    {
      "path": "src/modules/pipeline/validation/config-validator.ts",
      "module": "src/modules/pipeline/validation"
    },
    {
      "path": "src/modules/pipeline/interfaces/README.md",
      "module": "src/modules/pipeline/interfaces"
    },
    {
      "path": "src/modules/pipeline/interfaces/pipeline-interfaces.ts",
      "module": "src/modules/pipeline/interfaces"
    },
    {
      "path": "src/modules/enhancement/enhancement-config-manager.ts",
      "module": "src/modules/enhancement"
    },
    {
      "path": "src/modules/enhancement/module-enhancement-factory.ts",
      "module": "src/modules/enhancement"
    },
    {
      "path": "src/modules/enhancement/README.md",
      "module": "src/modules/enhancement"
    },
    {
      "path": "src/modules/enhancement/module-enhancement-factory.js",
      "module": "src/modules/enhancement"
    },
    {
      "path": "src/modules/enhancement/templates/provider-template.ts",
      "module": "src/modules/enhancement/templates"
    },
    {
      "path": "src/modules/enhancement/templates/pipeline-template.ts",
      "module": "src/modules/enhancement/templates"
    },
    {
      "path": "src/modules/dry-run-engine/README.md",
      "module": "src/modules/dry-run-engine"
    },
    {
      "path": "src/modules/dry-run-engine/index.ts",
      "module": "src/modules/dry-run-engine"
    },
    {
      "path": "src/modules/dry-run-engine/core/engine.ts",
      "module": "src/modules/dry-run-engine/core"
    },
    {
      "path": "src/modules/config-manager/README.md",
      "module": "src/modules/config-manager"
    },
    {
      "path": "src/modules/config-manager/config-manager-module.ts",
      "module": "src/modules/config-manager"
    },
    {
      "path": "src/modules/config-manager/merged-config-generator.ts",
      "module": "src/modules/config-manager"
    },
    {
      "path": "src/modules/config-manager/config-watcher.ts",
      "module": "src/modules/config-manager"
    },
    {
      "path": "src/modules/initialization/parallel-initializer.ts",
      "module": "src/modules/initialization"
    },
    {
      "path": "src/modules/initialization/README.md",
      "module": "src/modules/initialization"
    },
    {
      "path": "src/modules/virtual-router/protocol-manager.ts",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/pipeline-config-manager.ts",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/virtual-router-module.ts",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/virtual-router-dry-run.ts",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/README.md",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/route-target-pool.ts",
      "module": "src/modules/virtual-router"
    },
    {
      "path": "src/modules/virtual-router/classifiers/tool-detector.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/config-request-classifier.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/request-classifier.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/config-routing-decision.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/protocol-token-calculator.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/config-model-tier-classifier.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/model-category-resolver.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/config-tool-detector.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/virtual-router/classifiers/token-calculator.ts",
      "module": "src/modules/virtual-router/classifiers"
    },
    {
      "path": "src/modules/monitoring/monitor-config.ts",
      "module": "src/modules/monitoring"
    },
    {
      "path": "src/modules/monitoring/README.md",
      "module": "src/modules/monitoring"
    },
    {
      "path": "src/modules/monitoring/types.ts",
      "module": "src/modules/monitoring"
    },
    {
      "path": "src/modules/monitoring/recorder.ts",
      "module": "src/modules/monitoring"
    },
    {
      "path": "src/modules/monitoring/monitor-module.ts",
      "module": "src/modules/monitoring"
    },
    {
      "path": "src/modules/resource/README.md",
      "module": "src/modules/resource"
    },
    {
      "path": "src/modules/resource/resource-manager.ts",
      "module": "src/modules/resource"
    },
    {
      "path": "src/modules/debug/debug-file-logger.ts",
      "module": "src/modules/debug"
    },
    {
      "path": "src/modules/debug/README.md",
      "module": "src/modules/debug"
    },
    {
      "path": "src/modules/debug/debug-enhancement-manager.ts",
      "module": "src/modules/debug"
    },
    {
      "path": "src/logging/LoggerFactory.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/UnifiedLogger.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/README.md",
      "module": "src/logging"
    },
    {
      "path": "src/logging/types.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/constants.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/index.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/interfaces.ts",
      "module": "src/logging"
    },
    {
      "path": "src/logging/validator/DataValidator.ts",
      "module": "src/logging/validator"
    },
    {
      "path": "src/logging/validator/index.ts",
      "module": "src/logging/validator"
    },
    {
      "path": "src/logging/parser/JsonlParser.ts",
      "module": "src/logging/parser"
    },
    {
      "path": "src/logging/parser/index.ts",
      "module": "src/logging/parser"
    },
    {
      "path": "src/logging/parser/LogFileScanner.ts",
      "module": "src/logging/parser"
    },
    {
      "path": "src/logging/__tests__/UnifiedLogger.test.ts",
      "module": "src/logging/__tests__"
    },
    {
      "path": "src/logging/__tests__/UnifiedParser.test.ts",
      "module": "src/logging/__tests__"
    },
    {
      "path": "src/logging/indexer/SimpleTimeSeriesIndexer.ts",
      "module": "src/logging/indexer"
    },
    {
      "path": "src/logging/indexer/TimeSeriesIndexer.ts",
      "module": "src/logging/indexer"
    }
  ],
  "readme_files": {
    "web-interface": "# RouteCodex Debug Interface\n\nA comprehensive web interface for monitoring and debugging the RouteCodex system with real-time updates, performance visualization, and interactive debugging capabilities.\n\n## Features\n\n### 🎯 Real-time Dashboard\n- **Live System Monitoring**: Real-time status updates for all modules\n- **Performance Metrics**: CPU, memory, response time, and throughput tracking\n- **Event Stream**: Live event logging with filtering and search\n- **Health Indicators**: Visual health status for all system components\n\n### 📊 Performance Visualization\n- **Interactive Charts**: Line, bar, area, and pie charts using Recharts\n- **Real-time Updates**: Live performance metrics with WebSocket integration\n- **Historical Data**: Time-based performance analysis\n- **Multi-metric Views**: Combined metric visualization\n\n### 🔧 Module Management\n- **Module Details**: Detailed view of each module's status and configuration\n- **Debug Controls**: Start/stop debugging for individual modules\n- **Configuration Management**: Live configuration editing and updates\n- **Activity Monitoring**: Module-specific event and performance tracking\n\n### 🔍 Event Explorer\n- **Advanced Filtering**: Filter by type, module, time range, and search terms\n- **Event Details**: Expandable event details with full context\n- **Export Functionality**: Export events in JSON format\n- **Real-time Updates**: Live event streaming with WebSocket\n\n### 🎨 User Interface\n- **Responsive Design**: Works seamlessly on desktop and mobile devices\n- **Dark Mode**: Automatic theme switching with system preferences\n- **Modern UI**: Clean, intuitive interface with Tailwind CSS\n- **Accessibility**: WCAG-compliant design with keyboard navigation\n\n## Quick Start\n\n### Prerequisites\n- Node.js 16.0 or higher\n- npm or yarn package manager\n- RouteCodex server running on localhost:5506 (default)\n\n### Installation\n\n1. **Clone and navigate to the web interface directory**:\n   ```bash\n   cd web-interface\n   ```\n\n2. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure environment variables** (optional):\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n4. **Start the development server**:\n   ```bash\n   npm run dev\n   ```\n\n5. **Open your browser**:\n   ```\n   http://localhost:3000\n   ```\n\n### Building for Production\n\n```bash\n# Build the application\nnpm run build\n\n# Preview the production build\nnpm run preview\n```\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `VITE_API_BASE_URL` | RouteCodex API base URL | `http://localhost:5506` |\n| `VITE_API_TIMEOUT` | API request timeout (ms) | `10000` |\n| `VITE_WEBSOCKET_URL` | WebSocket server URL | `ws://localhost:5507` |\n| `VITE_WEBSOCKET_RECONNECT_INTERVAL` | WebSocket reconnection interval (ms) | `5000` |\n| `VITE_WEBSOCKET_MAX_RECONNECT_ATTEMPTS` | Maximum reconnection attempts | `10` |\n| `VITE_UI_REFRESH_INTERVAL` | UI refresh interval (ms) | `5000` |\n| `VITE_UI_MAX_EVENTS` | Maximum events to display | `1000` |\n| `VITE_UI_THEME` | Default theme (`light`, `dark`, `auto`) | `auto` |\n\n### Configuration Files\n\n- **`vite.config.ts`**: Vite build configuration\n- **`tailwind.config.js`**: Tailwind CSS configuration\n- **`tsconfig.json`**: TypeScript configuration\n- **`.eslintrc.json`**: ESLint configuration\n\n## Project Structure\n\n```\nweb-interface/\n├── src/\n│   ├── components/          # React components\n│   │   ├── ui/            # Base UI components\n│   │   ├── Dashboard.tsx  # Main dashboard component\n│   │   ├── ModuleDetails.tsx\n│   │   ├── EventLog.tsx\n│   │   └── PerformanceChart.tsx\n│   ├── pages/             # Page components\n│   │   ├── ModuleDetailsPage.tsx\n│   │   └── NotFoundPage.tsx\n│   ├── hooks/             # Custom React hooks\n│   │   ├── useWebSocket.ts\n│   │   └── useApi.ts\n│   ├── services/          # API and WebSocket services\n│   │   ├── api.ts\n│   │   └── websocket.ts\n│   ├── types/             # TypeScript type definitions\n│   │   └── index.ts\n│   ├── utils/             # Utility functions\n│   │   ├── cn.ts\n│   │   └── formatters.ts\n│   ├── styles/            # CSS styles\n│   │   └── globals.css\n│   ├── App.tsx            # Main App component\n│   └── main.tsx           # Entry point\n├── public/                # Static files\n├── config/                # Configuration files\n├── dist/                  # Build output\n└── package.json\n```\n\n## API Integration\n\nThe web interface connects to the RouteCodex debugging API endpoints:\n\n### Core Endpoints\n- `GET /api/debug/health` - System health status\n- `GET /api/debug/modules` - Module status list\n- `GET /api/debug/modules/:id` - Module details\n- `PUT /api/debug/modules/:id/config` - Update module configuration\n\n### Event Endpoints\n- `GET /api/debug/events` - Event list with filtering\n- `GET /api/debug/events/:id` - Event details\n- `DELETE /api/debug/events` - Clear events\n\n### Performance Endpoints\n- `GET /api/debug/metrics` - Performance metrics\n- `DELETE /api/debug/metrics` - Clear metrics\n\n### Data Management\n- `GET /api/debug/export/:format` - Export debug data\n- `POST /api/debug/import` - Import debug data\n- `DELETE /api/debug/all` - Clear all data\n\n## WebSocket Integration\n\nThe interface uses WebSocket for real-time updates:\n\n### Connection\n- **URL**: `ws://localhost:5507` (configurable)\n- **Protocol**: Socket.IO\n- **Auto-reconnect**: Enabled with configurable intervals\n\n### Event Types\n- `debug_event` - Debug events\n- `module_status` - Module status updates\n- `system_health` - System health updates\n- `performance_metrics` - Performance metrics\n- `error_event` - Error events\n- `log_event` - Log events\n\n### Commands\n- `start_debugging` - Start debugging a module\n- `stop_debugging` - Stop debugging a module\n- `clear_events` - Clear event history\n- `export_data` - Export data\n- `subscribe_events` - Subscribe to event types\n- `subscribe_modules` - Subscribe to module updates\n\n## Development\n\n### Available Scripts\n\n```bash\n# Development server with hot reload\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Preview production build\nnpm run preview\n\n# Type checking\nnpm run type-check\n\n# Linting\nnpm run lint\n\n# Lint and fix\nnpm run lint:fix\n```\n\n### Code Standards\n\n- **TypeScript**: Strict type checking enabled\n- **ESLint**: Code linting with React rules\n- **Prettier**: Code formatting (if configured)\n- **Component Structure**: Functional components with hooks\n- **State Management**: Zustand for global state\n- **Styling**: Tailwind CSS utility-first approach\n\n### Testing\n\nCurrently, the project doesn't include automated tests. For production use, consider adding:\n\n- **Unit Tests**: Jest + React Testing Library\n- **Integration Tests**: React Router Testing\n- **E2E Tests**: Cypress or Playwright\n\n## Deployment\n\n### Static Hosting\n\nThe built application can be deployed to any static hosting service:\n\n1. **Build the application**:\n   ```bash\n   npm run build\n   ```\n\n2. **Deploy the `dist` folder** to your hosting service.\n\n### Environment-specific Builds\n\nCreate different configuration files for different environments:\n\n```bash\n# Development\ncp .env.example .env.development\n# Edit for development settings\n\n# Production\ncp .env.example .env.production\n# Edit for production settings\n```\n\n### Docker Deployment\n\n```dockerfile\nFROM node:18-alpine as builder\nWORKDIR /app\nCOPY package*.json ./\nRUN npm ci --only=production\nCOPY . .\nRUN npm run build\n\nFROM nginx:alpine\nCOPY --from=builder /app/dist /usr/share/nginx/html\nEXPOSE 80\nCMD [\"nginx\", \"-g\", \"daemon off;\"]\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **WebSocket Connection Failed**\n   - Check if the RouteCodex WebSocket server is running\n   - Verify the WebSocket URL in environment variables\n   - Check network connectivity and firewall settings\n\n2. **API Requests Failed**\n   - Verify the RouteCodex API server is running\n   - Check API base URL configuration\n   - Ensure CORS is properly configured on the server\n\n3. **Build Errors**\n   - Clear node_modules and reinstall: `rm -rf node_modules package-lock.json && npm install`\n   - Update TypeScript and dependencies: `npm update`\n   - Check for TypeScript errors in the IDE\n\n4. **Performance Issues**\n   - Reduce `VITE_UI_MAX_EVENTS` for better performance\n   - Increase `VITE_UI_REFRESH_INTERVAL` to reduce load\n   - Use browser dev tools to identify bottlenecks\n\n### Debug Mode\n\nEnable debug logging by setting the log level in environment variables:\n\n```bash\n# Add to .env\nVITE_LOG_LEVEL=debug\n```\n\n## Contributing\n\n1. **Fork the repository**\n2. **Create a feature branch**: `git checkout -b feature/amazing-feature`\n3. **Make your changes and test them**\n4. **Commit your changes**: `git commit -m 'Add amazing feature'`\n5. **Push to the branch**: `git push origin feature/amazing-feature`\n6. **Open a Pull Request**\n\n### Development Guidelines\n\n- Follow the existing code style and structure\n- Add TypeScript types for new components and functions\n- Include appropriate comments and documentation\n- Test your changes thoroughly\n- Update documentation as needed\n\n## License\n\nThis project is part of the RouteCodex system and is subject to the same license terms.\n\n## Support\n\nFor issues and questions:\n- Check the troubleshooting section above\n- Review the RouteCodex main documentation\n- Open an issue in the repository with detailed information\n\n## Changelog\n\n### v1.0.0 (Current)\n- Initial release with full debugging interface\n- Real-time dashboard with WebSocket integration\n- Performance visualization with interactive charts\n- Module management and debugging controls\n- Event explorer with advanced filtering\n- Responsive design with dark mode support\n- Export and import functionality for debug data",
    "docs/dry-run": "# Dry-Run System Documentation\n\nThe RouteCodex Dry-Run System is a comprehensive debugging and testing framework that enables detailed analysis of pipeline execution without actual processing. It supports node-level dry-run execution, intelligent input simulation, bidirectional pipeline processing, and advanced error recovery mechanisms.\n\n## 🏗️ Architecture Overview\n\nThe dry-run system consists of several interconnected components that work together to provide a complete debugging experience:\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                    Dry-Run System Architecture                   │\n├─────────────────────────────────────────────────────────────────┤\n│                                                                 │\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐  │\n│  │   Pipeline Dry-  │  │   Input         │  │   Bidirectional │  │\n│  │   Run Executor   │  │   Simulator     │  │   Pipeline      │  │\n│  │                 │  │                 │  │                 │  │\n│  │ • Node-level    │  │ • Mock data     │  │ • Request &    │  │\n│  │   dry-run       │  │   generation    │  │   response      │  │\n│  │ • Pipeline break │  │ • Context       │  │   pipelines     │  │\n│  │ • Event         │  │   propagation   │  │ • Driver        │  │\n│  │   handling      │  │ • Quality        │  │   feedback      │  │\n│  │ • Mixed modes   │  │   assessment     │  │ • Real response │  │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘  │\n│                                                                 │\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐  │\n│  │   Memory        │  │   Error         │  │   Pipeline      │  │\n│  │   Management    │  │   Boundaries    │  │   Dry-Run       │  │\n│  │                 │  │                 │  │   Framework     │  │\n│  │ • Resource      │  │ • Multi-level    │  │ • Dry-run       │  │\n│  │   tracking      │  │   error         │  │   configs       │  │\n│  │ • Auto cleanup  │  │   handling      │  │ • Validation     │  │\n│  │ • Memory        │  │ • Recovery       │  │   rules         │  │\n│  │   monitoring    │  │   strategies     │  │ • Performance   │  │\n│  │ • Cleanup       │  │ • Circuit        │  │   estimation     │  │\n│  │   strategies    │  │   breakers       │  │                 │  │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘  │\n└─────────────────────────────────────────────────────────────────┘\n```\n\n## 📁 File Structure\n\n### Core Framework Files\n\n| File | Description | Key Features |\n|------|-------------|--------------|\n| **`pipeline-dry-run-framework.ts`** | Core dry-run framework and interfaces | Node-level configurations, validation rules, error simulation |\n| **`dry-run-pipeline-executor.ts`** | Main pipeline execution engine | Node registration, execution order, event handling, mixed modes |\n| **`input-simulator.ts`** | Intelligent input simulation system | Multiple simulation strategies, context propagation, quality assessment |\n| **`bidirectional-pipeline-dry-run.ts`** | Bidirectional pipeline support | Request/response pipelines, driver feedback, real response integration |\n| **`memory-management.ts`** | Memory and resource management | Resource tracking, cleanup strategies, memory monitoring |\n| **`error-boundaries.ts`** | Error handling and recovery | Multi-level error boundaries, circuit breakers, graceful degradation |\n| **`memory-interface.ts`** | Memory management interfaces | Type definitions, resource interfaces, monitoring interfaces |\n| **`pipeline-dry-run-examples.ts`** | Usage examples and demonstrations | Configuration examples, test scenarios, best practices |\n\n### Test Files\n\n| File | Description | Test Coverage |\n|------|-------------|---------------|\n| **`test-all-nodes-dry-run.mjs`** | All-nodes dry-run functionality | Input simulation, complete pipeline dry-run |\n| **`test-bidirectional-pipeline-dry-run.mjs`** | Bidirectional pipeline testing | Mixed modes, response sources, feedback analysis |\n\n## 🔧 Core Components\n\n### 1. Pipeline Dry-Run Framework (`pipeline-dry-run-framework.ts`)\n\n**Purpose**: Provides the foundation for node-level dry-run execution with \"pipeline break\" debugging capabilities.\n\n**Key Interfaces**:\n- `NodeDryRunConfig`: Configuration for individual node dry-run behavior\n- `NodeDryRunResult`: Standardized result format for dry-run execution\n- `PipelineDryRunResponse`: Comprehensive response format for pipeline dry-run\n- `OutputValidationRule`: Validation rules for expected outputs\n\n**Features**:\n- **Node-Level Configuration**: Each pipeline node can be independently configured for dry-run\n- **Multiple Dry-Run Modes**: Output validation, full analysis, error simulation\n- **Validation Rules**: Comprehensive output validation with customizable rules\n- **Error Simulation**: Controlled error simulation for testing error handling\n- **Performance Estimation**: Detailed performance metrics and estimates\n- **Breakpoint Support**: Debug breakpoints for detailed inspection\n\n**Usage Example**:\n```typescript\nimport { pipelineDryRunManager, type NodeDryRunConfig } from './src/modules/pipeline/dry-run/pipeline-dry-run-framework.js';\n\nconst config: NodeDryRunConfig = {\n  enabled: true,\n  mode: 'full-analysis',\n  breakpointBehavior: 'pause',\n  verbosity: 'detailed',\n  validationRules: [\n    {\n      id: 'schema-validation',\n      type: 'schema',\n      condition: { required: ['_metadata'] },\n      errorMessage: 'Missing required metadata',\n      severity: 'error'\n    }\n  ]\n};\n\npipelineDryRunManager.configureNodeDryRun('llm-switch', config);\n```\n\n### 2. Dry-Run Pipeline Executor (`dry-run-pipeline-executor.ts`)\n\n**Purpose**: Orchestrates the execution of dry-run pipelines with support for mixed execution modes and intelligent input simulation.\n\n**Key Classes**:\n- `DryRunPipelineExecutor`: Main execution engine for dry-run pipelines\n- `PipelineNodeInfo`: Node information and configuration\n- `ExecutionContext`: Complete execution context with metadata\n- `BreakpointEvent`: Event system for debugging and monitoring\n\n**Features**:\n- **Mixed Execution Modes**: Support for partial dry-run (some nodes normal, some dry-run)\n- **All-Nodes Dry-Run**: Intelligent handling when all nodes are configured for dry-run\n- **Event System**: Comprehensive event handling for debugging\n- **Execution Plans**: Detailed execution plans with time estimates\n- **Breakpoint Handling**: Configurable breakpoint behavior (continue, pause, terminate)\n- **Performance Tracking**: Real-time performance metrics and statistics\n\n**Usage Example**:\n```typescript\nimport { dryRunPipelineExecutor } from './src/modules/pipeline/dry-run/dry-run-pipeline-executor.js';\n\n// Register nodes with mixed dry-run configuration\ndryRunPipelineExecutor.registerNodes([\n  {\n    id: 'llm-switch',\n    type: 'llm-switch',\n    module: llmSwitchModule,\n    isDryRun: true,\n    config: { enabled: true, mode: 'full-analysis' }\n  },\n  {\n    id: 'provider',\n    type: 'provider',\n    module: providerModule,\n    isDryRun: false // Normal execution\n  }\n]);\n\n// Execute in mixed mode\nconst result = await dryRunPipelineExecutor.executePipeline(\n  request,\n  'test-pipeline',\n  'mixed'\n);\n```\n\n### 3. Input Simulator (`input-simulator.ts`)\n\n**Purpose**: Solves the \"all nodes dry-run\" problem by generating intelligent mock input data for pipeline execution.\n\n**Key Classes**:\n- `InputSimulator`: Main simulation engine with multiple strategies\n- `InputSimulationConfig`: Configuration for simulation behavior\n- `SimulatedInput`: Result of input simulation with quality metrics\n- `ContextPropagationData`: Data propagation context for pipeline simulation\n\n**Simulation Strategies**:\n- **Historical Data**: Uses historical request/response data\n- **Schema Inference**: Generates data based on node schema definitions\n- **Rule-Based**: Uses predefined rules and templates\n- **AI Generation**: AI-powered data generation\n- **Request Propagation**: Propagates original request with modifications\n\n**Features**:\n- **Multiple Fallback Strategies**: Automatic strategy selection with fallbacks\n- **Quality Assessment**: Quality scoring and confidence metrics\n- **Context Propagation**: Maintains context across pipeline nodes\n- **Performance Estimation**: Time and memory usage estimates\n- **Historical Learning**: Learns from actual execution data\n\n**Usage Example**:\n```typescript\nimport { inputSimulator } from './src/modules/pipeline/dry-run/input-simulator.js';\n\nconst simulatedInput = await inputSimulator.simulateInput(\n  originalRequest,\n  'llm-switch',\n  'llm-switch',\n  contextData,\n  {\n    enabled: true,\n    primaryStrategy: 'historical-data',\n    fallbackStrategies: ['schema-inference', 'rule-based'],\n    qualityRequirement: 'medium'\n  }\n);\n```\n\n### 4. Bidirectional Pipeline Dry-Run (`bidirectional-pipeline-dry-run.ts`)\n\n**Purpose**: Extends dry-run capabilities to bidirectional pipelines with request/response processing and driver feedback.\n\n**Key Classes**:\n- `BidirectionalPipelineManager`: Manages bidirectional pipeline execution\n- `BidirectionalPipelineConfig`: Configuration for bidirectional behavior\n- `ResponseDryRunConfig**: Response-specific dry-run configuration\n- `DriverFeedbackAnalysis**: Comprehensive feedback analysis\n\n**Features**:\n- **Bidirectional Processing**: Separate request and response pipeline handling\n- **Real Response Integration**: Use actual server responses as dry-run input\n- **Driver Feedback**: Performance and quality analysis across pipeline stages\n- **Response Input Sources**: Multiple response data sources (real, simulated, cached)\n- **Transformation Rules**: Configurable response transformation and validation\n- **Performance Analytics**: Detailed performance metrics and optimization suggestions\n\n**Response Input Sources**:\n- **Real Response**: Use actual server responses\n- **Simulated Response**: AI-generated mock responses\n- **Cached Response**: Use cached historical responses\n\n**Usage Example**:\n```typescript\nimport { bidirectionalPipelineManager } from './src/modules/pipeline/dry-run/bidirectional-pipeline-dry-run.js';\n\nconst result = await bidirectionalPipelineManager.executeBidirectionalPipeline(\n  request,\n  'bidirectional-test',\n  realServerResponse\n);\n\nconsole.log('Request result:', result.requestResult);\nconsole.log('Response result:', result.responseResult);\nconsole.log('Driver feedback:', result.driverFeedbackAnalysis);\n```\n\n### 5. Memory Management (`memory-management.ts`)\n\n**Purpose**: Provides comprehensive memory management, resource cleanup, and leak prevention for dry-run operations.\n\n**Key Classes**:\n- `MemoryManager`: Centralized memory and resource management\n- `ResourceInfo`: Detailed resource tracking information\n- `MemoryStats`: Comprehensive memory usage statistics\n- `CleanupResult**: Results of cleanup operations\n\n**Features**:\n- **Resource Tracking**: Automatic registration and tracking of all resources\n- **Multiple Cleanup Strategies**: LRU, LFU, FIFO, TTL, hybrid strategies\n- **Memory Monitoring**: Real-time memory usage monitoring with thresholds\n- **Automatic Cleanup**: Configurable automatic resource cleanup\n- **Performance Optimization**: Memory optimization and leak prevention\n- **Statistics and Reporting**: Detailed memory usage reports and analytics\n\n**Cleanup Strategies**:\n- **LRU (Least Recently Used)**: Clean least recently used resources first\n- **LFU (Least Frequently Used)**: Clean least frequently used resources first\n- **FIFO (First In First Out)**: Clean resources in creation order\n- **TTL-Based**: Clean resources based on time-to-live\n- **Size-Based**: Clean largest resources first\n- **Hybrid**: Intelligent combination of multiple strategies\n\n**Usage Example**:\n```typescript\nimport { memoryManager, ResourceType } from './src/modules/pipeline/dry-run/memory-management.js';\n\n// Register a resource for tracking\nmemoryManager.registerResource(\n  'resource-123',\n  ResourceType.EXECUTION_CONTEXT,\n  resourceData,\n  1024, // Estimated size in bytes\n  ['execution', 'dry-run'],\n  { pipelineId: 'test-pipeline' }\n);\n\n// Get resource with automatic access tracking\nconst resource = memoryManager.getResource('resource-123');\n\n// Manual cleanup\nconst cleanupResult = await memoryManager.cleanup();\nconsole.log(`Freed ${cleanupResult.freedMemory} bytes`);\n```\n\n### 6. Error Boundaries (`error-boundaries.ts`)\n\n**Purpose**: Provides comprehensive error handling, recovery mechanisms, and fault tolerance for dry-run operations.\n\n**Key Classes**:\n- `ErrorBoundaryManager`: Centralized error boundary management\n- `ErrorBoundary`: Individual error boundary for protected operations\n- `SystemError**: Standardized error representation\n- `CircuitBreakerState**: Circuit breaker state management\n\n**Features**:\n- **Multi-Level Error Handling**: Global and local error boundaries\n- **Intelligent Recovery Strategies**: Automatic recovery with multiple strategies\n- **Circuit Breaker Pattern**: Prevents cascading failures\n- **Graceful Degradation**: Maintains system availability during errors\n- **Error Isolation**: Contains errors within boundaries\n- **Comprehensive Statistics**: Detailed error tracking and analysis\n\n**Recovery Strategies**:\n- **Retry Immediate**: Immediate retry for transient errors\n- **Retry Delayed**: Delayed retry with configurable delays\n- **Retry Exponential**: Exponential backoff for persistent errors\n- **Fallback Primary/Secondary**: Fallback to alternative implementations\n- **Circuit Breaker**: Temporarily stop operations on repeated failures\n- **Graceful Degradation**: Degrade functionality gracefully\n- **Skip Operation**: Skip non-critical operations\n- **Terminate**: Stop operations on critical errors\n\n**Usage Example**:\n```typescript\nimport { errorBoundaryManager, defaultErrorBoundaryConfig } from './src/modules/pipeline/dry-run/error-boundaries.js';\n\n// Create an error boundary\nconst boundary = errorBoundaryManager.createBoundary({\n  ...defaultErrorBoundaryConfig,\n  boundaryId: 'dry-run-boundary',\n  maxRetries: 3,\n  enableCircuitBreaker: true,\n  enableGracefulDegradation: true\n});\n\n// Execute protected operation\nconst result = await boundary.execute(\n  async () => {\n    // Your dry-run operation here\n    return await performDryRunOperation();\n  },\n  async () => {\n    // Fallback operation\n    return await performFallbackOperation();\n  }\n);\n```\n\n### 7. Memory Interface (`memory-interface.ts`)\n\n**Purpose**: Defines comprehensive interfaces for memory management, resource handling, and system monitoring.\n\n**Key Interfaces**:\n- `Disposable`: Standard interface for disposable resources\n- `ResourceUsage`: System resource usage information\n- `MemoryEvent`: Memory-related event data\n- `MemoryAnalyzer`: Memory analysis and leak detection\n- `MemoryMonitor`: Real-time memory monitoring\n- `ResourcePool`: Resource pooling interface\n\n**Features**:\n- **Type Safety**: Comprehensive TypeScript type definitions\n- **Extensibility**: Well-defined interfaces for extension\n- **Monitoring**: Standardized monitoring capabilities\n- **Analysis**: Memory analysis and leak detection interfaces\n- **Resource Management**: Standardized resource lifecycle management\n\n## 🚀 Usage Patterns\n\n### 1. Basic Node-Level Dry-Run\n\n```typescript\n// Configure individual nodes for dry-run\npipelineDryRunManager.configureNodesDryRun({\n  'llm-switch': {\n    enabled: true,\n    mode: 'output-validation',\n    breakpointBehavior: 'continue',\n    verbosity: 'normal'\n  },\n  'compatibility': {\n    enabled: true,\n    mode: 'full-analysis',\n    breakpointBehavior: 'pause',\n    verbosity: 'detailed'\n  }\n});\n\n// Execute with mixed modes\nconst result = await dryRunPipelineExecutor.executePipeline(\n  request,\n  'test-pipeline',\n  'mixed'\n);\n```\n\n### 2. All-Nodes Dry-Run with Input Simulation\n\n```typescript\n// Configure all nodes for dry-run\nconst allNodesConfig = {\n  'llm-switch': { enabled: true, mode: 'full-analysis' },\n  'compatibility': { enabled: true, mode: 'full-analysis' },\n  'provider': { enabled: true, mode: 'full-analysis' }\n};\n\npipelineDryRunManager.configureNodesDryRun(allNodesConfig);\n\n// Execute - input simulator will automatically generate mock data\nconst result = await dryRunPipelineExecutor.executePipeline(\n  request,\n  'all-nodes-test',\n  'dry-run'\n);\n```\n\n### 3. Bidirectional Pipeline Dry-Run\n\n```typescript\n// Configure bidirectional pipeline\nconst bidirectionalConfig = {\n  requestConfig: {\n    dryRunMode: 'full',\n    nodeConfigs: {\n      'llm-switch': { enabled: true, mode: 'full-analysis' },\n      'compatibility': { enabled: false, mode: 'output-validation' }\n    }\n  },\n  responseConfig: {\n    dryRunMode: 'partial',\n    responseDryRun: {\n      enabled: true,\n      inputSource: 'real-response',\n      performanceAnalysis: true\n    }\n  },\n  driverFeedback: {\n    enabled: true,\n    analysisLevel: 'detailed'\n  }\n};\n\nconst result = await bidirectionalPipelineManager.executeBidirectionalPipeline(\n  request,\n  'bidirectional-test',\n  realServerResponse\n);\n```\n\n### 4. Memory Management Integration\n\n```typescript\n// Register resources for automatic cleanup\nmemoryManager.registerResource(\n  'dry-run-context',\n  ResourceType.EXECUTION_CONTEXT,\n  contextData,\n  2048,\n  ['dry-run', 'execution'],\n  { pipelineId: 'test-pipeline' }\n);\n\n// Execute with memory monitoring\nconst stats = memoryManager.getStats();\nconsole.log(`Memory usage: ${stats.totalUsage} bytes (${(stats.memoryUsageRatio * 100).toFixed(1)}%)`);\n```\n\n### 5. Error Boundary Protection\n\n```typescript\n// Create protected execution boundary\nconst boundary = errorBoundaryManager.createBoundary({\n  boundaryId: 'dry-run-protection',\n  maxRetries: 3,\n  enableCircuitBreaker: true,\n  enableGracefulDegradation: true\n});\n\n// Execute with error protection\nconst result = await boundary.execute(\n  async () => {\n    return await performComplexDryRunOperation();\n  },\n  async () => {\n    return await performGracefulFallback();\n  }\n);\n```\n\n## 🧪 Testing\n\n### Running Tests\n\n```bash\n# Test all-nodes dry-run functionality\nnode test-all-nodes-dry-run.mjs\n\n# Test bidirectional pipeline dry-run\nnode test-bidirectional-pipeline-dry-run.mjs\n\n# Run with specific configurations\nnode test-all-nodes-dry-run.mjs --mode=full-analysis\nnode test-bidirectional-pipeline-dry-run.mjs --response-source=real-response\n```\n\n### Test Coverage\n\nThe test suite covers:\n\n- **All-Nodes Dry-Run**: Input simulation, context propagation, complete pipeline analysis\n- **Mixed Execution Modes**: Partial dry-run with normal execution nodes\n- **Bidirectional Processing**: Request/response pipeline coordination\n- **Response Input Sources**: Real, simulated, and cached response handling\n- **Driver Feedback Analysis**: Performance and quality analytics\n- **Memory Management**: Resource tracking, cleanup strategies, leak prevention\n- **Error Boundaries**: Error handling, recovery mechanisms, circuit breakers\n- **Performance Monitoring**: Memory usage, execution time, resource optimization\n\n## 🔧 Configuration\n\n### Dry-Run Configuration Structure\n\n```json\n{\n  \"dryRun\": {\n    \"global\": {\n      \"enabled\": true,\n      \"defaultMode\": \"output-validation\",\n      \"verbosity\": \"normal\",\n      \"autoCleanup\": true\n    },\n    \"nodes\": {\n      \"llm-switch\": {\n        \"enabled\": true,\n        \"mode\": \"full-analysis\",\n        \"breakpointBehavior\": \"continue\",\n        \"validationRules\": [...],\n        \"errorSimulation\": {...}\n      },\n      \"compatibility\": {\n        \"enabled\": false,\n        \"mode\": \"output-validation\"\n      }\n    },\n    \"inputSimulation\": {\n      \"enabled\": true,\n      \"primaryStrategy\": \"historical-data\",\n      \"fallbackStrategies\": [\"schema-inference\", \"rule-based\"],\n      \"qualityRequirement\": \"medium\"\n    },\n    \"memory\": {\n      \"maxMemoryUsage\": 536870912,\n      \"cleanupInterval\": 60000,\n      \"enableMonitoring\": true,\n      \"cleanupStrategy\": \"hybrid\"\n    },\n    \"errorHandling\": {\n      \"maxRetries\": 3,\n      \"enableCircuitBreaker\": true,\n      \"enableGracefulDegradation\": true\n    }\n  }\n}\n```\n\n## 📊 Monitoring and Analytics\n\n### Memory Usage Monitoring\n\n```typescript\n// Get current memory statistics\nconst stats = memoryManager.getStats();\nconsole.log(`Memory Usage: ${stats.totalUsage} bytes`);\nconsole.log(`Active Resources: ${stats.activeResources}`);\nconsole.log(`Cache Hit Rate: ${stats.cacheHitRate}`);\n\n// Set up memory monitoring callbacks\nmemoryManager.setCallbacks({\n  onMemoryWarning: (stats) => {\n    console.warn(`Memory usage warning: ${(stats.memoryUsageRatio * 100).toFixed(1)}%`);\n  },\n  onMemoryCritical: (stats) => {\n    console.error(`Memory usage critical: ${(stats.memoryUsageRatio * 100).toFixed(1)}%`);\n  }\n});\n```\n\n### Error Analytics\n\n```typescript\n// Get error statistics\nconst errorStats = errorBoundaryManager.getStats();\nconsole.log(`Total Errors: ${errorStats.totalErrors}`);\nconsole.log(`Successful Recoveries: ${errorStats.successfulRecoveries}`);\nconsole.log(`Average Recovery Time: ${errorStats.averageRecoveryTime}ms`);\n\n// Get active errors\nconst activeErrors = errorBoundaryManager.getActiveErrors();\n```\n\n### Performance Analytics\n\n```typescript\n// Driver feedback analysis provides detailed performance metrics\nif (result.driverFeedbackAnalysis) {\n  const analysis = result.driverFeedbackAnalysis;\n  console.log(`Request-Response Correlation: ${analysis.requestResponseCorrelation.similarity}`);\n  console.log(`Total Processing Time: ${analysis.performanceAnalysis.totalOverhead}ms`);\n  console.log(`Overall Quality Score: ${analysis.qualityAnalysis.overallQuality}`);\n}\n```\n\n## 🎯 Best Practices\n\n### 1. Configuration Management\n- Use consistent configuration across all dry-run nodes\n- Configure appropriate verbosity levels for different environments\n- Enable memory monitoring in production environments\n\n### 2. Memory Management\n- Always register resources with the memory manager\n- Use appropriate cleanup strategies for your use case\n- Monitor memory usage and set appropriate thresholds\n\n### 3. Error Handling\n- Create appropriate error boundaries for critical operations\n- Configure sensible retry strategies for different error types\n- Enable graceful degradation for non-critical operations\n\n### 4. Performance Optimization\n- Use input simulation for all-nodes dry-run scenarios\n- Leverage caching for frequently used response data\n- Monitor performance metrics and optimize accordingly\n\n### 5. Testing Strategy\n- Test both individual nodes and complete pipelines\n- Validate mixed execution modes thoroughly\n- Test error scenarios and recovery mechanisms\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n**Memory Leaks**\n- Ensure all resources are properly registered with memory manager\n- Check for missing cleanup operations\n- Monitor memory usage trends over time\n\n**Slow Performance**\n- Optimize input simulation strategies\n- Use caching for frequently accessed data\n- Adjust cleanup intervals based on load\n\n**Error Recovery Failures**\n- Verify error boundary configurations\n- Check fallback operation implementations\n- Monitor circuit breaker states\n\n**Input Simulation Issues**\n- Validate simulation strategy configurations\n- Check historical data availability\n- Ensure appropriate fallback strategies are configured\n\n### Debug Tools\n\n```typescript\n// Enable detailed logging\nconsole.log('Memory Stats:', memoryManager.getStats());\nconsole.log('Error Stats:', errorBoundaryManager.getStats());\n\n// Get detailed resource information\nconst resources = memoryManager.getAllResources();\nresources.forEach(resource => {\n  console.log(`${resource.id}: ${resource.estimatedSize} bytes`);\n});\n\n// Check circuit breaker states\ndryRunPipelineExecutor.getRegisteredNodes().forEach(node => {\n  const boundary = errorBoundaryManager.getBoundary(node.id);\n  if (boundary) {\n    console.log(`${node.id} circuit breaker:`, boundary.getCircuitBreakerState());\n  }\n});\n```\n\n## 📈 Advanced Features\n\n### Custom Simulation Strategies\n\n```typescript\n// Add custom simulation strategy\ninputSimulator.addStrategy('custom-strategy', async (input, context) => {\n  // Custom simulation logic\n  return {\n    source: 'custom',\n    data: customGenerateData(input, context),\n    quality: 0.9,\n    confidence: 0.85,\n    strategy: 'custom-strategy',\n    metadata: { /* Custom metadata */ }\n  };\n});\n```\n\n### Custom Error Handlers\n\n```typescript\n// Add custom error handlers\nconst boundary = errorBoundaryManager.createBoundary({\n  ...defaultErrorBoundaryConfig,\n  customHandlers: {\n    [ErrorType.NETWORK_ERROR]: async (error) => {\n      // Custom network error handling\n      return await handleNetworkError(error);\n    }\n  }\n});\n```\n\n### Custom Recovery Strategies\n\n```typescript\n// Implement custom recovery logic\nconst customRecovery = async (error: SystemError) => {\n  // Custom recovery logic\n  return {\n    success: true,\n    resolved: true,\n    action: 'custom-recovery',\n    result: await performCustomRecovery(error)\n  };\n};\n```\n\nThis comprehensive dry-run system provides powerful debugging and testing capabilities for the RouteCodex pipeline, enabling detailed analysis, performance optimization, and reliable error handling across all execution scenarios.",
    "docs/pipeline": "# RouteCodex Pipeline Module Documentation\n\nRouteCodex流水线模块是4层管道架构的核心组件，负责将路由后的请求通过可组合的处理流水线转换为Provider可处理的格式。支持动态路由分类、格式转换、流式控制和Provider适配。\n\n## 🚨 核心架构原则\n\n### **llmswitch-core工具调用唯一入口**\nPipeline模块严格遵循\"工具调用唯一入口\"原则：\n- **LLMSwitch层**: 不处理工具调用转换，直接透传给llmswitch-core\n- **Compatibility层**: 仅处理provider特定字段标准化，不涉及工具转换\n- **Provider层**: 纯HTTP通信，不处理数据格式转换\n- **统一处理**: 所有工具调用逻辑集中在llmswitch-core\n\n### **兼容层最小化处理**\n```typescript\n// ✅ 正确：兼容层只做字段标准化\nexport class GLMCompatibility {\n  processOutgoing(response) {\n    // 仅处理provider特有字段\n    if (response.reasoning_content) {\n      // 提取工具意图到reasoning_content，不生成tool_calls\n      const { blocks } = harvestRccBlocksFromText(response.reasoning_content);\n      response.reasoning_content = blocks.join('\\n');\n    }\n    return response;\n  }\n}\n\n// ❌ 错误：兼容层不应处理工具转换\nexport class BadCompatibility {\n  processOutgoing(response) {\n    // 不要在此处处理工具调用转换！\n    if (response.content.includes('tool')) {\n      response.tool_calls = parseToolCalls(response.content);\n    }\n  }\n}\n```\n\n## 目录\n\n- [架构概述](./ARCHITECTURE.md)\n- [配置指南](./CONFIGURATION.md)\n- [开发指南](./DEVELOPMENT.md)\n- [转换表规范](./TRANSFORMATION_TABLES.md)\n- [错误处理](./ERROR_HANDLING.md)\n- [调试支持](./DEBUGGING.md)\n- [性能优化](./PERFORMANCE.md)\n- [扩展开发](./EXTENSION.md)\n\n## 快速开始\n\nPipeline模块是RouteCodex系统的核心组件，负责将路由后的请求通过可组合的处理流水线转换为Provider可处理的格式。\n\n### 基本概念\n\n```\n源协议 + 目标Provider = 流水线组合\nOpenAI + Qwen = LLMSwitch(透传) + Workflow(流控) + Compatibility(适配) + Provider(Qwen)\n```\n\n### 快速使用\n\n```typescript\nimport { PipelineManager } from '../../src/modules/pipeline/index.js';\n\n// 1. 初始化流水线管理器\nconst manager = new PipelineManager();\nawait manager.initialize({\n  pipelines: [\n    {\n      id: 'qwen.qwen3-coder-plus',\n      provider: qwenProviderConfig,\n      modules: {\n        llmSwitch: { type: 'openai-passthrough' },\n        workflow: { type: 'streaming-control' },\n        compatibility: { type: 'field-mapping' },\n        provider: { type: 'qwen-http' }\n      }\n    }\n  ]\n});\n\n// 2. 选择流水线处理请求\nconst pipeline = manager.selectPipeline({\n  providerId: 'qwen',\n  modelId: 'qwen3-coder-plus'\n});\n\nconst response = await pipeline.processRequest(request);\n```\n\n## 核心特性\n\n### 🔧 模块化架构\n- **LLMSwitch**: 协议转换层\n- **Workflow**: 流式控制层\n- **Compatibility**: 字段适配层\n- **Provider**: 服务实现层\n\n### 🚀 预创建流水线\n- 初始化时创建所有流水线\n- 避免运行时创建开销\n- 支持热重载配置\n\n### 📋 配置驱动\n- JSON配置转换规则\n- Provider配置中指定Compatibility\n- 统一的转换表格式\n\n### 🛡️ 错误处理\n- 集成ErrorHandlingCenter\n- 无静默失败策略\n- 认证自动恢复\n\n## 学习路径\n\n1. **架构概述**: 了解整体设计理念\n2. **配置指南**: 学习如何配置流水线\n3. **开发指南**: 掌握扩展开发方法\n4. **转换表规范**: 理解数据转换规则\n5. **错误处理**: 学习错误处理机制\n6. **调试支持**: 掌握调试技巧\n7. **性能优化**: 了解性能优化方法\n8. **扩展开发**: 学习自定义模块开发\n\n## 示例项目\n\n参考 `examples/pipeline/` 目录中的完整示例：\n- [基础流水线示例](../examples/pipeline/basic/)\n- [自定义Provider示例](../examples/pipeline/custom-provider/)\n- [转换表配置示例](../examples/pipeline/transformation-tables/)\n\n## API文档\n\n详细的API文档请参考：\n- [TypeScript类型定义](../../src/modules/pipeline/types/)\n- [接口文档](../../src/modules/pipeline/interfaces/)\n- [配置类型](../../src/modules/pipeline/types/pipeline-types.ts)\n\n## 常见问题\n\n### Q: 如何添加新的Provider？\nA: 参考[扩展开发](./EXTENSION.md)文档，继承BaseProvider类并实现必要方法。\n\n### Q: 如何配置字段转换？\nA: 在Provider配置的compatibility部分定义requestMappings和responseMappings。\n\n### Q: 如何处理认证失败？\nA: Pipeline模块已集成ErrorHandlingCenter，认证失败会自动触发恢复流程。\n\n## 社区支持\n\n- 问题反馈: [GitHub Issues](https://github.com/your-repo/issues)\n- 功能请求: [GitHub Discussions](https://github.com/your-repo/discussions)\n- 文档贡献: [CONTRIBUTING.md](../../CONTRIBUTING.md)\n\n## 版本信息\n\n- **当前版本**: 1.0.0\n- **兼容性**: RouteCodex v0.2+\n- **最后更新**: 2025-01-22",
    "docs/transformation-tables": "# Claude Code Router Transformation Tables Reference\n\n## Overview\n\nThis document contains comprehensive transformation tables extracted from the Claude Code Router repository. The tables describe how to convert between different LLM API formats, focusing on Anthropic, OpenAI, and Gemini protocols, as well as various OpenAI-compatible providers.\n\n## Architecture Analysis\n\nThe Claude Code Router uses an **agent-based architecture** rather than static transformation tables. Protocol conversion happens dynamically through:\n\n1. **Agent System**: Different agents handle specific types of requests (e.g., image processing)\n2. **Stream Processing**: Real-time transformation of streaming responses\n3. **Tool Integration**: Dynamic tool calling and response handling\n4. **Configuration-Driven**: JSON-based configuration for routing and transformation\n\n## Transformation Tables\n\n### 1. Anthropic ↔ OpenAI Conversion\n\n**File**: `claude-code-router-anthropic-to-openai.json`\n**Reverse**: `claude-code-router-openai-to-anthropic.json`\n\n#### Key Mappings:\n- **Model Mapping**: Claude models → GPT models\n  - `claude-3-5-sonnet-20241022` → `gpt-4o`\n  - `claude-3-5-haiku-20241022` → `gpt-4o-mini`\n  - `claude-3-opus-20240229` → `gpt-4-turbo`\n\n- **Message Structure**: \n  - Anthropic: `{type: \"text\", text: \"content\"}`\n  - OpenAI: `{role: \"user\", content: \"content\"}`\n\n- **Tool Calling**:\n  - Anthropic: `tool_use` with `input` object\n  - OpenAI: `tool_calls` with `arguments` string\n\n- **Streaming Events**:\n  - `content_block_start` → `tool_calls_start`\n  - `content_block_delta` → `tool_calls_delta`\n  - `content_block_stop` → `tool_calls_stop`\n\n### 2. Anthropic ↔ Gemini Conversion\n\n**File**: `claude-code-router-anthropic-to-gemini.json`\n\n#### Key Mappings:\n- **Model Mapping**: Claude models → Gemini models\n  - `claude-3-5-sonnet-20241022` → `gemini-1.5-pro`\n  - `claude-3-5-haiku-20241022` → `gemini-1.5-flash`\n\n- **Message Structure**:\n  - Anthropic: `messages` array\n  - Gemini: `contents` array with `parts`\n\n- **Parameters**:\n  - `max_tokens` → `generationConfig.maxOutputTokens`\n  - `temperature` → `generationConfig.temperature`\n  - `stop_sequences` → `generationConfig.stopSequences`\n\n### 3. OpenAI → Compatible Providers\n\n#### LMStudio\n**File**: `claude-code-router-openai-to-lmstudio.json`\n- **Direct Mapping**: LMStudio is fully OpenAI-compatible\n- **No Transformation Needed**: Same API structure\n- **Local Model Support**: Handles model loading dynamically\n\n#### Ollama\n**File**: `claude-code-router-openai-to-ollama.json`\n- **Endpoint Changes**: `/v1/chat/completions` → `/api/chat`\n- **Parameter Mapping**: `max_tokens` → `options.num_predict`\n- **Stream Format**: JSON lines instead of SSE\n- **No Authentication**: Removes API key requirements\n\n#### Text Generation WebUI\n**File**: `claude-code-router-openai-to-textgenwebui.json`\n- **Full Compatibility**: OpenAI-compatible endpoints\n- **Extended Parameters**: Additional generation parameters\n- **Multiple Backends**: Supports various model backends\n\n## Agent System Patterns\n\n### Image Processing Agent\nThe Claude Code Router includes a specialized image processing agent:\n\n```typescript\nclass ImageAgent implements IAgent {\n  name = \"image\";\n  tools: Map<string, ITool>;\n  \n  // Image caching mechanism\n  private imageCache: ImageCache;\n  \n  // Tool: analyzeImage\n  tools.set('analyzeImage', {\n    name: \"analyzeImage\",\n    description: \"Analyse image or images by ID and extract information...\",\n    parameters: {\n      imageId: \"array of IDs to analyse\",\n      task: \"detailed task description\",\n      regions: \"optional regions of interest\"\n    }\n  });\n}\n```\n\n### Stream Processing\nThe router uses sophisticated stream processing:\n\n```typescript\n// SSE Parser Transform\nclass SSEParserTransform extends TransformStream<string, any> {\n  // Parses Server-Sent Events into structured data\n}\n\n// SSE Serializer Transform  \nclass SSESerializerTransform extends TransformStream<any, string> {\n  // Serializes structured data back to SSE format\n}\n```\n\n## Configuration Patterns\n\n### Router Configuration\n```typescript\ninterface RouterConfig {\n  providers: ProviderConfig[];\n  HOST: string;\n  PORT: number;\n  APIKEY?: string;\n  Router: {\n    image?: string; // Image model for agent\n    default?: string; // Default model\n  };\n}\n```\n\n### Agent Configuration\n```typescript\ninterface AgentConfig {\n  name: string;\n  tools: Map<string, ITool>;\n  shouldHandle: (req: any, config: any) => boolean;\n  reqHandler: (req: any, config: any) => void;\n}\n```\n\n## Transformation Patterns\n\n### 1. Content Structure Conversion\n- **Text Content**: Direct mapping with role/type conversion\n- **Image Content**: URL/source format conversion with caching\n- **Tool Content**: Function call format conversion\n\n### 2. Parameter Mapping\n- **Direct Mapping**: Same parameter name and value\n- **Nested Mapping**: Parameter moved to nested object\n- **Value Transformation**: Parameter value conversion\n- **Array Processing**: Stop sequences and similar array parameters\n\n### 3. Stream Event Mapping\n- **Event Type Conversion**: Different event names for same concept\n- **Data Structure Conversion**: Different data formats for same information\n- **Tool Call Handling**: Special handling for tool calling in streams\n\n### 4. Error Handling\n- **Error Format**: Different error response structures\n- **Error Codes**: Provider-specific error codes\n- **Error Messages**: Human-readable error descriptions\n\n## Best Practices\n\n### 1. Model Mapping\n- Use appropriate model equivalents\n- Consider model capabilities and limitations\n- Handle model-specific features\n\n### 2. Message Structure\n- Preserve conversation context\n- Handle role conversions correctly\n- Maintain message order and relationships\n\n### 3. Tool Calling\n- Convert function signatures appropriately\n- Handle parameter serialization/deserialization\n- Manage tool call IDs and references\n\n### 4. Stream Processing\n- Handle chunked responses correctly\n- Maintain stream state and context\n- Process events in correct order\n\n### 5. Error Handling\n- Provide meaningful error messages\n- Handle provider-specific errors\n- Maintain API compatibility\n\n## Implementation Notes\n\n### 1. Performance Considerations\n- Use caching for frequently accessed data\n- Minimize transformation overhead\n- Optimize stream processing\n\n### 2. Compatibility\n- Test with multiple provider versions\n- Handle API version differences\n- Maintain backward compatibility\n\n### 3. Extensibility\n- Design for new providers\n- Support custom transformations\n- Allow configuration overrides\n\n## Conclusion\n\nThe Claude Code Router demonstrates a sophisticated approach to LLM API conversion through its agent-based architecture. While it doesn't use static transformation tables, the patterns observed provide valuable insights for building similar systems. The key takeaways are:\n\n1. **Dynamic Processing**: Handle conversions at runtime rather than static mappings\n2. **Stream Processing**: Real-time transformation of streaming responses\n3. **Agent Architecture**: Specialized agents for specific types of requests\n4. **Configuration-Driven**: Flexible configuration system for routing and transformation\n5. **Extensibility**: Design for adding new providers and features\n\nThese transformation tables serve as a reference for understanding the patterns and mappings needed for LLM API conversion, which can be adapted for other systems and use cases.",
    "sharedmodule/llmswitch-core": "# @routecodex/llmswitch-core\n\nRouteCodex LLMSwitch 核心模块，提供 AI 服务提供商之间的协议转换和标准化功能。\n\n## 🧩 构建顺序（重要）\n\n当修改到 `sharedmodule/` 下的代码（本模块属于该目录）时，请严格遵循“先模块、后整包”的构建与安装顺序：\n\n- 先在本目录构建并产出 `dist/`：\n  - `npm --prefix sharedmodule/llmswitch-core run build`\n- 再回到仓库根目录进行构建/发布/安装：\n  - `npm run build`（或项目既定脚本）\n\n该顺序可避免根包引用到旧版本构建产物，已在仓库根 `AGENTS.md` 明确。\n\n## 🏗️ 架构概览\n\n本模块采用分层架构设计：\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    Conversion Layer                        │\n│  ┌─────────────┬──────────────┬──────────────────────────┐  │\n│  │   Codecs    │   Streaming  │      Responses          │  │\n│  │  ┌─────────┐│ ┌───────────┐│ ┌─────────────────────┐  │  │\n│  │  │OpenAI   ││ │SSE        ││ │OpenAI↔Chat Bridge   │  │  │\n│  │  │Anthropic││ │Coalescing ││ │Tool Call Conversion │  │  │\n│  │  └─────────┘│ └───────────┘│ └─────────────────────┘  │  │\n│  └─────────────┴──────────────┴──────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n                           │\n┌─────────────────────────────────────────────────────────────┐\n│                    Switch Orchestrator                     │\n│                    统一转换调度中心                         │\n└─────────────────────────────────────────────────────────────┘\n                           │\n┌─────────────────────────────────────────────────────────────┐\n│                    Provider Adapters                       │\n│  ┌─────────────┬──────────────┬──────────────────────────┐  │\n│  │   OpenAI    │  Anthropic   │      Responses          │  │\n│  │  ┌─────────┐│ ┌───────────┐│ ┌─────────────────────┐  │  │\n│  │  │Normalizer ││ │Converter  ││ │Passthrough Handler│  │  │\n│  │  └─────────┘│ └───────────┘│ └─────────────────────┘  │  │\n│  └─────────────┴──────────────┴──────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n```\n\n## 📦 核心功能\n\n### 1. 协议转换编解码器 (Codecs)\n- **OpenAI↔OpenAI**: OpenAI Chat 规范化\n- **Anthropic↔OpenAI**: Anthropic Messages 与 OpenAI Chat 双向转换\n- **Responses↔OpenAI**: OpenAI Responses API 与 Chat API 转换\n\n### 2. 流式处理\n- **SSE 事件聚合**: 智能合并流式响应事件\n- **消息缓冲**: 优化流式传输性能\n\n### 3. 工具调用标准化\n- **统一工具格式**: 标准化不同提供商的工具调用格式\n- **参数验证**: JSON Schema 验证和修复\n- **MCP 集成**: Model Context Protocol 支持\n - **OpenAI 形状一致性**: 当且仅当某一轮为 `role:'assistant'` 且包含 `tool_calls`，并且该轮 `content` 是空/空白字符串时，将其规范化为 `null`（避免上游严格校验导致的 500）；已有非空文本不改动。\n\n## 🚀 快速开始\n\n### 基础导入\n\n```typescript\n// 转换核心功能\nimport { normalizeChatRequest } from 'rcc-llmswitch-core/conversion';\n\n// 特定编解码器\nimport { OpenAIOpenAIConversionCodec } from 'rcc-llmswitch-core/conversion/codecs/openai-openai-codec';\nimport { AnthropicOpenAIConversionCodec } from 'rcc-llmswitch-core/conversion/codecs/anthropic-openai-codec';\n\n// 路由和协调器\nimport { SwitchOrchestrator } from 'rcc-llmswitch-core/conversion/switch-orchestrator';\n```\n\n### 使用示例\n\n```typescript\n// OpenAI 请求规范化（响应侧按原样返回，避免重复归一）\nconst normalizedRequest = normalizeChatRequest(openaiRequest);\n\n// Anthropic↔OpenAI 转换\nconst converter = new AnthropicOpenAIConversionCodec();\nconst openaiFormat = converter.encode(anthropicMessage);\nconst anthropicFormat = converter.decode(openaiChat);\n```\n\n## 📋 模块导出\n\n| 导出路径 | 功能描述 |\n|---------|---------|\n| `rcc-llmswitch-core` | 主模块入口 |\n| `rcc-llmswitch-core/conversion` | 转换核心功能 |\n| `rcc-llmswitch-core/conversion/switch-orchestrator` | 转换协调器 |\n| `rcc-llmswitch-core/llmswitch/llmswitch-conversion-router` | 转换路由器 |\n| `rcc-llmswitch-core/llmswitch/openai-normalizer` | OpenAI 规范化器 |\n| `rcc-llmswitch-core/llmswitch/anthropic-openai-converter` | Anthropic↔OpenAI 转换器 |\n| `rcc-llmswitch-core/guidance` | 工具指导功能 |\n\n## 🔧 技术规范\n\n### 数据格式约定\n\n1. **工具调用格式**\n   ```typescript\n   assistant.tool_calls[].function.arguments // 必须为 JSON 字符串\n   ```\n   - 对象会被自动 JSON.stringify\n   - 工具定义采用 OpenAI function 形状\n\n2. **工具定义结构**\n   ```typescript\n   {\n     type: 'function',\n     function: {\n       name: string,\n       description?: string,\n       parameters: JSONSchema\n     }\n   }\n   ```\n\n3. **名称规范化**\n   - 仅允许字符：`[a-zA-Z0-9_-]`\n   - 最大长度：64 字符\n  \n4. **assistant.tool_calls 回合的 content 约定（重要）**\n   - 当存在 `tool_calls` 时，`content` 应为 `null`。若为空/空白字符串，llmswitch-core 会在 OpenAI 编码阶段自动置 `null`；若已有明确文本或结构化内容，则保持不变。\n\n### 环境变量配置\n\n| 变量名 | 描述 | 默认值 |\n|-------|------|--------|\n| `RCC_ALLOWED_TOOLS` | 额外允许的函数工具（逗号分隔） | - |\n| `RCC_TOOL_LIMIT` | 工具最大保留数量 | `32` |\n| `ROUTECODEX_MCP_ENABLE` | 启用 MCP 集成 | `'1'` |\n| `RCC_SYSTEM_TOOL_GUIDANCE` | 启用系统工具指导 | `'1'` |\n| `ROUTECODEX_TOOL_OUTPUT_LIMIT` | 工具输出长度限制 | `1000` |\n| `RCC_O2A_COALESCE_MS` | OpenAI→Anthropic 聚合窗口 | `1000ms` |\n| `RCC_R2C_COALESCE_MS` | Responses→Chat 聚合窗口 | `1000ms` |\n\n## 🏗️ 项目结构\n\n```\nsrc/\n├── conversion/           # 转换核心\n│   ├── codecs/          # 协议编解码器\n│   ├── responses/       # Responses API 处理\n│   ├── shared/          # 共享工具函数\n│   ├── streaming/       # 流式处理\n│   ├── codec-registry.ts    # 编解码器注册表\n│   ├── switch-orchestrator.ts # 转换协调器\n│   └── types.ts         # 类型定义\n├── llmswitch/           # LLMSwitch 实现\n│   ├── anthropic-openai-converter.ts\n│   ├── llmswitch-conversion-router.ts\n│   ├── llmswitch-response-chat.ts\n│   ├── llmswitch-responses-passthrough.ts\n│   └── openai-normalizer.ts\n├── types/               # TypeScript 类型定义\n└── guidance/            # 工具指导功能\n```\n\n## ⚠️ 已知问题\n\n### 代码重复\n- `splitCommandString()` 函数在多个文件中重复实现\n- `normalizeTools()` 函数重复实现\n- 工具输出清理逻辑分散在多个文件\n\n### 硬编码问题\n- 环境变量默认值分散在各文件\n- 文件路径和魔法数字缺乏统一管理\n- MCP 工具列表硬编码在多处\n\n### 架构改进计划\n1. **工具标准化核心**: 创建统一的 `ToolNormalizer` 类\n2. **配置管理中心**: 集中管理环境变量和常量\n3. **MCP 管理器**: 统一 MCP 服务器发现和工具注入\n4. **输出清理器**: 统一工具输出处理和截断逻辑\n\n## 🔗 相关文档\n\n- [架构设计文档](../../docs/ARCHITECTURE.md)\n- [流水线架构](../../docs/pipeline/ARCHITECTURE.md)\n- [LM Studio 集成指南](../../docs/lmstudio-tool-calling.md)\n\n## 📄 许可证\n\nMIT License - 详见项目根目录 LICENSE 文件\n",
    "sharedmodule/config-engine": "# routecodex-config-engine\n\nRouteCodex 配置引擎（共享模块）。提供配置解析、校验、环境变量展开、敏感信息脱敏，以及统一的配置路径解析工具。\n\n## 功能概览\n- 配置解析与校验（Zod/Ajv 形状，版本管理与兼容性检查）\n- 环境变量展开与安全脱敏（支持 `***REDACTED***` 输出）\n- 统一配置路径解析（家目录与工作区路径兼容）\n- JSON Pointer 工具与错误定位（`utils/json-pointer.ts`）\n\n## 主要导出\n- `ConfigParser`（`src/core/config-parser.ts`）\n- `createConfigParser()`（`src/index.ts`）\n- `SharedModuleConfigResolver`（统一配置路径，`src/utils/shared-config-paths.ts`）\n- `sanitizeObject/sanitizeError`（敏感信息脱敏，`src/utils/secret-sanitization.ts`）\n\n## 用法示例\n```ts\nimport { createConfigParser } from 'routecodex-config-engine';\n\nconst parser = createConfigParser('~/.routecodex/config');\nconst { config, errors, warnings } = await parser.loadAndValidate();\n```\n\n## 构建顺序（重要）\n本模块位于 `sharedmodule/` 下，修改后请先在本模块目录构建，再构建根包：\n- `npm --prefix sharedmodule/config-engine run build`（如配置有 build 脚本）\n- 然后在根目录执行 `npm run build`\n\n> 参见仓库根 `AGENTS.md`：先模块、后整包。\n\n",
    "sharedmodule/config-testkit": "# routecodex-config-testkit\n\n用于配置引擎/兼容层的测试与样例集锦（共享模块）。包含黑盒/白盒测试脚本与样例快照，方便离线验证配置。\n\n## 内容\n- `debug-*.js`：各类调试脚本（环境变量展开、校验、排序等）\n- `test/` 与 `test-snapshots/`：快照与期望输出\n\n## 使用\n```bash\nnode sharedmodule/config-testkit/debug-validation.js\nnode sharedmodule/config-testkit/debug-blackbox-tester.js\n```\n\n## 构建顺序（提示）\n本目录多为脚本与样例，无需构建。但若依赖 `config-engine` 或 `config-compat` 的产物，请先构建对应共享模块，再在根目录构建：\n- 先模块：`npm --prefix sharedmodule/config-engine run build`\n- 后整包：`npm run build`\n\n",
    "sharedmodule/config-compat": "# routecodex-config-compat\n\nRouteCodex 配置兼容层（共享模块）。为历史/外部配置提供规范化、导出与兼容支持，便于与流水线组装器对接。\n\n## 功能概览\n- 兼容性处理引擎：`CompatibilityEngine`\n- 配置导出器：`buildPipelineAssemblerConfig()`\n- 预置选项：`DEFAULT_COMPATIBILITY_OPTIONS`、`LEGACY_COMPATIBILITY_OPTIONS`、`STRICT_COMPATIBILITY_OPTIONS`\n- 常用处理：环境变量展开、有序稳定输出（stable sort）等\n\n## 主要导出\n- `createCompatibilityEngine(options?)`\n- `processConfigWithDefaults(configString)`、`processConfigFile(configName?)`\n- `buildPipelineAssemblerConfig(compatConfig)`（导出给流水线装配器）\n\n## 用法示例\n```ts\nimport { createCompatibilityEngine, buildPipelineAssemblerConfig } from 'routecodex-config-compat';\n\nconst compat = createCompatibilityEngine();\nconst result = await compat.processConfigFile();\nconst assembler = buildPipelineAssemblerConfig(result.config);\n```\n\n## 构建顺序（重要）\n本模块位于 `sharedmodule/` 下，修改后请先在本模块目录构建，再构建根包：\n- `npm --prefix sharedmodule/config-compat run build`（如配置有 build 脚本）\n- 然后在根目录执行 `npm run build`\n\n> 参见仓库根 `AGENTS.md`：先模块、后整包。\n\n",
    "sharedmodule/llmswitch-ajv": "# LLMSwitch AJV Module\n\n基于 AJV (Another JSON Schema Validator) 的 LLMSwitch 模块，用于 OpenAI <> Anthropic 协议转换。\n\n## 🚀 概述\n\n这个模块提供了一个基于标准 JSON Schema 的协议转换实现，作为现有 LLMSwitch 的现代化替代方案。通过使用 AJV，我们实现了：\n\n- ✅ **严格的 Schema 验证** - 基于 JSON Schema Draft 7 标准\n- ✅ **高性能转换** - 编译时 Schema 缓存，毫秒级验证\n- ✅ **完整的错误处理** - 详细的验证错误和调试信息\n- ✅ **黑盒测试验证** - 基于真实 codex 样本数据的完整测试覆盖\n- ✅ **生产就绪** - 经过 20+ 真实样本测试验证\n\n## 📋 特性\n\n- 🔍 **智能格式检测** - 自动识别请求/响应格式，不依赖文件名\n- 🛡️ **完整的协议支持** - 支持 OpenAI 和 Anthropic 的完整 API 规范\n- 🔄 **双向转换** - OpenAI ⇄ Anthropic 请求和响应的无缝转换\n- 📊 **性能监控** - 内置转换时间和验证性能指标\n- 🧪 **黑盒测试** - 使用真实捕获数据进行兼容性验证\n- 🎯 **零引用错误** - 完全解决 Schema 引用和依赖问题\n\n## 核心数据结构\n\n### 1. 请求/响应 DTO\n\n```typescript\ninterface LLMSwitchRequest {\n  data: Record<string, unknown>;\n  route: {\n    providerId: string;\n    modelId: string;\n    requestId: string;\n    timestamp: number;\n  };\n  metadata: Record<string, unknown>;\n  debug: {\n    enabled: boolean;\n    stages: Record<string, unknown>;\n  };\n}\n\ninterface LLMSwitchResponse {\n  data: Record<string, unknown>;\n  metadata: Record<string, unknown>;\n  usage?: Record<string, number>;\n}\n```\n\n### 2. 转换配置\n\n```typescript\ninterface ConversionConfig {\n  enableStreaming: boolean;\n  enableTools: boolean;\n  strictMode: boolean;\n  fallbackToOriginal: boolean;\n  customSchemas: Record<string, any>;\n}\n```\n\n### 3. 验证结果\n\n```typescript\ninterface ValidationResult {\n  valid: boolean;\n  data?: any;\n  errors?: Array<{\n    instancePath: string;\n    schemaPath: string;\n    keyword: string;\n    params: Record<string, any>;\n    message?: string;\n  }>;\n}\n```\n\n## Schema 定义\n\n### OpenAI Schemas\n\n```typescript\n// OpenAI ChatCompletion Request\nconst openAIChatRequestSchema = {\n  type: 'object',\n  required: ['messages'],\n  properties: {\n    model: { type: 'string' },\n    messages: {\n      type: 'array',\n      items: { $ref: '#/$defs/openAIMessage' }\n    },\n    temperature: { type: 'number', minimum: 0, maximum: 2 },\n    max_tokens: { type: 'integer', minimum: 1 },\n    tools: {\n      type: 'array',\n      items: { $ref: '#/$defs/openAITool' }\n    },\n    tool_choice: {\n      oneOf: [\n        { type: 'string', enum: ['none', 'auto'] },\n        { type: 'object', properties: { type: { const: 'function' }, function: { $ref: '#/$defs/functionChoice' } } }\n      ]\n    },\n    stream: { type: 'boolean' }\n  },\n  $defs: {\n    openAIMessage: {\n      type: 'object',\n      required: ['role', 'content'],\n      properties: {\n        role: { type: 'string', enum: ['system', 'user', 'assistant', 'tool'] },\n        content: {\n          oneOf: [\n            { type: 'string' },\n            { type: 'array', items: { type: 'object' } }\n          ]\n        },\n        tool_calls: {\n          type: 'array',\n          items: { $ref: '#/$defs/toolCall' }\n        },\n        tool_call_id: { type: 'string' },\n        name: { type: 'string' }\n      }\n    },\n    openAITool: {\n      type: 'object',\n      required: ['type', 'function'],\n      properties: {\n        type: { const: 'function' },\n        function: {\n          type: 'object',\n          required: ['name', 'parameters'],\n          properties: {\n            name: { type: 'string' },\n            description: { type: 'string' },\n            parameters: { type: 'object' } // JSON Schema\n          }\n        }\n      }\n    },\n    toolCall: {\n      type: 'object',\n      required: ['id', 'type', 'function'],\n      properties: {\n        id: { type: 'string' },\n        type: { const: 'function' },\n        function: {\n          type: 'object',\n          required: ['name', 'arguments'],\n          properties: {\n            name: { type: 'string' },\n            arguments: { type: 'string' }\n          }\n        }\n      }\n    },\n    functionChoice: {\n      type: 'object',\n      required: ['name'],\n      properties: {\n        name: { type: 'string' }\n      }\n    }\n  }\n};\n```\n\n### Anthropic Schemas\n\n```typescript\n// Anthropic Messages API Request\nconst anthropicMessageRequestSchema = {\n  type: 'object',\n  required: ['messages', 'model'],\n  properties: {\n    model: { type: 'string' },\n    messages: {\n      type: 'array',\n      items: { $ref: '#/$defs/anthropicMessage' }\n    },\n    system: { type: 'string' },\n    max_tokens: { type: 'integer', minimum: 1 },\n    temperature: { type: 'number', minimum: 0, maximum: 1 },\n    tools: {\n      type: 'array',\n      items: { $ref: '#/$defs/anthropicTool' }\n    },\n    tool_choice: {\n      oneOf: [\n        { type: 'string', enum: ['auto', 'any', 'none'] },\n        { type: 'object', properties: { type: { const: 'tool' }, name: { type: 'string' } } }\n      ]\n    },\n    stream: { type: 'boolean' }\n  },\n  $defs: {\n    anthropicMessage: {\n      type: 'object',\n      required: ['role', 'content'],\n      properties: {\n        role: { type: 'string', enum: ['user', 'assistant'] },\n        content: {\n          oneOf: [\n            { type: 'string' },\n            {\n              type: 'array',\n              items: {\n                type: 'object',\n                required: ['type'],\n                oneOf: [\n                  {\n                    properties: {\n                      type: { const: 'text' },\n                      text: { type: 'string' }\n                    },\n                    required: ['type', 'text']\n                  },\n                  {\n                    properties: {\n                      type: { const: 'tool_use' },\n                      id: { type: 'string' },\n                      name: { type: 'string' },\n                      input: { type: 'object' }\n                    },\n                    required: ['type', 'id', 'name', 'input']\n                  },\n                  {\n                    properties: {\n                      type: { const: 'tool_result' },\n                      tool_use_id: { type: 'string' },\n                      content: { type: 'string' },\n                      is_error: { type: 'boolean' }\n                    },\n                    required: ['type', 'tool_use_id']\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    },\n    anthropicTool: {\n      type: 'object',\n      required: ['name', 'description', 'input_schema'],\n      properties: {\n        name: { type: 'string' },\n        description: { type: 'string' },\n        input_schema: { type: 'object' } // JSON Schema\n      }\n    }\n  }\n};\n```\n\n## 🏗️ 实施计划\n\n### ✅ Phase 1: 核心架构 (100% 完成)\n- [x] 创建模块结构\n- [x] 定义核心数据结构\n- [x] 实现 AJV Schema Mapper\n- [x] 实现基础转换逻辑\n\n### ✅ Phase 2: 协议转换实现 (100% 完成)\n- [x] OpenAI → Anthropic 请求转换\n- [x] Anthropic → OpenAI 请求转换\n- [x] OpenAI → Anthropic 响应转换\n- [x] Anthropic → OpenAI 响应转换\n\n### ✅ Phase 3: 测试框架 (100% 完成)\n- [x] 黑盒测试套件\n- [x] 性能对比测试\n- [x] 错误场景测试\n- [x] 兼容性验证\n\n### ✅ Phase 4: 集成和迁移 (100% 完成)\n- [x] 创建代理适配器\n- [x] 配置开关实现\n- [x] 并行测试运行\n- [x] Schema 引用错误修复\n\n### ✅ Phase 5: 优化和文档 (100% 完成)\n- [x] 性能优化\n- [x] 错误处理改进\n- [x] 文档完善\n- [x] GitHub 推送准备\n\n## 📊 性能指标\n\n### 🎯 目标性能\n- **Schema 编译时间**: < 10ms (缓存命中时)\n- **验证时间**: < 1ms per request\n- **内存占用**: < 50MB for schema cache\n- **转换准确率**: > 99.9%\n\n### 📈 实际测试结果\n基于 20+ 真实 codex 样本的测试结果：\n\n- ✅ **Schema 引用错误**: 0 个 (完全解决)\n- ✅ **格式检测准确率**: 100% (智能内容检测)\n- ✅ **OpenAI 请求验证**: 通过所有样本\n- ⚡ **平均验证时间**: ~0.23ms\n- 🎯 **转换引擎状态**: 功能完整\n\n### 🔍 监控指标\n- 验证成功率\n- 平均转换时间\n- 错误类型分布\n- Schema 命中率\n\n## 使用示例\n\n```typescript\nimport { LLMSwitchAjvAdapter } from '@routecodex/llmswitch-ajv';\n\nconst adapter = new LLMSwitchAjvAdapter({\n  enableStreaming: true,\n  enableTools: true,\n  strictMode: false,\n  fallbackToOriginal: true\n});\n\n// OpenAI -> Anthropic 转换\nconst anthropicRequest = await adapter.processIncoming(openaiRequest);\n\n// Anthropic -> OpenAI 转换\nconst openaiResponse = await adapter.processOutgoing(anthropicResponse);\n```\n\n## 🚀 开发进度\n\n### ✅ 当前状态: 全部完成 (100%)\n- ✅ 模块初始化\n- ✅ 核心接口定义\n- ✅ Schema 结构设计\n- ✅ AJV Mapper 实现\n- ✅ OpenAI <> Anthropic 转换引擎\n- ✅ LLMSwitch 适配器实现\n- ✅ 黑盒测试框架\n- ✅ 完整测试套件\n- ✅ 性能监控和分析\n- ✅ Schema 引用错误修复\n- ✅ 文档完善\n- ✅ GitHub 推送准备\n\n### 🎯 关键成就\n1. **完全解决 Schema 引用错误** - 从 8 个错误减少到 0 个\n2. **实现智能格式检测** - 不依赖文件名，基于内容识别\n3. **完成真实数据验证** - 通过 20+ 实际 codex 样本测试\n4. **建立完整测试框架** - 黑盒测试 + 性能分析 + 错误追踪\n\n### 📋 后续优化机会\n1. 转换细节优化 (OpenAI → Anthropic 转换中的枚举值对齐)\n2. 更多真实场景测试覆盖\n3. 生产环境集成验证\n4. 性能基准测试和优化\n\n## 🏗️ 技术架构\n\n### 模块结构\n```\nsrc/\n├── types/           # TypeScript 类型定义\n├── schemas/         # JSON Schema 定义\n├── core/           # 核心实现\n│   ├── schema-mapper.ts      # AJV Schema 映射器\n│   ├── conversion-engine.ts  # 协议转换引擎\n│   ├── llmswitch-adapter.ts  # LLMSwitch 适配器\n│   └── test-adapter.ts       # 测试适配器\n├── test/           # 测试套件\n│   ├── codex-sample-test.ts   # Codex 样本测试\n│   └── run-codex-tests.mjs    # 测试执行脚本\n└── index.ts        # 模块入口\n```\n\n### 核心组件\n1. **AjvSchemaMapper** - Schema 验证和缓存管理\n2. **ConversionEngine** - OpenAI ↔ Anthropic 协议转换\n3. **LLMSwitchAjvAdapter** - LLMSwitch 模块接口实现\n4. **CodexSampleTestSuite** - 黑盒测试框架\n\n### 数据流\n```\nInput Request → Schema Validation → Protocol Conversion → Output\n     ↓                ↓                  ↓\n  JSON Schema       AJV Validate      Format Transform\n  Validation        Cache Hit         OpenAI↔Anthropic\n```\n\n## 🧪 测试结果\n\n### 黑盒测试覆盖\n- **测试样本**: 20+ 真实 codex 捕获数据\n- **测试类型**: OpenAI 请求格式验证\n- **Schema 引用错误**: 0 个 (完全修复)\n- **格式检测准确率**: 100%\n\n### 性能基准\n- **验证时间**: 平均 0.23ms\n- **内存使用**: 高效缓存机制\n- **错误处理**: 详细错误报告和堆栈追踪\n\n### 验证状态\n| 项目 | 状态 | 说明 |\n|------|------|------|\n| Schema 引用 | ✅ | 完全解决 `#/$defs/toolCall` 等引用错误 |\n| 格式检测 | ✅ | 智能内容检测，不依赖文件名 |\n| 数据验证 | ✅ | OpenAI 请求格式 100% 通过 |\n| 转换引擎 | ✅ | 双向转换逻辑完整实现 |\n\n## 🚀 快速开始\n\n### 安装\n```bash\nnpm install @routecodex/llmswitch-ajv\n```\n\n### 基础使用\n```typescript\nimport { LLMSwitchAjvAdapter } from '@routecodex/llmswitch-ajv';\n\n// 创建适配器\nconst adapter = new LLMSwitchAjvAdapter({\n  enableStreaming: true,\n  enableTools: true,\n  strictMode: false,\n  fallbackToOriginal: false\n});\n\n// 初始化\nawait adapter.initialize();\n\n// OpenAI → Anthropic 转换\nconst anthropicRequest = await adapter.processIncoming(openaiRequest);\n\n// Anthropic → OpenAI 转换\nconst openaiResponse = await adapter.processOutgoing(anthropicResponse);\n```\n\n### 运行测试\n```bash\n# 构建项目\nnpm run build\n\n# 运行黑盒测试\nnode dist/test/run-codex-tests.mjs\n\n# 性能基准测试\nnode debug-schema.mjs\n```\n\n## 贡献指南\n\n1. 所有新功能必须有对应的 Schema 定义\n2. 确保向后兼容性\n3. 通过所有黑盒测试\n4. 性能不低于基准实现\n5. 提供详细的错误信息\n\n## 📄 许可证\n\nMIT License",
    "verified-configs": "# RouteCodex 验证配置集合\n\n本目录包含经过端到端测试验证的 RouteCodex 配置文件，按版本组织。\n\n## 版本历史\n\n### v0.45.0 (当前版本)\n**验证日期**: 2025-10-13T01:56:00Z\n**验证状态**: ✅ 通过 - LM Studio + Qwen Provider 集成验证成功\n\n#### 配置文件\n- `lmstudio-5521-gpt-oss-20b-mlx.json` - LM Studio 用户配置 (端口 5521)\n- `merged-config.5521.json` - 系统合并后的完整配置\n- `qwen-5522-qwen3-coder-plus.json` - Qwen 用户配置 (端口 5522)\n- `merged-config.qwen-5522.json` - Qwen 系统合并配置\n- `README.md` - 详细验证报告\n\n#### 验证环境\n- **分支**: feat/new-feature\n- **模型**: gpt-oss-20b-mlx\n- **LM Studio**: localhost:1234\n- **协议支持**: OpenAI + Anthropic\n\n#### 使用方法\n```bash\n# 启动 LM Studio 配置 (端口 5521)\nnpx ts-node src/cli.ts start --config ~/.routecodex/config/lmstudio-5521-gpt-oss-20b-mlx.json --port 5521\n\n# 启动 Qwen Provider 配置 (端口 5522)\nnpx ts-node src/cli.ts start --config ~/.routecodex/config/qwen-5522-qwen3-coder-plus.json --port 5522\n```\n\n## 目录结构\n```\nverified-configs/\n├── README.md                 # 本文件\n└── v0.45.0/                 # 版本化配置目录\n    ├── lmstudio-5521-gpt-oss-20b-mlx.json\n    ├── merged-config.5521.json\n    └── README.md             # 详细验证报告\n```\n\n## 验证标准\n\n每个版本的配置都必须通过以下验证：\n\n1. **✅ 配置加载系统** - 用户配置正确加载\n2. **✅ 4层管道架构** - LLM Switch, Compatibility, Provider, AI Service\n3. **✅ 动态路由分类** - 9种路由类别配置正确\n4. **✅ 服务集成** - 目标服务连接测试通过\n5. **✅ 协议支持** - OpenAI 和 Anthropic 协议端点\n6. **✅ 功能测试** - 基本请求/响应流程验证\n\n## 版本管理策略\n\n- **主版本** (Major): 重大架构变更，配置可能不兼容\n- **次版本** (Minor): 新功能添加，保持向后兼容\n- **修订版本** (Patch): Bug修复，配置格式不变\n\n每个验证过的配置都绑定到特定的 RouteCodex 版本，确保兼容性。",
    "verified-configs/v0.45.0": "# RouteCodex 配置验证报告 v0.45.0\n\n## 验证时间\n2025-10-13T02:12:00Z\n\n## 验证状态\n✅ **通过** - LM Studio + Qwen Provider 在 RouteCodex 系统中工作正常\n\n## 验证环境\n- **分支**: feat-new-feature\n- **端口**: 5521\n- **模型**: gpt-oss-20b-mlx\n- **LM Studio 服务**: localhost:1234\n\n## 验证项目\n\n### ✅ 配置加载系统\n- [x] 用户配置文件正确加载\n- [x] 端口配置生效 (5521)\n- [x] CLI 配置传递机制正常\n\n### ✅ 4层管道架构\n- [x] LLM Switch: 动态路由分类\n- [x] Compatibility: 格式转换\n- [x] Provider: HTTP 通信\n- [x] AI Service: 本地 LM Studio 集成\n\n### ✅ 动态路由分类\n支持的7种路由类别全部配置正确：\n- [x] default\n- [x] longcontext\n- [x] thinking\n- [x] coding\n- [x] tools\n- [x] vision\n- [x] websearch\n- [x] background\n- [x] anthropic\n\n### ✅ LM Studio 集成\n- [x] baseURL: http://localhost:1234\n- [x] 认证配置正确\n- [x] 模型配置: gpt-oss-20b-mlx\n- [x] 流式支持已启用\n- [x] 工具调用支持已启用\n\n## 配置文件\n\n### 1. 用户配置文件\n`~/.routecodex/config/lmstudio-5521-gpt-oss-20b-mlx.json`\n- 端口: 5521\n- 主机: 0.0.0.0\n- 虚拟路由器配置正确\n- 流水线配置完整\n\n### 2. 系统合并配置\n`config/merged-config.5521.json`\n- 动态路由映射正确\n- 认证映射完整\n- 管道配置有效\n\n## Qwen Provider 验证报告\n\n### 验证时间\n2025-10-13T01:56:00Z\n\n### 验证状态\n✅ **通过** - Qwen Provider 在 RouteCodex 系统中配置正确\n\n### 验证环境\n- **分支**: feat-new-feature\n- **端口**: 5522\n- **模型**: qwen3-coder-plus\n- **Qwen 服务**: https://portal.qwen.ai/v1\n\n### ✅ Qwen Provider 集成验证\n- [x] 配置文件格式正确 (type: qwen)\n- [x] OAuth 认证配置完整\n- [x] 模型配置: qwen3-coder-plus, qwen3-4b-thinking-2507-mlx\n- [x] 流式支持已启用\n- [x] 工具调用支持已启用\n- [x] 动态路由分类工作正常\n- [x] 4层管道架构组装成功\n\n### 配置文件\n#### 3. Qwen 用户配置文件\n`~/.routecodex/config/qwen-5522-qwen3-coder-plus.json`\n- 端口: 5522\n- OAuth 认证配置\n- 4个模型配置完整\n\n#### 4. Qwen 系统合并配置\n`config/merged-config.qwen-5522.json`\n- OAuth 认证映射正确\n- 管线配置完整\n- 路由目标映射有效\n\n## 使用方法\n\n### 启动命令\n\n#### LM Studio 配置\n```bash\nnpx ts-node src/cli.ts start --config ~/.routecodex/config/lmstudio-5521-gpt-oss-20b-mlx.json --port 5521\n```\n\n#### Qwen Provider 配置\n```bash\nnpx ts-node src/cli.ts start --config ~/.routecodex/config/qwen-5522-qwen3-coder-plus.json --port 5522\n```\n\n### 测试端点\n```bash\n# OpenAI 协议\ncurl -X POST http://localhost:5521/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer test-key\" \\\n  -d '{\n    \"model\": \"gpt-oss-20b-mlx\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n    \"max_tokens\": 50\n  }'\n\n# Anthropic 协议\ncurl -X POST http://localhost:5521/v1/messages \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer test-key\" \\\n  -d '{\n    \"model\": \"gpt-oss-20b-mlx\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n    \"max_tokens\": 50\n  }'\n\n# Qwen Provider 测试 (端口 5522)\ncurl -X POST http://localhost:5522/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer test-key\" \\\n  -d '{\n    \"model\": \"qwen3-coder-plus\",\n    \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}],\n    \"max_tokens\": 50\n  }'\n```\n\n## 注意事项\n\n1. **前置条件**:\n   - LM Studio 需要在 localhost:1234 运行\n   - Qwen 需要 OAuth 认证配置\n2. **模型要求**:\n   - gpt-oss-20b-mlx 模型需要在 LM Studio 中加载\n   - Qwen 模型需要有效的 OAuth token\n3. **配置文件**: 使用验证过的配置文件确保最佳兼容性\n4. **端口分配**: LM Studio 使用 5521，Qwen 使用 5522\n\n## 设计验证结论\n\nRouteCodex 的 4 层管道架构设计完全正确：\n\n✅ **LM Studio 本地 LLM 服务集成验证成功**\n- 配置加载正常\n- 管道组装成功\n- 双协议支持 (OpenAI + Anthropic)\n- 端到端请求处理流畅\n\n✅ **Qwen Provider 云端服务集成验证成功**\n- OAuth 认证配置正确\n- 动态路由分类工作正常\n- 管线映射完整\n- 多模型支持验证通过\n\n配置驱动的系统架构展现了良好的灵活性和可靠性，支持本地和云端 AI 服务的统一接入。\n## Qwen Provider 验证报告\n\n### 验证时间\n2025-10-13T02:12:00Z\n\n### 验证状态\n✅ **通过** - Qwen Provider 在 RouteCodex 系统中配置正确\n\n### 验证环境\n- **分支**: feat-new-feature\n- **端口**: 5522\n- **模型**: qwen3-coder-plus, qwen3-4b-thinking-2507-mlx\n- **Qwen 服务**: https://portal.qwen.ai/v1\n\n### ✅ Qwen Provider 集成验证\n- [x] 配置文件格式正确 (type: qwen)\n- [x] OAuth 认证配置完整\n- [x] 模块注册成功 (qwen-provider + qwen别名)\n- [x] 模块验证逻辑修复 (接受'qwen'类型)\n- [x] 模型配置: qwen3-coder-plus, qwen3-4b-thinking-2507-mlx\n- [x] 流式支持已启用\n- [x] 工具调用支持已启用\n- [x] 动态路由分类工作正常\n- [x] 4层管道架构组装成功\n- [x] 真机API测试触发OAuth认证流程\n\n### 配置文件\n#### 3. Qwen 用户配置文件\n`~/.routecodex/config/qwen-5522-qwen3-coder-plus.json`\n- 端口: 5522\n- OAuth 认证配置\n- 4个模型配置完整\n\n#### 4. Qwen 系统合并配置\n`config/merged-config.qwen-5522.json`\n- OAuth 认证映射正确\n- 管线配置完整\n- 路由目标映射有效\n\n### 真机测试结果\n```bash\n# API测试成功触发OAuth流程\ncurl -X POST http://localhost:5522/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer test-key\" \\\n  -d '{\"model\": \"qwen3-coder-plus\", \"messages\": [{\"role\": \"user\", \"content\": \"Hello\"}], \"max_tokens\": 50}'\n\n# 系统响应：启动OAuth设备授权流程\nStarting OAuth device flow...\nPlease visit the following URL to authenticate:\nhttps://chat.qwen.ai/authorize?user_code=MEWI63RM&client=qwen-code\nWaiting for authentication...\n```\n\n## 最终设计验证结论\n\nRouteCodex 的 4 层管道架构设计完全正确：\n\n✅ **LM Studio 本地 LLM 服务集成验证成功**\n- 配置加载正常\n- 管道组装成功\n- 双协议支持 (OpenAI + Anthropic)\n- 端到端请求处理流畅\n\n✅ **Qwen Provider 云端服务集成验证成功**\n- OAuth 认证配置正确\n- 动态路由分类工作正常\n- 管线映射完整\n- 多模型支持验证通过\n- 真机API测试成功触发认证流程\n\n配置驱动的系统架构展现了良好的灵活性和可靠性，支持本地和云端 AI 服务的统一接入。\n",
    "scripts": "# RouteCodex 构建和安装脚本\n\n本目录包含用于自动构建和安装 RouteCodex 的脚本。\n\n## 脚本列表\n\n### 1. build-and-install.sh (Linux/macOS)\n完整的构建和安装脚本，包含所有功能。\n\n**使用方法：**\n```bash\n# 完整构建和安装（运行测试）\n./scripts/build-and-install.sh\n\n# 跳过测试的构建和安装\n./scripts/build-and-install.sh --skip-tests\n\n# 显示帮助信息\n./scripts/build-and-install.sh --help\n\n# 详细输出\n./scripts/build-and-install.sh --verbose\n```\n\n**功能特点：**\n- 自动检查前置条件（Node.js, npm）\n- 清理旧的构建文件\n- 可选择是否运行测试\n- 自动构建 TypeScript 项目\n- 创建 npm 包\n- 卸载旧版本\n- 安装新版本\n- 验证安装结果\n- 清理临时文件\n\n### 2. build-and-install.bat (Windows)\nWindows 版本的构建和安装脚本。\n\n**使用方法：**\n```cmd\n# 完整构建和安装\nscripts\\build-and-install.bat\n\n# 跳过测试\nscripts\\build-and-install.bat --skip-tests\n\n# 显示帮助\nscripts\\build-and-install.bat --help\n```\n\n### 3. quick-install.sh (Linux/macOS)\n快速安装脚本，简化版本。\n\n**使用方法：**\n```bash\n# 一键快速安装\n./scripts/quick-install.sh\n```\n\n**功能特点：**\n- 自动跳过测试以加快安装速度\n- 简化的输出信息\n- 适合快速部署和开发环境\n\n## npm 脚本\n\n项目根目录提供了以下 npm 脚本：\n\n```bash\n# 完整构建和安装（推荐）\nnpm run install:global\n\n# 快速安装（跳过测试）\nnpm run install:quick\n\n# 跳过测试的安装\nnpm run install:skip-tests\n```\n\n## 安装流程\n\n所有脚本都遵循以下安装流程：\n\n1. **前置条件检查** - 确保 Node.js 和 npm 已安装\n2. **清理旧文件** - 删除旧的构建产物和包文件\n3. **运行测试** - 可选，验证代码质量\n4. **构建项目** - 编译 TypeScript 代码\n5. **创建包** - 生成 npm tarball 文件\n6. **卸载旧版本** - 移除已安装的全局包\n7. **安装新版本** - 全局安装最新版本\n8. **验证安装** - 确认安装成功并测试基本功能\n9. **清理临时文件** - 删除构建过程中产生的临时文件\n\n## 故障排除\n\n### 常见问题\n\n1. **权限错误**\n   ```bash\n   # Linux/macOS: 使用 sudo\n   sudo ./scripts/build-and-install.sh\n\n   # Windows: 以管理员身份运行命令提示符\n   ```\n\n2. **Node.js 版本问题**\n   - 确保 Node.js 版本 >= 16.0.0\n   - 使用 nvm 管理 Node.js 版本\n\n3. **npm 权限问题**\n   ```bash\n   # 配置 npm 前缀\n   npm config set prefix ~/.npm-global\n   # 将路径添加到环境变量\n   export PATH=~/.npm-global/bin:$PATH\n   ```\n\n4. **构建失败**\n   - 检查 TypeScript 编译错误\n   - 确保所有依赖已安装\n   - 使用 `npm run install:skip-tests` 跳过测试\n\n5. **安装验证失败**\n   - 确保 npm 全局安装目录在 PATH 中\n   - 重启终端或重新加载环境变量\n\n## 手动安装\n\n如果自动脚本失败，可以手动执行以下步骤：\n\n```bash\n# 1. 构建项目\nnpm run build\n\n# 2. 创建包\nnpm pack\n\n# 3. 卸载旧版本\nnpm uninstall -g routecodex\n\n# 4. 安装新版本\nnpm install -g routecodex-*.tgz\n\n# 5. 验证安装\nroutecodex --version\n```\n\n## 更新和维护\n\n要更新 RouteCodex 到最新版本：\n\n```bash\n# 拉取最新代码\ngit pull origin main\n\n# 重新构建和安装\nnpm run install:global\n```\n\n## 贡献\n\n如果您发现脚本有问题或有改进建议，请：\n\n1. 检查现有脚本的功能\n2. 测试您的更改\n3. 提交 Pull Request\n4. 更新相关文档",
    "package": "# Qoder CLI\n\n[![npm package](https://img.shields.io/npm/v/@qoder-ai/qodercli.svg?style=flat-square)](https://www.npmjs.com/package/@qoder-ai/qodercli)\n\nQoder CLI is a powerful terminal-based AI assistant that understands your codebase and helps you code faster by executing routine tasks, explaining complex code, and handling development workflows -- all through natural language commands.\n\n## Get started\n\nInstall Qoder CLI using your preferred method:\n\n### Curl + Bash\n```sh\ncurl -fsSL https://qoder.com/install | bash\n```\n\n### Homebrew (macOS & Linux)\n```sh\nbrew install --cask QoderAI/qoder/qodercli\n```\n\n### NPM\n```sh\nnpm install -g @qoder-ai/qodercli\n```\n\n## Usage\n\n1. Navigate to your project directory\n2. Run `qodercli` to start the interactive mode\n3. Or run single commands: `qodercli -p \"your prompt here\"`\n\n## Reporting Bugs\n\nWe welcome feedback. Use the `/feedback` command to report issues directly within Qoder CLI.\n\n## Data collection, usage, and retention\n\nplease review our Commercial Terms of Service at https://qoder.com/product-service.\n\n## Support\n\nFor support and documentation, visit [https://qoder.com](https://qoder.com)\n",
    "src": "# RouteCodex 源代码目录\n\n## 概述\n\nRouteCodex 是一个多提供商的 OpenAI 代理服务器，具有原生试运行能力。该项目的核心功能是将不同 AI 服务提供商的协议转换为统一的 OpenAI 兼容接口。\n\n## 目录结构\n\n```\nsrc/\n├── commands/          # CLI 命令实现\n├── config/            # 配置管理和验证\n├── core/              # 核心组件和系统架构\n├── debug/             # 调试和诊断工具\n├── logging/           # 日志系统\n├── modules/           # 功能模块（流水线系统）\n├── patches/           # 兼容性补丁\n├── providers/         # AI 服务提供商适配器\n├── server/            # HTTP 服务器和 API 路由\n├── types/             # TypeScript 类型定义\n└── utils/             # 工具函数和辅助类\n```\n\n## 核心架构\n\nRouteCodex 采用 4 层管道架构：\n\n1. **LLM Switch** - 动态路由分类\n2. **Workflow** - 流程控制\n3. **Compatibility** - 格式转换和适配\n4. **Provider** - AI 服务提供商通信\n\n## 主要功能\n\n- **多提供商支持**: LM Studio、Qwen、iFlow、OpenAI、Anthropic 等\n- **工具调用**: 支持 AI 模型的工具调用功能\n- **流式响应**: 实时流式 AI 响应\n- **动态路由**: 根据请求内容智能选择处理路径\n- **配置驱动**: JSON 配置文件定义系统行为\n- **调试支持**: 完整的请求追踪和调试系统\n\n## 开发指南\n\n### 快速开始\n\n```bash\n# 安装依赖\nnpm install\n\n# 构建项目\nnpm run build\n\n# 开发模式\nnpm run dev\n\n# 运行测试\nnpm test\n```\n\n### 代码结构\n\n- **commands/**: CLI 命令行工具\n- **config/**: 配置文件管理和验证\n- **core/**: 系统核心组件\n- **modules/**: 可插拔的功能模块\n- **providers/**: AI 服务提供商适配器\n- **server/**: HTTP 服务器和 API 端点\n\n### 关键文件\n\n- `index.ts` - 主入口点\n- `cli.ts` - CLI 命令行接口\n- `server/http-server.ts` - HTTP 服务器实现\n- `modules/pipeline/` - 流水线系统实现\n\n## 构建和部署\n\n### 构建过程\n\n```bash\n# 清理构建目录\nnpm run clean\n\n# 运行代码检查\nnpm run lint\n\n# 构建项目\nnpm run build\n```\n\n### 部署\n\n```bash\n# 全局安装\nnpm run install:global\n\n# 启动服务\nroutecodex start\n```\n\n## 最近更新\n\n- 0.41.1: 修复 Anthropic 流式工具调用事件规范。现在会按照标准事件顺序输出工具输入（tool_use），避免在 Claude Code 中出现空参数工具调用导致的错误。\n\n## 配置\n\nRouteCodex 使用 JSON 配置文件来定义系统行为：\n\n- **用户基础配置**: `~/.routecodex/simple-log-config.json`\n- **系统配置**: 项目目录下的配置文件\n- **提供商配置**: 各 AI 服务的连接参数\n\n## 调试和测试\n\n### 调试模式\n\n```bash\n# 启用详细日志\nroutecodex simple-log on --level debug\n\n# 启动调试模式\nnpm run dev\n```\n\n### 测试\n\n```bash\n# 运行所有测试\nnpm test\n\n# 运行集成测试\nnpm run test:integration\n\n# 运行端到端测试\nnpm run test:e2e\n```\n\n## 扩展开发\n\n### 添加新的提供商\n\n1. 在 `providers/` 目录创建新的提供商实现\n2. 在 `config/` 目录添加相应的配置验证\n3. 在 `types/` 目录添加类型定义\n4. 更新文档和测试\n\n### 添加新的模块\n\n1. 在 `modules/` 目录创建新模块\n2. 实现必要的接口\n3. 添加相应的配置和类型定义\n4. 编写测试用例\n\n## 文档\n\n详细文档请参考：\n\n- [项目主文档](../../README.md)\n\n## 最近变更（重要）\n\n- GLM 1210 兼容：在发往 GLM 的最终载荷中，移除“非最后一条”消息的 `assistant.tool_calls` 字段，避免上游 400/1210。工具功能不受影响，`tools` 与 `tool` 角色消息仍保留。\n- 流式错误可见性：在 SSE 开始之前（`headersSent=false`）优先返回 JSON 错误（4xx/5xx）；若已开始 SSE，则输出包含错误信息的 SSE 块后 `[DONE]`，避免“静默停止”。\n- 预心跳优化：增加预心跳延迟窗口 `ROUTECODEX_PRE_SSE_HEARTBEAT_DELAY_MS`（默认 800ms），提升早期错误的可见性。\n- Anthropic 工具调用对齐：默认“信任 schema”，不更改工具名与参数字段（trustSchema=true）。OpenAI `tool_calls` → Anthropic `tool_use` 时，原样透传 `function.name/arguments`，确保与 Claude Code Router 等客户端的正确工具调用流程（`stop_reason=tool_use`）。\n- [架构文档](../../docs/)\n- [API 文档](../../docs/api/)\n- [配置指南](../../docs/configuration/)\n\n## 贡献指南\n\n### 精准定位与根因导向（强制）\n- 先精准定位问题来源与触发条件，不做兜底性宽松容错。\n- 目标是“避免问题出现”，而不是“事后容错”。\n- 每次准备修改代码前必须自问：\n  - 这是否真正的 root cause？\n  - 方案是否直击要害、无副作用、无重复处理？\n- 修改应在“唯一入口/唯一责任层”完成，避免在多处加护栏导致行为分散。\n- 修改后以最小可复现实验 + 真实样本交叉验证；验证不过不得合入。\n\n1. Fork 项目\n2. 创建功能分支\n3. 提交更改\n4. 推送到分支\n5. 创建 Pull Request\n\n## 许可证\n\n本项目采用 MIT 许可证 - 详见 [LICENSE](../../LICENSE) 文件。\n",
    "src/types": "# 类型定义模块 (Types Module)\n\n## 功能概述\n\n类型定义模块提供RouteCodex项目的完整TypeScript类型系统，包含共享接口、数据传输对象和模块声明，确保整个代码库的类型安全和一致性。\n\n## 核心特性\n\n### 🔄 共享类型系统\n- **统一接口**: 项目范围内的通用类型定义\n- **数据传输对象**: 标准化的DTO类型定义\n- **模块声明**: 外部模块的类型声明文件\n- **类型安全**: 完整的TypeScript类型检查支持\n\n### 📊 类型组织\n- **基础类型**: 基本数据类型和工具类型\n- **业务类型**: 与业务逻辑相关的类型定义\n- **调试类型**: 调试和诊断相关的类型\n- **外部模块**: 第三方库的类型声明\n\n## 文件结构\n\n### 核心类型文件\n\n#### `common-types.ts`\n**用途**: 通用类型定义和工具类型\n**功能**:\n- 基础数据类型定义\n- JSON数据类型支持\n- 日志数据类型\n- 工具类型和辅助类型\n\n**关键类型**:\n```typescript\n// 基础类型\nexport type Unknown = unknown;\nexport type UnknownObject = Record<string, unknown>;\nexport type UnknownArray = unknown[];\n\n// JSON类型\nexport type JsonValue = string | number | boolean | null | JsonObject | JsonArray;\nexport interface JsonObject { [key: string]: JsonValue; }\nexport type JsonArray = JsonValue[];\n\n// 日志类型\nexport type LogData = Record<string, unknown> | unknown[] | string | number | boolean;\n```\n\n#### `shared-dtos.ts`\n**用途**: 共享数据传输对象定义\n**功能**:\n- 路由请求类型\n- 流水线请求/响应类型\n- 错误记录类型\n- 元数据类型定义\n\n**关键类型**:\n```typescript\n// 路由请求\nexport interface SharedRouteRequest {\n  readonly providerId: string;\n  readonly modelId: string;\n  readonly requestId: string;\n  readonly timestamp?: number;\n}\n\n// 流水线请求\nexport interface SharedPipelineRequest {\n  readonly data: unknown;\n  readonly route: { providerId: string; modelId: string; requestId: string; timestamp: number; };\n  readonly metadata: Record<string, unknown>;\n  readonly debug: { enabled: boolean; stages: Record<string, boolean>; };\n}\n\n// 流水线响应\nexport interface SharedPipelineResponse {\n  readonly data: unknown;\n  readonly metadata: { pipelineId: string; processingTime: number; stages: string[]; errors?: SharedPipelineError[]; };\n}\n```\n\n#### `debug-types.ts`\n**用途**: 调试和诊断相关类型定义\n**功能**:\n- 调试会话类型\n- 错误追踪类型\n- 性能监控类型\n- 诊断数据类型\n\n#### `external-modules.d.ts`\n**用途**: 外部模块类型声明\n**功能**:\n- 第三方库的类型声明\n- 模块导入类型定义\n- 兼容性类型声明\n\n#### `glob.d.ts`\n**用途**: Glob模块类型声明\n**功能**:\n- 文件匹配模式类型\n- 路径匹配类型定义\n\n#### `rcc-modules.d.ts`\n**用途**: RCC模块类型声明\n**功能**:\n- RCC框架模块类型\n- 共享模块类型定义\n\n## 类型设计原则\n\n### 1. 最小化依赖\n- 避免循环依赖\n- 保持类型定义的独立性\n- 使用接口而非具体实现\n\n### 2. 类型安全\n- 严格的类型检查\n- 运行时类型验证\n- 类型推导支持\n\n### 3. 可扩展性\n- 模块化类型设计\n- 支持类型继承\n- 兼容性考虑\n\n### 4. 文档化\n- 完整的JSDoc注释\n- 使用示例\n- 类型约束说明\n\n## 使用示例\n\n### 基础类型使用\n```typescript\nimport { JsonValue, LogData } from './common-types';\n\n// 使用JSON类型\nfunction processJsonData(data: JsonValue): void {\n  console.log('Processing:', data);\n}\n\n// 使用日志类型\nfunction logData(data: LogData): void {\n  console.log('Log:', data);\n}\n```\n\n### 共享DTO使用\n```typescript\nimport { SharedRouteRequest, SharedPipelineRequest } from './shared-dtos';\n\n// 创建路由请求\nconst routeRequest: SharedRouteRequest = {\n  providerId: 'qwen-provider',\n  modelId: 'qwen3-coder-plus',\n  requestId: 'req-123',\n  timestamp: Date.now()\n};\n\n// 创建流水线请求\nconst pipelineRequest: SharedPipelineRequest = {\n  data: { messages: [{ role: 'user', content: 'Hello' }] },\n  route: {\n    providerId: 'qwen-provider',\n    modelId: 'qwen3-coder-plus',\n    requestId: 'req-123',\n    timestamp: Date.now()\n  },\n  metadata: { source: 'api' },\n  debug: { enabled: true, stages: { routing: true } }\n};\n```\n\n### 调试类型使用\n```typescript\nimport { DebugSession, DebugEvent } from './debug-types';\n\n// 创建调试会话\nconst debugSession: DebugSession = {\n  id: 'debug-123',\n  startTime: Date.now(),\n  events: []\n};\n\n// 添加调试事件\nconst debugEvent: DebugEvent = {\n  timestamp: Date.now(),\n  level: 'info',\n  message: 'Processing request',\n  data: { requestId: 'req-123' }\n};\n```\n\n## 类型继承和扩展\n\n### 基础接口继承\n```typescript\ninterface BaseModel {\n  id: string;\n  name: string;\n  version: string;\n}\n\ninterface ProviderModel extends BaseModel {\n  providerId: string;\n  capabilities: string[];\n  config: Record<string, unknown>;\n}\n```\n\n### 工具类型使用\n```typescript\n// 可选类型\ntype Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\n\n// 只读类型\ntype ReadOnly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n\n// 深度只读\ntype DeepReadOnly<T> = {\n  readonly [P in keyof T]: T[P] extends object ? DeepReadOnly<T[P]> : T[P];\n};\n```\n\n## 类型验证\n\n### 运行时类型验证\n```typescript\n// 类型守卫\nfunction isJsonObject(value: unknown): value is JsonObject {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nfunction isLogData(value: unknown): value is LogData {\n  return typeof value === 'object' && value !== null;\n}\n\n// 使用类型守卫\nfunction processUnknownValue(value: unknown): void {\n  if (isJsonObject(value)) {\n    console.log('Object:', Object.keys(value));\n  } else if (typeof value === 'string') {\n    console.log('String:', value);\n  }\n}\n```\n\n## 最佳实践\n\n### 1. 类型定义原则\n- **明确性**: 类型名称应该清晰表达其用途\n- **一致性**: 保持命名约定的一致性\n- **最小化**: 避免过度复杂的类型定义\n- **文档化**: 为复杂类型提供详细说明\n\n### 2. 类型组织\n- **模块化**: 按功能域组织类型定义\n- **分层**: 基础类型、业务类型分层设计\n- **复用**: 提高类型复用性\n- **维护**: 定期清理未使用的类型\n\n### 3. 类型安全\n- **严格模式**: 使用严格的TypeScript配置\n- **验证**: 实现运行时类型验证\n- **测试**: 为复杂类型编写测试用例\n- **监控**: 监控类型相关错误\n\n## 类型演进策略\n\n### 版本兼容性\n- 使用类型别名保持向后兼容\n- 逐步废弃旧类型定义\n- 提供迁移指南\n\n### 类型重构\n- 优先重构基础类型\n- 渐进式更新业务类型\n- 保持API兼容性\n\n## 性能考虑\n\n### 编译性能\n- 避免过度复杂的类型计算\n- 合理使用条件类型\n- 控制类型递归深度\n\n### 运行时性能\n- 最小化类型检查开销\n- 使用高效的类型守卫\n- 缓存类型验证结果\n\n## 依赖关系\n\n```\ntypes/\n├── 被所有模块依赖 - 提供基础类型定义\n├── 依赖 config/ - 配置类型引用\n├── 依赖 utils/ - 工具类型使用\n└── 依赖 server/ - 服务器类型定义\n```\n\n### 详细依赖\n- **config/**: 配置类型定义和验证\n- **utils/**: 工具函数和辅助类型\n- **server/**: 服务器相关类型定义\n- **modules/**: 模块接口类型定义\n\n## 版本信息\n- **当前版本**: v1.0 (基础类型系统)\n- **构建状态**: ✅ TypeScript兼容，✅ 类型检查通过\n- **类型覆盖率**: 100% (完全类型安全)\n- **维护状态**: 🔄 持续优化和扩展",
    "src/core": "# 核心模块 (Core Module)\n\n## 功能概述\n核心模块提供RouteCodex的基础业务逻辑和系统管理功能，包括配置管理、Provider管理、错误处理等核心服务。作为整个系统的基石，核心模块采用模块化设计，确保各组件间的松耦合和高内聚。\n\n## 🆕 v2.1 核心架构更新\n\n### 顺序索引别名系统 (Key Alias System)\n核心模块全面支持新的**顺序索引别名系统**，解决配置中key字段特殊字符解析错误：\n- **Provider密钥**: 使用 `key1`、`key2`、`key3` 等顺序索引别名\n- **配置映射**: 自动将真实密钥映射到顺序索引\n- **向后兼容**: 单key配置自动适配为 `key1`\n- **安全增强**: 配置中只出现别名，不出现真实密钥\n\n### 增强型Provider管理器 (Enhanced Provider Manager)\n- **统一未实现功能处理**: 标准化501 Not Implemented响应\n- **使用统计和分析**: 自动跟踪未实现功能调用\n- **优先级推荐**: ML算法推荐实现优先级\n- **工厂模式**: 集中管理未实现Provider生命周期\n\n## 文件结构\n\n### 核心文件\n- `base-module.ts`: 基础模块抽象类，定义模块通用接口和生命周期管理\n  - 统一初始化、启动、停止生命周期\n  - 标准化错误处理和日志记录\n  - ESM模块系统支持\n\n- `base-module.js`: 兼容版本，支持遗留系统\n\n- `enhanced-provider-manager.ts`: **v2.1新增** - 增强型Provider管理器\n  - 自动创建未实现Provider\n  - 全局使用统计聚合\n  - 与未实现模块工厂集成\n  - 向后兼容现有Provider\n\n- `provider-manager.ts`: **重构完成** - Provider管理器基类\n  - 管理多个Provider生命周期\n  - 支持负载均衡和故障转移\n  - 健康检查和状态监控\n\n- `request-handler.ts`: **重构完成** - 请求处理器\n  - 处理传入的OpenAI请求\n  - 支持动态路由分类\n  - 7个路由池支持 (default, longContext, thinking, coding, background, websearch, vision)\n\n- `response-handler.ts`: **重构完成** - 响应处理器\n  - 处理Provider响应\n  - 支持格式转换和兼容性处理\n  - 错误响应标准化\n\n### 配置系统文件 (v2.0+)\n- `config-manager.ts`: 重构后的配置管理模块\n  - 分层配置系统 (用户配置 + 系统配置)\n  - 热重载支持\n  - ESM兼容配置解析\n\n- `types.ts`: 核心模块类型定义\n  - Provider配置类型\n  - 请求响应类型\n  - 错误处理类型\n\n### 未实现功能系统 (v2.1+)\n- 与 `src/modules/unimplemented-module.ts` 集成\n- 提供标准化未实现响应\n- 支持使用统计和分析\n- ML算法推荐实现优先级\n\n## 架构特性\n\n### 🏗️ 模块化设计\n- **统一基类**: 所有核心模块继承自 `BaseModule`\n- **生命周期管理**: 初始化 → 启动 → 停止 → 清理\n- **标准化接口**: 统一的错误处理和日志记录\n- **ESM兼容**: 纯ESM模块系统，支持动态导入\n\n### ⚙️ 配置管理系统 (v2.0+)\n- **分层配置**: 用户配置 + 系统配置 → 合并配置\n- **热重载**: 配置文件变更时自动重新加载\n- **类型安全**: TypeScript类型定义和验证\n- **ESM支持**: 纯ESM模块配置解析\n\n### 🔐 增强型Provider管理 (v2.1+)\n- **自动Provider创建**: 为不支持的Provider类型自动创建未实现Provider\n- **统一响应格式**: 标准化501 Not Implemented响应\n- **使用统计**: 全局未实现功能使用跟踪\n- **优先级算法**: ML推荐实现优先级\n\n### 🛡️ 错误处理中心\n- **集中式管理**: ErrorHandlingCenter统一处理所有错误\n- **分类处理**: 支持不同级别错误的分类处理\n- **自动清理**: 错误日志自动清理机制\n- **集成监控**: 与调试中心无缝集成\n\n## 依赖关系\n```\ncore/\n├── 依赖 config/ - 配置类型和解析器\n├── 依赖 utils/ - 工具函数和错误处理\n├── 依赖 modules/ - 模块管理 (特别是未实现模块系统)\n├── 依赖 providers/ - Provider基类定义\n└── 被 server/, patches/, commands/ 依赖\n```\n\n### 核心依赖详情\n- **config/**: 配置类型定义、配置解析器、配置合并器\n- **utils/**: 日志工具、错误处理、负载均衡、故障转移\n- **modules/**: 未实现模块工厂、虚拟路由、配置管理\n- **providers/**: Provider基类、OpenAI Provider、未实现Provider\n\n## 使用示例\n\n### 基础模块使用\n```typescript\nimport { BaseModule } from './base-module';\n\nclass CustomModule extends BaseModule {\n  constructor() {\n    super({\n      id: 'custom-module',\n      name: 'Custom Module',\n      version: '1.0.0',\n      dependencies: ['config-manager', 'error-handling-center']\n    });\n  }\n\n  async initialize(config: any): Promise<void> {\n    await super.initialize(config);\n    // 模块初始化逻辑\n    this.logger.info('Custom module initialized');\n  }\n\n  async start(): Promise<void> {\n    await super.start();\n    this.logger.info('Custom module started');\n  }\n\n  async stop(): Promise<void> {\n    await super.stop();\n    this.logger.info('Custom module stopped');\n  }\n}\n```\n\n### 增强型Provider管理器使用\n```typescript\nimport { EnhancedProviderManager } from './enhanced-provider-manager';\n\nconst providerManager = new EnhancedProviderManager({\n  providers: {\n    'openai': { /* 标准Provider配置 */ },\n    'custom-provider': {\n      type: 'unsupported-type', // 将自动创建未实现Provider\n      enabled: true\n    }\n  }\n}, {\n  enableUnimplementedProviders: true,\n  autoCreateUnimplemented: true,\n  enableAnalytics: true\n});\n\nawait providerManager.initialize();\n\n// 获取Provider - 未实现的将返回标准化响应\nconst provider = providerManager.getProvider('custom-provider');\nconst response = await provider.processChatCompletion(request);\n// 返回: { error: { message: 'Not implemented', type: 'not_implemented' } }\n\n// 获取使用统计\nconst stats = providerManager.getUnimplementedUsageStats();\nconsole.log(`未实现调用总数: ${stats.totalCalls}`);\nconsole.log(`最常用未实现Provider: ${stats.mostCalledProvider}`);\n```\n\n### 配置管理使用 (v2.0+)\n```typescript\nimport { ConfigManagerModule } from '../modules/config-manager/config-manager-module';\n\nconst configManager = new ConfigManagerModule();\nawait configManager.initialize({\n  userConfigPath: '~/.routecodex/config.json',\n  systemConfigPath: './config/modules.json',\n  mergedConfigPath: './config/merged-config.json',\n  autoReload: true,\n  watchInterval: 5000,\n  enableValidation: true\n});\n\n// 获取合并配置\nconst config = await configManager.getMergedConfig();\nconsole.log('当前配置:', config);\n\n// 监听配置变更\nconfigManager.on('configChanged', (newConfig) => {\n  console.log('配置已更新:', newConfig);\n});\n```\n\n### 请求处理使用\n```typescript\nimport { RequestHandler } from './request-handler';\n\nconst requestHandler = new RequestHandler({\n  enableRouting: true,\n  routingCategories: ['default', 'thinking', 'coding'],\n  enableCaching: true\n});\n\nawait requestHandler.initialize();\n\n// 处理请求\nconst request = {\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello!' }],\n  tools: []\n};\n\nconst routingResult = await requestHandler.classifyRequest(request);\nconsole.log('路由分类:', routingResult.category); // 'default', 'thinking', 'coding'等\n\nconst processedRequest = await requestHandler.processRequest(request);\n```\n\n### 错误处理中心使用\n```typescript\nimport { ErrorHandlingCenter } from './error-handling-center';\n\nconst errorCenter = new ErrorHandlingCenter({\n  maxErrors: 1000,\n  autoCleanup: true,\n  cleanupInterval: 3600000, // 1小时\n  enableMetrics: true,\n  enableReporting: true\n});\n\nawait errorCenter.initialize();\n\n// 注册错误处理器\nerrorCenter.registerHandler('provider-error', async (error, context) => {\n  console.error('Provider错误:', error);\n  // 自动重试逻辑\n  if (error.retryable) {\n    await retryProviderRequest(context);\n  }\n});\n\n// 处理错误\nerrorCenter.handleError(new Error('Test error'), {\n  module: 'custom-module',\n  severity: 'error',\n  context: { requestId: 'req-123' }\n});\n\n// 获取错误统计\nconst stats = errorCenter.getErrorStats();\nconsole.log('错误总数:', stats.totalErrors);\nconsole.log('最近错误:', stats.recentErrors);\n```\n\n## 配置系统 (v2.1)\n\n### 🆕 顺序索引别名系统架构\n```\n用户配置 (~/.routecodex/config.json)\n    ↓ (包含真实API密钥数组)\nUserConfigParser (解析并生成别名映射)\n    ↓ (生成 key1→真实key1, key2→真实key2...)\nConfigMerger (合并系统配置)\n    ↓ (生成带别名的合并配置)\n合并后配置 (./config/merged-config.json)\n    ↓ (别名格式: provider.model.key1)\n虚拟路由模块 (使用别名进行负载均衡)\n```\n\n### 配置层次结构\n- **用户基础配置**: `~/.routecodex/config.json` (个人设置)\n- **系统模块配置**: `./config/modules.json` (系统默认)\n- **合并配置**: `./config/merged-config.json` (运行时配置)\n- **Auth文件**: `~/.routecodex/auth/` (密钥文件)\n\n### 🆕 关键特性 (v2.1)\n- **顺序索引别名**: 彻底解决key中特殊字符解析错误\n- **3个真实Provider**: qwen (2密钥), iflow (3密钥), modelscope (4密钥)\n- **16个模型**: 覆盖代码生成、推理、对话等场景\n- **7个路由池**: default, longContext, thinking, coding, background, websearch, vision\n- **56个流水线配置**: 完整的执行配置，支持别名引用\n- **OAuth支持**: 完整的OAuth 2.0 Device Flow实现\n- **ESM兼容**: 纯ESM模块系统，支持动态导入\n\n## 版本信息\n- **当前版本**: v2.1 (Key Alias System & Enhanced Provider Management)\n- **构建状态**: ✅ ESM兼容，✅ 测试通过，✅ 生产就绪\n- **性能评级**: ⚡ 优秀 (0.03ms/次)\n- **新增特性**: \n  - ✅ 顺序索引别名系统 (解决key解析错误)\n  - ✅ 增强型Provider管理器 (统一未实现功能处理)\n  - ✅ OAuth 2.0完整支持 (包括PKCE)\n  - ✅ 16个真实AI模型支持\n  - ✅ 56个流水线配置优化",
    "src/config": "# 配置模块 (Configuration Module)\n\n## 功能概述\n配置模块提供RouteCodex的完整配置管理解决方案，包括配置定义、解析、验证、合并等核心功能。\n\n## 🆕 顺序索引别名系统 (Key Alias System) - v2.1 新增\n\n### 核心概念\n为了彻底解决配置中key字段包含特殊字符（如\".\"）导致的解析错误，我们引入了**顺序索引别名系统**：\n\n1. **provider.apiKey**: 填入真实key数组\n2. **route配置**: 使用顺序索引别名（`key1`、`key2`、`key3`...）\n3. **不填key**: 表示使用全部key（自动展开为所有别名）\n4. **指定key**: 使用 `provider.model.key1` 格式\n\n### 别名映射规则\n```\n真实key: [\"sk-real-key-1\", \"sk-real-key-2\", \"sk-real-key-3\"]\n自动映射: key1 → sk-real-key-1, key2 → sk-real-key-2, key3 → sk-real-key-3\n```\n\n### 配置示例\n```json\n{\n  \"virtualrouter\": {\n    \"providers\": {\n      \"openai\": {\n        \"apiKey\": [\"sk-proj-xxxxx\", \"sk-proj-yyyyy\", \"sk-proj-zzzzz\"],\n        \"models\": { \"gpt-4\": {} }\n      }\n    },\n    \"routing\": {\n      \"default\": [\"openai.gpt-4\"],        // 使用全部key（key1, key2, key3）\n      \"premium\": [\"openai.gpt-4.key1\"],   // 仅使用第1个key\n      \"backup\": [\"openai.gpt-4.key2\", \"openai.gpt-4.key3\"] // 使用第2、3个key\n    }\n  }\n}\n```\n\n### 优势\n- ✅ **避免解析错误**: 不再担心key中包含特殊字符\n- ✅ **提高安全性**: 配置中只出现别名，不出现真实key\n- ✅ **统一抽象**: 所有key都通过顺序索引别名引用\n- ✅ **向后兼容**: 单key配置自动适配为key1\n\n## 文件结构\n\n## 文件结构\n\n### 核心配置文件\n- `modules.json`: 系统模块默认配置\n- `users.json`: 用户管理配置\n- `default.json`: 默认配置模板\n\n### 配置类型定义\n- `merged-config-types.ts`: **新增** - 合并配置类型定义\n- `user-config-types.ts`: **新增** - 用户配置类型定义\n- `system-config-types.ts`: **新增** - 系统配置类型定义\n- `module-config-types.ts`: **新增** - 模块配置类型定义\n\n### 配置处理器 (v2.0 新增)\n- `user-config-parser.ts`: **新增** - 用户配置解析器，解析用户配置为模块格式\n- `config-merger.ts`: **新增** - 配置合并器，合并系统配置和用户配置\n- `auth-file-resolver.ts`: **新增** - AuthFile解析器，处理密钥文件解析\n- `refactoring-agent.ts`: **新增** - 重构代理，自动化代码生成和重构\n\n### 遗留文件 (待重构)\n- `config-types.ts`: **旧版** - 配置类型定义\n- `config-loader.ts`: **旧版** - 配置加载器\n- `config-validator.ts`: **旧版** - 配置验证器\n\n## 配置系统架构 (v2.0)\n\n### 分层配置系统\n```\n用户配置 (~/.routecodex/config.json)\n    ↓ 解析和转换\nUserConfigParser\n    ↓ 生成路由目标池和流水线配置\nConfigMerger\n    ↓ 合并系统配置\n./config/merged-config.json\n    ↓ 模块加载\n各个系统模块\n```\n\n## 🆕 兼容性字段处理 (v2.1 新增)\n\n### 功能概述\n兼容性字段处理系统支持简单字符串格式和复杂对象格式，提供灵活的配置选项。\n\n### 支持的格式\n\n#### 简单字符串格式\n```json\n{\n  \"compatibility\": \"passthrough\"\n}\n```\n\n**支持的字符串值**:\n- `\"passthrough\"` - 直通模式（默认）\n- `\"lmstudio\"` - LM Studio兼容模式\n- `\"qwen\"` - Qwen兼容模式\n- `\"iflow\"` - iFlow兼容模式\n- `\"lmstudio/qwen\"` - 多Provider支持\n\n#### 复杂对象格式\n```json\n{\n  \"compatibility\": {\n    \"type\": \"lmstudio-compatibility\",\n    \"config\": {\n      \"toolsEnabled\": true,\n      \"customRules\": [...]\n    }\n  }\n}\n```\n\n### 优先级层次\n1. **用户配置兼容性字段**（最高优先级）\n2. **模型级别兼容性**\n3. **Provider级别兼容性**\n4. **自动推断**（基于Provider类型）\n\n### 自动推断逻辑\n当未指定兼容性时，系统会根据Provider类型自动推断：\n- `lmstudio` → `lmstudio-compatibility`\n- `qwen` → `qwen-compatibility`\n- `iflow` → `iflow-compatibility`\n- 其他 → `passthrough-compatibility`\n\n### 实现细节\n- **解析器**: `UserConfigParser.parseCompatibilityString()`\n- **转换逻辑**: 支持字符串到复杂对象的自动转换\n- **向后兼容**: 完全兼容现有的复杂对象格式\n- **默认值**: 未指定时默认为`passthrough`\n\n### 关键组件\n\n#### 1. UserConfigParser\n- 解析用户配置文件\n- 生成路由目标池 (Route Target Pools)\n- 生成流水线配置 (Pipeline Configurations)\n- 支持AuthFile密钥解析\n- **🆕 兼容性字段处理**: 支持简单字符串格式和复杂对象格式\n\n#### 2. ConfigMerger\n- 深度合并系统配置和用户配置\n- 配置优先级管理\n- 配置验证和错误处理\n\n#### 3. 虚拟路由配置\n- **路由目标池**: 7个池 (default, longContext, thinking, coding, background, websearch, vision)\n- **流水线配置**: 56个详细配置\n- **协议支持**: OpenAI和Anthropic协议\n\n## 真实Provider配置\n\n### 支持的Provider\n- **QWEN**: 2个模型，2个API密钥\n  - qwen3-coder-plus, qwen3-coder\n  - https://portal.qwen.ai/v1\n\n- **IFLOW**: 4个模型，3个API密钥\n  - deepseek-r1, kimi-k2, qwen3-coder, glm-4.5\n  - https://apis.iflow.cn/v1\n\n- **MODELSCOPE**: 10个模型，4个API密钥\n  - Qwen3-Coder-480B, GLM-4.5, DeepSeek-V3, etc.\n  - https://api-inference.modelscope.cn/v1/chat/completions\n\n### 路由配置\n- **default**: 4个目标 (主要工作负载)\n- **longContext**: 2个目标 (长文本处理)\n- **thinking**: 4个目标 (复杂推理)\n- **coding**: 2个目标 (代码生成)\n- **background**: 2个目标 (后台任务)\n- **websearch**: 2个目标 (网络搜索)\n- **vision**: 0个目标 (图像处理，预留)\n\n## 依赖关系\n```\nconfig/\n├── 被 core/ 依赖 - 配置管理\n├── 被 modules/ 依赖 - 模块配置\n├── 被 server/ 依赖 - 服务器配置\n└── 依赖 utils/ - 工具函数\n```\n\n## 使用示例\n\n### 用户配置解析\n```typescript\nimport { UserConfigParser } from './user-config-parser';\n\nconst parser = new UserConfigParser();\nconst userConfig = await parser.parseConfig('~/.routecodex/config.json');\nconst routeTargets = parser.parseRouteTargets(userConfig);\nconst pipelineConfigs = parser.parsePipelineConfigs(userConfig);\n```\n\n### 配置合并\n```typescript\nimport { ConfigMerger } from './config-merger';\n\nconst merger = new ConfigMerger();\nconst mergedConfig = await merger.mergeConfigs(\n  './config/modules.json',     // 系统配置\n  '~/.routecodex/config.json', // 用户配置\n  parsedUserConfig            // 解析后的用户配置\n);\n```\n\n### 重构代理使用\n```typescript\nimport { RefactoringAgent } from './refactoring-agent';\n\nconst agent = new RefactoringAgent();\nawait agent.executeRefactoring();\n// 自动生成所有重构代码\n```\n\n## 配置文件位置\n\n### 用户配置\n- **主配置**: `~/.routecodex/config.json`\n- **AuthFile目录**: `~/.routecodex/auth/`\n- **合并配置**: `./config/merged-config.json`\n\n### 系统配置\n- **模块配置**: `./config/modules.json`\n- **用户管理**: `./config/users.json`\n- **默认配置**: `./config/default.json`\n\n## 性能特性\n- **解析性能**: 0.03ms/次 (优秀)\n- **ESM兼容**: 纯ESM模块系统\n- **热重载**: 支持配置文件变更自动重载\n- **验证完整**: 100%测试覆盖率\n\n## 版本信息\n- **当前版本**: v2.1 (Compatibility Field Enhancement)\n- **状态**: ✅ 生产就绪，✅ 测试通过，✅ ESM兼容\n- **真实Provider**: 3个Provider，16个模型，56个配置\n- **🆕 新增功能**: 兼容性字段简单字符串格式支持",
    "src/server": "# Server Module\n\nHTTP 服务与协议适配入口，承载 OpenAI/Anthropic 形状的 Chat 与 Responses 端点、SSE 流式传输等。\n\n## 🚨 核心职责边界\n\n### **Server模块职责范围**\n- ✅ **HTTP协议处理**: 请求解析、响应格式化、状态码管理\n- ✅ **认证授权**: API key验证、权限检查、访问控制\n- ✅ **流式传输**: SSE事件管理、分块传输、连接控制\n- ✅ **错误处理**: HTTP错误响应、异常捕获、日志记录\n- ✅ **路由分发**: 请求路由到相应处理器的逻辑\n\n### **严格禁止的职责**\n- ❌ **工具调用处理**: 不实现任何工具转换或收割逻辑\n- ❌ **数据格式转换**: 不修改请求/响应的业务数据格式\n- ❌ **Provider适配**: 不处理provider特定的字段映射\n- ❌ **业务逻辑**: 不实现AI相关的业务处理逻辑\n\n### **正确实现模式**\n```typescript\n// ✅ 正确：端点只做协议处理\napp.post('/v1/chat/completions', async (req, res) => {\n  try {\n    // 1. HTTP协议层处理\n    const authResult = await authenticateRequest(req);\n    if (!authResult.success) {\n      return res.status(401).json({ error: 'Invalid API key' });\n    }\n\n    // 2. 直接委托给pipeline/llmswitch-core\n    const result = await pipelineManager.processRequest(req.body);\n\n    // 3. HTTP响应格式化\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// ❌ 错误：端点不应处理工具逻辑\napp.post('/v1/chat/completions', (req, res) => {\n  // 不要这样做！工具处理应该在llmswitch-core\n  if (req.messages.some(m => m.content.includes('tool_call'))) {\n    req.tool_calls = extractToolCalls(req.messages);\n  }\n\n  // 应该直接透传给下游处理\n  processRequest(req);\n});\n```\n\n## 主要职责\n- 路由到 Pipeline/Provider，整合 LLMSwitch 转换\n- Chat 与 Responses 端点统一：委托llmswitch-core进行工具调用标准化\n- 流式管理与连接生命周期控制\n\n## 目录概览\n- `handlers/`：请求处理器（chat-completions.ts、responses.ts 等）\n- `streaming/`：SSE/分块传输管理\n- `conversion/`：与 llmswitch-core 的桥接\n- `utils/`：请求/响应工具\n\n",
    "src/utils": "# 工具模块 (Utils Module)\n\n## 功能概述\n\n工具模块提供RouteCodex项目的通用工具函数和辅助类，包括日志记录、错误处理、负载均衡、故障转移、模型字段转换等核心功能。\n\n## 核心特性\n\n### 🛠️ 通用工具\n- **日志记录**: 基于RCC DebugCenter的日志系统\n- **错误处理**: 统一的错误处理和传播机制\n- **负载均衡**: 多种负载均衡策略支持\n- **故障转移**: 自动故障切换和健康检查\n\n### 🔧 高级工具\n- **模型字段转换**: 智能请求/响应字段映射\n- **文件监控**: 配置文件变更监控\n- **调试工具**: 调试会话管理\n- **健康监控**: 流水线健康状态管理\n\n## 文件结构\n\n### 核心工具文件\n\n#### `logger.ts`\n**用途**: 日志记录工具\n**功能**:\n- 基于RCC DebugCenter实现\n- 支持ESM模块导入\n- 多级别日志记录\n- 结构化日志输出\n\n#### `error-handler.ts` & `error-handler-registry.ts`\n**用途**: 错误处理系统\n**功能**:\n- 基于RCC ErrorHandling实现\n- 支持ESM错误传播\n- 错误注册表管理\n- 错误链路追踪\n\n#### `load-balancer.ts`\n**用途**: 负载均衡器\n**功能**:\n- 多种负载均衡策略（轮询、权重、最少连接）\n- 动态权重调整\n- 健康状态感知\n- 性能统计\n\n#### `failover.ts`\n**用途**: 故障转移器\n**功能**:\n- Provider故障自动切换\n- 健康检查机制\n- 重试策略管理\n- 故障恢复检测\n\n#### `key-429-tracker.ts`\n**用途**: API密钥429状态追踪\n**功能**:\n- 密钥限流状态监控\n- 自动密钥切换\n- 限流时间跟踪\n- 密钥健康状态管理\n\n### 模型字段转换系统\n\n#### `model-field-converter/`\n**用途**: 智能模型字段转换\n**功能**:\n- 请求/响应字段映射\n- 模型名称转换\n- 字段类型转换\n- 兼容性处理\n\n**子文件**:\n- `index.ts`: 模块导出和入口\n- `model-field-converter.ts`: 主转换器实现\n- `request-transformer.ts`: 请求转换器\n- `field-mapping-rules.ts`: 字段映射规则\n- `types.ts`: 转换相关类型定义\n\n### 系统工具\n\n#### `debug-utils.ts`\n**用途**: 调试工具集\n**功能**:\n- 调试会话管理\n- 调试事件记录\n- 性能监控\n- 错误追踪\n\n#### `file-watcher.ts`\n**用途**: 文件监控工具\n**功能**:\n- 配置文件变更监控\n- 热重载触发\n- 文件系统事件处理\n- 变更通知机制\n\n#### `module-config-reader.ts`\n**用途**: 模块配置读取器\n**功能**:\n- 模块配置解析\n- 配置验证\n- 环境变量处理\n- 配置合并策略\n\n#### `pipeline-health-manager.ts`\n**用途**: 流水线健康管理器\n**功能**:\n- 流水线健康监控\n- 性能指标收集\n- 故障检测和报警\n- 健康状态报告\n\n#### `error-handling-utils.ts`\n**用途**: 错误处理工具集\n**功能**:\n- 错误分类和处理\n- 错误恢复策略\n- 错误统计和分析\n- 错误报告生成\n\n## 依赖关系\n\n```\nutils/\n├── 依赖 rcc-debugcenter - 日志记录\n├── 依赖 rcc-errorhandling - 错误处理\n├── 依赖 types/ - 类型定义\n├── 依赖 config/ - 配置类型\n├── 被 core/ 调用 - 核心业务逻辑\n├── 被 modules/ 调用 - 模块系统\n├── 被 providers/ 调用 - Provider管理\n└── 被 server/ 调用 - 服务器功能\n```\n\n## 使用示例\n\n### 基础工具使用\n```typescript\nimport { Logger } from './logger';\nimport { ErrorHandler } from './error-handler';\nimport { LoadBalancer } from './load-balancer';\nimport { Failover } from './failover';\n\n// 日志记录\nconst logger = new Logger('my-module');\nlogger.info('System started', { version: '1.0.0' });\n\n// 错误处理\nconst errorHandler = new ErrorHandler();\ntry {\n  // 业务逻辑\n} catch (error) {\n  await errorHandler.handleError(error, { context: 'my-module' });\n}\n\n// 负载均衡\nconst loadBalancer = new LoadBalancer();\nconst provider = await loadBalancer.selectProvider(providers);\n\n// 故障转移\nconst failover = new Failover();\nawait failover.handleFailure(provider, error);\n```\n\n### 模型字段转换使用\n```typescript\nimport { ModelFieldConverter } from './model-field-converter';\n\nconst converter = new ModelFieldConverter();\n\n// 转换请求\nconst transformedRequest = await converter.transformRequest({\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello' }]\n}, {\n  modelMappings: {\n    'gpt-4': 'qwen3-coder-plus',\n    'gpt-3.5-turbo': 'qwen3-coder'\n  }\n});\n\n// 转换响应\nconst transformedResponse = await converter.transformResponse(response, {\n  responseMappings: {\n    'content': 'text',\n    'role': 'speaker'\n  }\n});\n```\n\n### 文件监控使用\n```typescript\nimport { FileWatcher } from './file-watcher';\n\nconst watcher = new FileWatcher();\n\n// 监控配置文件变更\nawait watcher.watch('./config.json', (event) => {\n  console.log('Config changed:', event);\n  // 触发热重载\n});\n\n// 停止监控\nawait watcher.unwatch('./config.json');\n```\n\n### 健康监控使用\n```typescript\nimport { PipelineHealthManager } from './pipeline-health-manager';\n\nconst healthManager = new PipelineHealthManager();\n\n// 注册流水线健康检查\nhealthManager.registerPipeline('main-pipeline', {\n  checkInterval: 30000,\n  timeoutThreshold: 5000\n});\n\n// 获取健康状态\nconst health = await healthManager.getHealthStatus('main-pipeline');\nconsole.log('Pipeline health:', health);\n\n// 监听健康事件\nhealthManager.on('health-change', (event) => {\n  console.log('Health status changed:', event);\n});\n```\n\n## 配置选项\n\n### 负载均衡配置\n```typescript\ninterface LoadBalancerConfig {\n  strategy: 'round-robin' | 'weighted' | 'least-connections';\n  healthCheck: {\n    interval: number;\n    timeout: number;\n    retries: number;\n  };\n  weights: Record<string, number>;\n}\n```\n\n### 故障转移配置\n```typescript\ninterface FailoverConfig {\n  retryAttempts: number;\n  retryDelay: number;\n  healthCheckInterval: number;\n  recoveryCheckInterval: number;\n}\n```\n\n### 模型转换配置\n```typescript\ninterface ModelConverterConfig {\n  modelMappings: Record<string, string>;\n  fieldMappings: Array<{\n    sourcePath: string;\n    targetPath: string;\n    transform: 'mapping' | 'function';\n  }>;\n  strictMode: boolean;\n}\n```\n\n## 最佳实践\n\n### 1. 工具使用原则\n- **单一职责**: 每个工具只负责一个特定功能\n- **可配置**: 支持灵活的配置选项\n- **可测试**: 提供测试接口和模拟数据\n- **可扩展**: 支持插件和扩展机制\n\n### 2. 错误处理\n- **统一错误处理**: 使用统一的错误处理机制\n- **错误传播**: 确保错误能够正确传播到上层\n- **错误恢复**: 提供自动错误恢复机制\n- **错误日志**: 记录详细的错误信息\n\n### 3. 性能优化\n- **缓存策略**: 合理使用缓存提高性能\n- **资源管理**: 正确管理资源生命周期\n- **并发控制**: 控制并发操作数量\n- **监控指标**: 收集性能监控指标\n\n## 扩展开发\n\n### 添加新工具\n```typescript\n// 1. 创建工具文件\n// utils/my-tool.ts\nexport class MyTool {\n  constructor(config: MyToolConfig) {\n    // 初始化配置\n  }\n\n  async execute(input: MyToolInput): Promise<MyToolOutput> {\n    // 实现工具逻辑\n    return result;\n  }\n}\n\n// 2. 在index.ts中导出\nexport { MyTool } from './my-tool';\n\n// 3. 添加类型定义\n// types/tool-types.ts\nexport interface MyToolConfig {\n  /* 配置项 */\n}\n\nexport interface MyToolInput {\n  /* 输入类型 */\n}\n\nexport interface MyToolOutput {\n  /* 输出类型 */\n}\n```\n\n### 添加转换规则\n```typescript\n// model-field-converter/custom-rules.ts\nexport const customRules = [\n  {\n    id: 'custom-mapping',\n    sourcePath: 'custom.field',\n    targetPath: 'target.field',\n    transform: 'mapping',\n    mapping: {\n      'value1': 'mappedValue1',\n      'value2': 'mappedValue2'\n    }\n  }\n];\n```\n\n## 版本信息\n- **当前版本**: v2.1 (增强工具集)\n- **构建状态**: ✅ ESM兼容，✅ 测试通过，✅ 生产就绪\n- **工具数量**: 18个核心工具\n- **性能评级**: ⚡ 优秀 (低开销，高并发支持)",
    "src/utils/model-field-converter": "# 模型字段转换器 (Model Field Converter)\n\n## 功能概述\n\n模型字段转换器负责在动态路由过程中，根据选择的Provider和模型配置，动态转换请求字段。它将用户请求中的通用模型映射为具体的Provider模型，并应用相应的配置参数。\n\n## 核心特性\n\n### 🔄 动态字段映射\n- **模型映射**: 将通用模型名映射为具体的Provider模型\n- **参数转换**: 应用maxTokens、maxContext等配置参数\n- **协议兼容**: 保持OpenAI协议兼容性\n- **Meta信息**: 保留原始请求和路由信息\n\n### ⚙️ 配置驱动转换\n- **流水线配置**: 基于Pipeline配置进行字段转换\n- **Provider信息**: 注入Provider类型和API地址\n- **密钥管理**: 应用选择的API密钥配置\n- **协议支持**: 支持OpenAI和Anthropic协议\n\n### 📊 路由集成\n- **路由选择**: 集成虚拟路由器的路由决策\n- **负载均衡**: 支持多目标负载均衡信息\n- **调试信息**: 提供完整的转换过程调试数据\n\n## 文件结构\n\n```\nsrc/utils/model-field-converter/\n├── README.md                           # 本文档\n├── model-field-converter.ts            # 主转换器实现\n├── field-mapping-rules.ts              # 字段映射规则\n├── request-transformer.ts              # 请求转换器\n└── types.ts                            # 类型定义\n```\n\n### 文件说明\n\n#### `model-field-converter.ts`\n**用途**: 主转换器实现\n**功能**:\n- 转换器初始化和配置\n- 模型字段映射逻辑\n- 请求/响应转换协调\n- 调试信息生成\n\n**关键类**:\n- `ModelFieldConverter`: 主转换器类\n\n#### `field-mapping-rules.ts`\n**用途**: 字段映射规则定义\n**功能**:\n- 模型名称映射规则\n- 参数转换规则\n- 协议字段映射\n- 验证规则定义\n\n**关键类**:\n- `FieldMappingRules`: 映射规则管理器\n- `ModelMappingRule`: 模型映射规则\n\n#### `request-transformer.ts`\n**用途**: 请求转换器\n**功能**:\n- OpenAI请求格式转换\n- 字段值转换和验证\n- Meta信息注入\n- 调试信息收集\n\n**关键类**:\n- `RequestTransformer`: 请求转换器\n\n#### `types.ts`\n**用途**: 类型定义\n**功能**:\n- 转换器类型定义\n- 映射规则类型\n- 请求/响应类型\n- 调试信息类型\n\n## 转换流程\n\n### 1. 模型映射流程\n\n```\n用户请求 → 路由选择 → 模型映射 → 配置应用 → 转换完成\n   ↓         ↓         ↓         ↓         ↓\ngpt-4    → default → qwen3-coder-plus → maxTokens:32000 → 转换后请求\n```\n\n### 2. 字段转换规则\n\n#### 模型字段映射\n```typescript\ninterface ModelFieldMapping {\n  // 输入字段 → 输出字段\n  model: string;                    // 模型名称映射\n  max_tokens?: number;              // 最大token数映射\n  temperature?: number;            // 温度参数映射\n  top_p?: number;                   // 采样参数映射\n}\n```\n\n#### 配置字段应用\n```typescript\ninterface ConfigFieldApplication {\n  // 从流水线配置应用的字段\n  provider: ProviderConfig;         // Provider配置\n  model: ModelConfig;               // 模型配置\n  keyConfig: KeyConfig;             // 密钥配置\n  protocols: ProtocolConfig;        // 协议配置\n}\n```\n\n### 3. Meta信息保留\n\n```typescript\ninterface RequestMeta {\n  sourceProtocol: string;           // 源协议类型\n  routing: RoutingInfo;             // 路由信息\n  originalRequest: any;             // 原始请求\n  conversionTrace: ConversionStep[]; // 转换轨迹\n}\n```\n\n## 使用示例\n\n### 基础使用\n\n```typescript\nimport { ModelFieldConverter } from './model-field-converter.js';\nimport type { PipelineConfig } from '../../config/merged-config-types.js';\n\nconst converter = new ModelFieldConverter();\n\n// 初始化转换器\nawait converter.initialize({\n  debugMode: true,\n  enableTracing: true\n});\n\n// 转换请求\nconst originalRequest = {\n  model: 'gpt-4',\n  max_tokens: 1000,\n  messages: [\n    { role: 'user', content: 'Hello world' }\n  ]\n};\n\nconst pipelineConfig = {\n  provider: {\n    type: 'openai',\n    baseURL: 'https://portal.qwen.ai/v1'\n  },\n  model: {\n    maxContext: 128000,\n    maxTokens: 32000,\n    actualModelId: 'qwen3-coder-plus'\n  },\n  keyConfig: {\n    keyId: 'qwen-auth-1',\n    actualKey: 'qwen-auth-1'\n  },\n  protocols: {\n    input: 'openai',\n    output: 'openai'\n  }\n};\n\nconst routingInfo = {\n  route: 'default',\n  providerId: 'qwen',\n  modelId: 'qwen3-coder-plus',\n  keyId: 'qwen-auth-1'\n};\n\n// 执行转换\nconst result = await converter.convertRequest(\n  originalRequest,\n  pipelineConfig,\n  routingInfo\n);\n\nconsole.log('转换后请求:', result.convertedRequest);\nconsole.log('调试信息:', result.debugInfo);\n```\n\n### 复杂转换场景\n\n```typescript\n// 带有完整meta信息的转换\nconst result = await converter.convertRequestWithMeta(\n  {\n    model: 'gpt-4',\n    max_tokens: 1000,\n    messages: [...],\n    _meta: {\n      sourceProtocol: 'openai',\n      requestId: 'req-123'\n    }\n  },\n  pipelineConfig,\n  routingInfo\n);\n\n// 结果包含完整的转换轨迹\nconsole.log('转换轨迹:', result.debugInfo.conversionTrace);\n```\n\n### 批量转换\n\n```typescript\n// 批量转换多个请求\nconst requests = [\n  { model: 'gpt-4', messages: [...] },\n  { model: 'claude-3', messages: [...] },\n  { model: 'gemini-pro', messages: [...] }\n];\n\nconst results = await converter.convertBatch(\n  requests,\n  pipelineConfigs,\n  routingInfos\n);\n\n// 统计转换结果\nconsole.log('成功转换:', results.successful.length);\nconsole.log('转换失败:', results.failed.length);\n```\n\n## 配置选项\n\n### 转换器配置\n\n```typescript\ninterface ModelFieldConverterConfig {\n  debugMode?: boolean;               // 调试模式\n  enableTracing?: boolean;           // 启用轨迹跟踪\n  strictValidation?: boolean;       // 严格验证模式\n  maxConversionDepth?: number;       // 最大转换深度\n  enableMetrics?: boolean;           // 启用指标收集\n  traceSampling?: number;            // 轨迹采样率\n}\n```\n\n### 映射规则配置\n\n```typescript\ninterface MappingRulesConfig {\n  modelMappings: ModelMappingRule[];  // 模型映射规则\n  parameterMappings: ParamMapping[]; // 参数映射规则\n  protocolMappings: ProtocolMapping[]; // 协议映射规则\n  validationRules: ValidationRule[];  // 验证规则\n}\n```\n\n## 调试和监控\n\n### 转换轨迹\n\n```typescript\ninterface ConversionStep {\n  step: string;                      // 转换步骤\n  input: any;                        // 输入数据\n  output: any;                       // 输出数据\n  timestamp: Date;                   // 时间戳\n  rules: string[];                   // 应用的规则\n}\n```\n\n### 性能指标\n\n```typescript\ninterface ConverterMetrics {\n  totalConversions: number;           // 总转换次数\n  averageTime: number;                // 平均转换时间\n  successRate: number;               // 成功率\n  errorRate: number;                 // 错误率\n  ruleUsage: Record<string, number>;  // 规则使用统计\n}\n```\n\n## 错误处理\n\n### 常见错误类型\n\n- **ModelMappingError**: 模型映射错误\n- **ParameterConversionError**: 参数转换错误\n- **ValidationError**: 验证错误\n- **ConfigurationError**: 配置错误\n\n### 错误恢复\n\n```typescript\ntry {\n  const result = await converter.convertRequest(\n    request,\n    pipelineConfig,\n    routingInfo\n  );\n} catch (error) {\n  if (error instanceof ModelMappingError) {\n    // 处理模型映射错误\n    console.error('模型映射失败:', error.details);\n  } else if (error instanceof ValidationError) {\n    // 处理验证错误\n    console.error('参数验证失败:', error.validationErrors);\n  }\n}\n```\n\n## 性能特性\n\n### 转换性能\n- **映射时间**: < 0.1ms (单个模型映射)\n- **验证时间**: < 0.05ms (参数验证)\n- **总转换时间**: < 0.5ms (完整转换)\n- **内存占用**: < 1MB (正常工作状态)\n\n### 批量处理\n- **批量转换**: 支持1000+请求/秒\n- **并发处理**: 支持多线程转换\n- **内存优化**: 自动清理临时数据\n\n## 最佳实践\n\n### 1. 配置管理\n- 使用环境特定的映射规则\n- 定期更新模型映射配置\n- 启用配置验证和测试\n\n### 2. 错误处理\n- 实现完整的错误处理逻辑\n- 提供有意义的错误信息\n- 记录转换失败的原因\n\n### 3. 性能优化\n- 启用转换结果缓存\n- 使用批量处理模式\n- 监控转换性能指标\n\n### 4. 调试和监控\n- 启用详细的转换日志\n- 收集转换性能指标\n- 定期分析转换成功率\n\n## 版本信息\n\n- **当前版本**: v1.0.0\n- **构建状态**: ✅ 开发中\n- **兼容性**: ✅ OpenAI协议，✅ Anthropic协议\n- **性能评级**: ⚡ 优秀 (< 0.5ms转换时间)",
    "src/commands": "# CLI 命令模块\n\n## 概述\n\nCLI 命令模块包含 RouteCodex 的所有命令行工具实现，为用户提供了完整的系统管理接口。\n\n## 可用命令\n\n### 离线日志管理\n\n#### `offline-log` 命令\n\n管理离线日志捕获和分析功能：\n\n```bash\n# 启用离线日志\nroutecodex offline-log on\n\n# 禁用离线日志\nroutecodex offline-log off\n\n# 查看日志状态\nroutecodex offline-log status\n\n# 清理日志文件\nroutecodex offline-log clean\n```\n\n**功能特性**：\n- 模块级离线日志记录\n- 流水线级离线日志记录\n- 日志文件管理\n- 离线分析和报告\n\n### 试运行命令\n\n#### `dry-run` 命令\n\n提供配置验证和测试功能：\n\n```bash\n# 试运行配置验证\nroutecodex dry-run\n\n# 指定配置文件试运行\nroutecodex dry-run --config path/to/config.json\n\n# 启用详细输出\nroutecodex dry-run --verbose\n```\n\n**功能特性**：\n- 配置文件验证\n- 流水线初始化测试\n- 连接性检查\n- 性能基准测试\n\n## 架构设计\n\n### 命令结构\n\n```\ncommands/\n├── offline-log.ts    # 离线日志管理\n└── dry-run.ts        # 试运行和验证\n```\n\n### 核心组件\n\n1. **Commander.js 集成**\n   - 使用 Commander.js 框架构建 CLI\n   - 统一的命令参数处理\n   - 自动生成帮助信息\n\n2. **日志解析器**\n   - JSONL 日志解析\n   - 时间序列索引\n   - 日志文件扫描\n\n3. **状态管理**\n   - 配置状态跟踪\n   - 运行时监控\n   - 错误处理\n\n## 使用示例\n\n### 离线日志管理\n\n```bash\n# 启用模块级日志记录\nroutecodex offline-log on --module pipeline\n\n# 查看特定模块的日志\nroutecodex offline-log view --module pipeline --level debug\n\n# 导出日志报告\nroutecodex offline-log export --format json --output report.json\n```\n\n### 配置验证\n\n```bash\n# 基本配置验证\nroutecodex dry-run\n\n# 完整系统测试\nroutecodex dry-run --full-system\n\n# 性能测试\nroutecodex dry-run --performance\n```\n\n## 扩展开发\n\n### 添加新命令\n\n1. 在 `commands/` 目录创建新的命令文件\n2. 实现 Command 接口\n3. 在主 CLI 文件中注册命令\n4. 添加相应的测试用例\n\n### 命令模板\n\n```typescript\nimport { Command } from 'commander';\nimport chalk from 'chalk';\nimport ora from 'ora';\n\nexport const createMyCommand = (): Command => {\n  const command = new Command('my-command')\n    .description('我的命令描述')\n    .option('-v, --verbose', '详细输出')\n    .action(async (options) => {\n      const spinner = ora('处理中...').start();\n\n      try {\n        // 命令逻辑\n        spinner.succeed('完成');\n      } catch (error) {\n        spinner.fail('失败');\n        console.error(chalk.red('错误:'), error);\n      }\n    });\n\n  return command;\n};\n```\n\n## 配置和选项\n\n### 全局选项\n\n- `--config, -c`: 指定配置文件路径\n- `--verbose, -v`: 启用详细输出\n- `--quiet, -q`: 静默模式\n- `--help, -h`: 显示帮助信息\n\n### 命令特定选项\n\n每个命令都有其特定的选项，请使用 `--help` 查看详细信息。\n\n## 错误处理\n\n### 错误类型\n\n1. **配置错误**\n   - 配置文件不存在\n   - 配置格式错误\n   - 缺少必要参数\n\n2. **运行时错误**\n   - 连接失败\n   - 权限问题\n   - 资源不足\n\n3. **用户输入错误**\n   - 无效参数\n   - 格式错误\n   - 范围超出\n\n### 错误处理策略\n\n- 提供清晰的错误信息\n- 建议解决方案\n- 适当的退出码\n- 详细的日志记录\n\n## 最佳实践\n\n### 命令设计\n\n1. **一致性**: 保持命令和参数命名一致\n2. **可读性**: 使用清晰的描述和帮助信息\n3. **容错性**: 处理各种异常情况\n4. **性能**: 避免不必要的资源消耗\n\n### 用户体验\n\n1. **进度反馈**: 使用 spinner 显示进度\n2. **颜色编码**: 使用 chalk 库增强可读性\n3. **结构化输出**: JSON 或表格格式输出\n4. **交互确认**: 危险操作需要确认\n\n## 调试和测试\n\n### 调试模式\n\n```bash\n# 启用调试输出\nDEBUG=* routecodex my-command\n\n# 详细日志\nroutecodex my-command --verbose --debug\n```\n\n### 测试\n\n```bash\n# 运行命令测试\nnpm test -- commands\n\n# 集成测试\nnpm run test:integration\n```\n\n## 相关依赖\n\n- **commander**: CLI 框架\n- **chalk**: 终端颜色输出\n- **ora**: 终端 loading 效果\n- **fs**: 文件系统操作\n- **path**: 路径处理\n\n## 文档\n\n- [RouteCodex 主文档](../../README.md)\n- [CLI 使用指南](../../docs/cli.md)\n- [配置文档](../../docs/configuration.md)",
    "src/modules": "# 模块系统 (Module System)\n\n## 功能概述\nRouteCodex采用模块化架构，将系统功能分解为独立的、可配置的模块。每个模块都继承自基础模块类，具有统一的生命周期管理。模块系统是RouteCodex 4层管道架构的核心实现，支持高度可扩展和可维护的AI服务路由系统。\n\n> 构建顺序提示：若修改到 `sharedmodule/` 下的共享模块，请先在对应模块目录完成构建，再回到根目录构建整包（详见仓库根 `AGENTS.md`）。\n\n> 提示：本仓库聚焦 RouteCodex 路由/转换/流水线等能力，不包含站点注入式“拾取器/动作系统”等页面自动化脚本。如需该部分能力，请提供对应仓库路径或将其作为独立子模块引入。\n\n## 🆕 v2.1 模块系统重大更新\n\n### 顺序索引别名系统 (Key Alias System)\n整个模块系统现已全面支持新的**顺序索引别名系统**，这是为了解决配置中key字段特殊字符解析错误而设计的核心架构升级：\n\n#### 系统级改进\n- **配置模块**: 解析用户配置时自动生成key别名 (`key1`, `key2`, `key3`...)\n- **虚拟路由模块**: 接收别名格式的路由目标，在别名间进行负载均衡\n- **流水线模块**: 使用别名格式 (`provider.model.key1`) 查找配置\n- **负载均衡器**: 在 `key1`, `key2`, `key3` 等别名间进行轮询\n\n#### 核心优势\n1. **彻底解决解析错误**: key中不再出现特殊字符 (如 \".\")\n2. **统一抽象层**: 所有模块都通过别名系统工作\n3. **向后兼容**: 单key自动适配为 `key1`，多key自动展开\n4. **安全性提升**: 配置中只出现别名，不出现真实key\n\n#### 模块间协作流程\n```\n用户配置 (真实密钥数组) → UserConfigParser (生成别名映射) → \n虚拟路由模块 (别名负载均衡) → 流水线模块 (别名配置查找) → \nProvider模块 (使用真实密钥)\n```\n\n### 🆕 统一调试增强管理器 (Debug Enhancement Manager)\n**路径**: `src/modules/debug/debug-enhancement-manager.ts`\n\n#### 核心功能\n- **集中化调试管理**: 消除代码重复，统一度量收集\n- **跨模块标准化**: 所有模块共享统一的调试增强功能\n- **性能监控**: 自动化的性能指标和调用统计\n- **历史追踪**: 可配置的请求和错误历史记录\n\n#### 关键特性\n- **单例模式**: 全局统一的调试增强管理\n- **模块注册**: 支持多个模块独立注册调试增强\n- **度量收集**: 自动记录操作耗时、成功率等指标\n- **事件集成**: 与DebugEventBus无缝集成\n\n### 🆕 共享资源池管理器 (Resource Manager)\n**路径**: `src/modules/resource/resource-manager.ts`\n\n#### 核心功能\n- **统一资源池管理**: HTTP连接、数据库连接等统一管理\n- **服务实例共享**: TTL基础的服务实例共享和引用计数\n- **连接健康检查**: 自动化的连接健康检查和故障恢复\n- **性能优化**: 连接复用和资源生命周期管理\n\n#### 关键特性\n- **连接池**: 支持多种连接类型的池化管理\n- **引用计数**: 智能的服务实例生命周期管理\n- **健康监控**: 自动检测连接状态和健康度\n- **统计报告**: 详细的资源使用情况统计\n\n### 🆕 异步并行初始化器 (Parallel Initializer)\n**路径**: `src/modules/initialization/parallel-initializer.ts`\n\n#### 核心功能\n- **异步并行初始化**: 支持依赖关系解析的智能并行初始化\n- **拓扑排序**: 自动检测循环依赖和计算最优初始化顺序\n- **重试机制**: 指数退避和错误恢复策略\n- **性能追踪**: 详细的初始化性能统计和报告\n\n#### 关键特性\n- **依赖解析**: 自动检测模块间的依赖关系\n- **智能并行**: 基于依赖关系的最优并行执行\n- **错误恢复**: 强大的重试和故障恢复机制\n- **性能监控**: 完整的初始化耗时和成功率统计\n\n## 🏗️ 模块架构 (v2.1)\n\n### 核心基础设施模块\n\n#### 1. 统一调试增强管理器 (Debug Enhancement Manager)\n**路径**: `src/modules/debug/debug-enhancement-manager.ts`\n\n**核心职责**:\n- **全局调试管理**: 统一协调所有模块的调试增强功能\n- **性能度量**: 自动收集操作耗时、成功率等关键指标\n- **历史记录**: 管理请求和错误历史，支持配置化存储限制\n- **事件集成**: 与DebugEventBus无缝集成，支持实时调试事件\n\n**架构特性**:\n```typescript\n// 单例模式确保全局一致性\nconst debugManager = DebugEnhancementManager.getInstance(debugCenter);\n\n// 模块级调试增强注册\nconst enhancement = debugManager.registerEnhancement('pipeline-module', {\n  enabled: true,\n  performanceTracking: true,\n  requestLogging: true,\n  errorTracking: true,\n  maxHistorySize: 1000\n});\n\n// 自动度量收集\nenhancement.recordMetric('request_processing', 150, {\n  operationType: 'chat_completion',\n  result: 'success',\n  provider: 'qwen'\n});\n```\n\n#### 2. 共享资源池管理器 (Resource Manager)\n**路径**: `src/modules/resource/resource-manager.ts`\n\n**核心职责**:\n- **连接池管理**: HTTP连接、数据库连接等统一池化管理\n- **服务实例共享**: TTL基础的服务实例共享和引用计数管理\n- **健康监控**: 自动化连接健康检查和故障恢复机制\n- **性能优化**: 连接复用、资源预分配和生命周期优化\n\n**资源管理架构**:\n```typescript\n// 连接池创建\nconst httpPool = await resourceManager.createConnectionPool({\n  name: 'http-connections',\n  factory: () => new HttpClient(),\n  maxConnections: 50,\n  minConnections: 5,\n  idleTimeout: 30000,\n  healthCheck: (client) => client.ping(),\n  retryConfig: {\n    maxRetries: 3,\n    baseDelayMs: 1000,\n    maxDelayMs: 30000,\n    backoffMultiplier: 2\n  }\n});\n\n// 服务实例共享\nconst cacheService = await resourceManager.getSharedService(\n  'cache-service',\n  async () => new CacheService(),\n  { \n    ttl: 300000, // 5分钟TTL\n    maxInstances: 3,\n    cleanupInterval: 60000\n  }\n);\n```\n\n#### 3. 异步并行初始化器 (Parallel Initializer)\n**路径**: `src/modules/initialization/parallel-initializer.ts`\n\n**核心职责**:\n- **依赖解析**: 自动检测模块间的依赖关系和循环依赖\n- **拓扑排序**: 计算最优的并行初始化顺序\n- **智能并行**: 基于依赖关系的最优并行执行策略\n- **错误恢复**: 指数退避重试和故障隔离机制\n\n**初始化流程架构**:\n```typescript\n// 初始化任务定义\ninitializer.addTask({\n  id: 'database-connection',\n  name: 'Database Connection Pool',\n  dependencies: [], // 无依赖，可立即启动\n  priority: 1, // 高优先级\n  initialize: async () => {\n    const dbPool = await createDatabasePool();\n    return { dbPool, status: 'connected' };\n  },\n  healthCheck: async (result) => {\n    return await result.dbPool.ping();\n  },\n  retryConfig: {\n    maxRetries: 5,\n    baseDelayMs: 2000,\n    maxDelayMs: 60000\n  }\n});\n\n// 依赖其他任务的任务\ninitializer.addTask({\n  id: 'cache-service',\n  name: 'Distributed Cache Service',\n  dependencies: ['database-connection'], // 依赖数据库连接\n  priority: 2,\n  initialize: async (dependencies) => {\n    const cache = new CacheService(dependencies['database-connection'].dbPool);\n    await cache.initialize();\n    return { cache };\n  }\n});\n\n// 执行并行初始化\nconst results = await initializer.initializeAll();\n```\n\n#### 4. 虚拟路由模块 (Virtual Router) - v2.1 别名系统核心\n**路径**: `src/modules/virtual-router/`\n\n**核心职责**:\n- **智能路由**: 基于请求特征的7类路由池管理\n- **别名负载均衡**: 在 `key1`, `key2`, `key3` 等别名间进行智能轮询\n- **协议转换**: OpenAI/Anthropic协议的无缝转换\n- **故障转移**: 自动检测Provider故障并切换路由目标\n\n**别名系统架构**:\n```typescript\n// 路由目标定义 (使用别名)\nconst routeTargets = {\n  default: [\n    {\n      providerId: 'qwen',\n      modelId: 'qwen3-coder-plus',\n      keyId: 'key1', // 使用别名，不是真实密钥\n      inputProtocol: 'openai',\n      outputProtocol: 'openai'\n    },\n    {\n      providerId: 'qwen', \n      modelId: 'qwen3-coder-plus',\n      keyId: 'key2', // 第二个别名\n      inputProtocol: 'openai',\n      outputProtocol: 'openai'\n    }\n  ]\n};\n\n// 别名到真实密钥的映射由配置系统在运行时解析\n// 虚拟路由模块只处理别名，不接触真实密钥\n```\n\n#### 5. 配置管理模块 (Config Manager) - v2.1 别名系统支持\n**路径**: `src/modules/config-manager/`\n\n**核心职责**:\n- **配置热重载**: 配置文件变更时自动重新加载\n- **别名生成**: 解析用户配置时自动生成密钥别名映射\n- **配置合并**: 深度合并用户配置和系统默认配置\n- **验证优化**: 配置格式验证和性能优化\n\n**别名系统支持**:\n```typescript\n// 配置管理器自动处理别名生成\nconst configManager = new ConfigManagerModule();\nawait configManager.initialize({\n  userConfigPath: '~/.routecodex/config.json',\n  systemConfigPath: './config/modules.json',\n  enableAliasGeneration: true, // 启用别名生成\n  aliasPrefix: 'key' // 使用 key1, key2, key3...格式\n});\n\n// 用户配置中的真实密钥\nconst userConfig = {\n  providers: {\n    openai: {\n      apiKey: [\"sk-real-key-1\", \"sk-real-key-2\", \"sk-real-key-3\"]\n    }\n  }\n};\n\n// 生成的合并配置 (使用别名)\nconst mergedConfig = {\n  providers: {\n    openai: {\n      apiKey: [\"sk-real-key-1\", \"sk-real-key-2\", \"sk-real-key-3\"], // 保留真实密钥\n      _aliasMapping: { // 别名映射 (内部使用)\n        \"key1\": \"sk-real-key-1\",\n        \"key2\": \"sk-real-key-2\", \n        \"key3\": \"sk-real-key-3\"\n      }\n    }\n  }\n};\n```\n\n### 流水线模块系统 (Pipeline System)\n\n#### 核心流水线模块\n**路径**: `src/modules/pipeline/`\n\n**架构职责**:\n- **4层管道实现**: LLMSwitch → Workflow → Compatibility → Provider\n- **预创建流水线**: 初始化时创建所有需要的流水线，避免运行时开销\n- **配置驱动**: JSON配置定义转换规则和协议适配\n- **工具调用**: 完整的OpenAI兼容工具调用支持\n\n**核心组件**:\n```\npipeline/\n├── core/                     # 核心流水线实现\n│   ├── base-pipeline.ts      # 基础流水线抽象\n│   ├── pipeline-manager.ts   # 流水线管理器\n│   └── openai-pipeline.ts    # OpenAI流水线实现\n├── modules/                  # 具体模块实现\n│   ├── llm-switch/          # 协议转换层\n│   ├── workflow/            # 流式控制层  \n│   ├── compatibility/       # 格式转换层\n│   └── providers/           # Provider实现层\n└── types/                   # 类型定义\n```\n\n#### 流水线执行流程\n```typescript\n// 请求处理流程\nconst pipeline = pipelineManager.selectPipeline({\n  providerId: 'qwen',\n  modelId: 'qwen3-coder-plus'\n});\n\n// 4层处理: LLMSwitch → Workflow → Compatibility → Provider\nconst response = await pipeline.processRequest(request);\n\n// 1. LLMSwitch: 协议分析和路由分类\n// 2. Workflow: 流式/非流式转换控制\n// 3. Compatibility: 字段映射和工具调用适配\n// 4. Provider: HTTP请求和认证管理\n```\n\n### 未实现模块系统 (Unimplemented Module System) - v2.1 集成增强\n\n#### 系统级未实现功能管理\n**路径**: `src/modules/unimplemented-module.ts` 及相关文件\n\n**核心职责**:\n- **标准化响应**: 统一的501 Not Implemented响应格式\n- **使用跟踪**: 自动记录所有未实现功能调用\n- **分析推荐**: ML算法分析使用模式并推荐实现优先级\n- **工厂管理**: 集中化的未实现模块生命周期管理\n\n#### 与核心模块集成\n```typescript\n// 增强型Provider管理器自动集成\nconst providerManager = new EnhancedProviderManager(config, {\n  enableUnimplementedProviders: true,\n  autoCreateUnimplemented: true,\n  enableAnalytics: true\n});\n\n// 当请求不支持的Provider时，自动创建未实现Provider\nconst unsupportedProvider = providerManager.getProvider('unsupported-type');\n// 返回: { error: { message: 'Not implemented', type: 'not_implemented' } }\n\n// 获取详细的使用分析\nconst analytics = new UnimplementedModuleAnalytics(factory);\nconst recommendations = analytics.getImplementationRecommendations();\n// 返回按优先级排序的实现建议列表\n```\n\n## 🆕 v2.1 模块系统特性\n\n### 核心增强功能\n- **顺序索引别名系统**: 彻底解决配置中密钥特殊字符解析问题\n- **统一调试增强**: 全局调试管理，消除代码重复\n- **共享资源池**: HTTP连接和服务实例的智能管理\n- **并行初始化**: 基于依赖关系的最优并行初始化策略\n- **4层流水线**: 完整的LLMSwitch → Workflow → Compatibility → Provider架构\n\n### 性能优化\n- **预创建流水线**: 避免运行时动态创建开销\n- **连接池管理**: 减少连接建立和销毁开销\n- **并行初始化**: 显著缩短系统启动时间\n- **内存优化**: 智能的资源生命周期管理和垃圾回收\n\n### 可扩展性\n- **模块化架构**: 每个模块可独立替换和升级\n- **插件系统**: 支持自定义模块和扩展\n- **配置驱动**: JSON配置定义模块行为和参数\n- **接口标准化**: 统一的模块接口和生命周期管理\n\n## 🏗️ 模块系统架构 (v2.1)\n\n### 系统架构图\n```\n用户请求 → 虚拟路由模块 → 流水线模块 → Provider模块 → AI服务\n     ↓           ↓            ↓           ↓          ↓\n  路由分类    别名负载均衡   4层处理    HTTP通信    模型处理\n  (7个池)     (key1,key2...) (LLMSwitch→Workflow→Compatibility→Provider)\n```\n\n### 核心组件交互\n1. **配置管理模块**: 解析用户配置，生成别名映射\n2. **虚拟路由模块**: 基于别名进行智能路由和负载均衡\n3. **流水线模块**: 执行4层处理流程\n4. **调试增强管理器**: 全局调试和性能监控\n5. **资源管理器**: 连接池和服务实例管理\n6. **并行初始化器**: 模块依赖解析和并行启动\n\n### 数据流架构\n```\n配置流:\n用户配置 → UserConfigParser → ConfigMerger → 合并配置 → 各模块\n\n请求流:\nHTTP请求 → 虚拟路由 → 流水线选择 → 4层处理 → Provider调用 → 响应返回\n\n调试流:\n模块操作 → 调试增强管理器 → 度量收集 → 历史记录 → 性能报告\n```\n\n## 📁 文件结构 (v2.1)\n\n### 核心基础设施\n```\nsrc/modules/\n├── debug/                          # 调试增强管理\n│   └── debug-enhancement-manager.ts\n├── resource/                       # 资源池管理\n│   └── resource-manager.ts\n├── initialization/                 # 并行初始化\n│   └── parallel-initializer.ts\n├── virtual-router/                 # 虚拟路由 (别名系统核心)\n│   ├── virtual-router-module.ts\n│   ├── route-target-pool.ts\n│   ├── pipeline-config-manager.ts\n│   └── protocol-manager.ts\n├── config-manager/                 # 配置管理 (别名生成)\n│   ├── config-manager-module.ts\n│   ├── merged-config-generator.ts\n│   └── config-watcher.ts\n├── pipeline/                       # 4层流水线系统\n│   ├── core/                       # 核心流水线实现\n│   ├── modules/                    # 具体模块实现\n│   ├── types/                      # 类型定义\n│   └── utils/                      # 工具函数\n└── unimplemented-module.ts         # 未实现功能管理\n```\n\n### 文件详细说明\n\n#### `debug-enhancement-manager.ts`\n- **用途**: 统一调试增强管理器实现\n- **导出**: `DebugEnhancementManager`, `DebugEnhancement`, `DebugEnhancementConfig`\n- **依赖**: `rcc-debugcenter`, `rcc-errorhandling`, `Logger`\n- **关键类**: `DebugEnhancementManager` (单例)\n- **核心功能**: 全局调试管理、性能度量、历史记录\n\n#### `resource-manager.ts`\n- **用途**: 共享资源池管理器实现\n- **导出**: `ResourceManager`, `ConnectionPool`, `ServiceInstance`\n- **依赖**: `rcc-errorhandling`, `Logger`, `Node.js` 内置模块\n- **关键类**: `ResourceManager` (单例)\n- **核心功能**: 连接池管理、服务共享、健康监控\n\n#### `parallel-initializer.ts`\n- **用途**: 异步并行初始化器实现\n- **导出**: `ParallelInitializer`, `InitializationTask`, `InitializationResult`\n- **依赖**: `rcc-errorhandling`, `Logger`, ` topological-sort` 算法\n- **关键类**: `ParallelInitializer`\n- **核心功能**: 依赖解析、并行执行、错误恢复\n\n#### `virtual-router-module.ts`\n- **用途**: 虚拟路由模块主实现 (别名系统核心)\n- **导出**: `VirtualRouterModule`, `RouteTarget`, `RoutingResult`\n- **依赖**: 配置管理器、流水线管理器、协议管理器\n- **关键类**: `VirtualRouterModule`\n- **核心功能**: 智能路由、别名负载均衡、协议转换\n\n#### `config-manager-module.ts`\n- **用途**: 配置管理模块 (别名生成器)\n- **导出**: `ConfigManagerModule`, `ConfigMergeResult`\n- **依赖**: `UserConfigParser`, `ConfigMerger`, `ConfigWatcher`\n- **关键类**: `ConfigManagerModule`\n- **核心功能**: 配置解析、别名生成、热重载支持\n\n## Usage\n\n### Basic Module Creation\n\n```typescript\nimport { RCCUnimplementedModule } from './modules/unimplemented-module.js';\n\nconst config = {\n  moduleId: 'my-feature',\n  moduleName: 'My Feature Module',\n  description: 'My unimplemented feature',\n  customMessage: 'This feature is coming soon!',\n  logLevel: 'info'\n};\n\nconst module = new RCCUnimplementedModule(config);\nawait module.initialize();\n\n// Handle unimplemented calls\nconst response = await module.handleUnimplementedCall('myMethod', {\n  callerId: 'user-123',\n  context: { requestType: 'chat' }\n});\n```\n\n### Factory Usage\n\n```typescript\nimport { UnimplementedModuleFactory } from './modules/unimplemented-module-factory.js';\n\nconst factory = UnimplementedModuleFactory.getInstance();\nawait factory.initialize();\n\n// Create unimplemented module\nconst module = await factory.createModule({\n  moduleId: 'analytics-module',\n  moduleName: 'Analytics Module'\n});\n\n// Get usage statistics\nconst stats = factory.getStats();\nconsole.log(`Total unimplemented calls: ${stats.totalCalls}`);\n\n// Get called modules for prioritization\nconst calledModules = factory.getCalledModules();\n```\n\n### Provider Integration\n\n```typescript\nimport { EnhancedProviderManager } from './core/enhanced-provider-manager.js';\n\nconst config = {\n  providers: {\n    'openai': { /* regular provider config */ },\n    'custom-provider': {\n      type: 'unsupported-type', // Will create unimplemented provider\n      enabled: true\n    }\n  }\n};\n\nconst manager = new EnhancedProviderManager(config, {\n  enableUnimplementedProviders: true,\n  autoCreateUnimplemented: true\n});\n\nawait manager.initialize();\n\n// Unimplemented provider is automatically created\nconst provider = manager.getProvider('custom-provider');\nconst response = await provider.processChatCompletion(request);\n```\n\n### Analytics and Reporting\n\n```typescript\nimport { UnimplementedModuleAnalytics } from './modules/unimplemented-module-analytics.js';\n\nconst analytics = new UnimplementedModuleAnalytics(factory, {\n  enabled: true,\n  enableTrendAnalysis: true,\n  enableCallerAnalysis: true\n});\n\n// Get comprehensive analytics\nconst data = analytics.getAnalytics();\nconsole.log(`Total unimplemented calls: ${data.totalUnimplementedCalls}`);\nconsole.log(`Most called module: ${data.mostCalledModules[0]?.moduleId}`);\n\n// Get implementation recommendations\nconst recommendations = analytics.getImplementationRecommendations();\nrecommendations.forEach(rec => {\n  console.log(`${rec.moduleId}: Priority ${rec.priority} (${rec.estimatedEffort} effort, ${rec.impact} impact)`);\n});\n\n// Export analytics\nconst csvData = analytics.exportAnalytics('csv');\nconst report = analytics.exportAnalytics('report');\n```\n\n### Unified Components Usage\n\n#### Debug Enhancement Manager Usage\n\n```typescript\nimport { DebugEnhancementManager } from './modules/debug/debug-enhancement-manager.js';\nimport { DebugCenter } from './utils/external-mocks.js';\n\n// Initialize debug enhancement manager\nconst debugCenter = DebugCenter.getInstance();\nconst debugManager = DebugEnhancementManager.getInstance(debugCenter);\nawait debugManager.initialize();\n\n// Register enhancement for a module\nconst enhancement = debugManager.registerEnhancement('my-module', {\n  enabled: true,\n  consoleLogging: true,\n  debugCenter: true,\n  performanceTracking: true,\n  requestLogging: true,\n  errorTracking: true,\n  maxHistorySize: 100\n});\n\n// Record metrics\nenhancement.recordMetric('operation_name', 150, {\n  operationType: 'api_call',\n  result: 'success'\n});\n\n// Add to history\nenhancement.addRequestToHistory({\n  requestId: 'req-123',\n  endpoint: '/api/chat',\n  timestamp: Date.now()\n});\n\n// Get metrics statistics\nconst stats = enhancement.getMetricsStats();\nconsole.log(`Operation count: ${stats.get('operation_name')?.count}`);\n\n// Get system-wide debug status\nconst systemStatus = debugManager.getSystemDebugStatus();\n```\n\n#### Resource Manager Usage\n\n```typescript\nimport { ResourceManager } from './modules/resource/resource-manager.js';\n\n// Get resource manager instance\nconst resourceManager = ResourceManager.getInstance();\n\n// Create a connection pool\nconst pool = await resourceManager.createConnectionPool({\n  name: 'http-connections',\n  factory: () => new HttpClient(),\n  maxConnections: 10,\n  minConnections: 2,\n  healthCheck: (client) => client.ping(),\n  retryConfig: {\n    maxRetries: 3,\n    baseDelayMs: 1000,\n    maxDelayMs: 30000\n  }\n});\n\n// Get connection from pool\nconst connection = await pool.getConnection();\ntry {\n  // Use connection\n  const result = await connection.request('/api/data');\n} finally {\n  // Return connection to pool\n  await pool.releaseConnection(connection);\n}\n\n// Get shared service instance with TTL\nconst service = await resourceManager.getSharedService(\n  'cache-service',\n  async () => new CacheService(),\n  { ttl: 300000 } // 5 minutes TTL\n);\n\n// Get resource usage statistics\nconst stats = resourceManager.getResourceStatistics();\nconsole.log(`Active connections: ${stats.connectionPools.get('http-connections')?.activeConnections}`);\n```\n\n#### Parallel Initializer Usage\n\n```typescript\nimport { ParallelInitializer } from './modules/initialization/parallel-initializer.js';\n\n// Create parallel initializer\nconst initializer = new ParallelInitializer({\n  maxConcurrentTasks: 4,\n  maxRetries: 3,\n  baseDelayMs: 1000,\n  maxDelayMs: 30000,\n  enablePerformanceTracking: true,\n  enableHealthChecks: true\n});\n\n// Define initialization tasks with dependencies\ninitializer.addTask({\n  id: 'database',\n  name: 'Database Connection',\n  dependencies: [],\n  initialize: async () => {\n    const db = new Database();\n    await db.connect();\n    return { db };\n  },\n  healthCheck: async () => {\n    // Check database connectivity\n    return await checkDatabaseHealth();\n  }\n});\n\ninitializer.addTask({\n  id: 'cache',\n  name: 'Cache Service',\n  dependencies: ['database'], // Depends on database\n  initialize: async () => {\n    const cache = new CacheService();\n    await cache.initialize();\n    return { cache };\n  }\n});\n\ninitializer.addTask({\n  id: 'api-server',\n  name: 'API Server',\n  dependencies: ['database', 'cache'], // Depends on both\n  initialize: async () => {\n    const server = new APIServer();\n    await server.start();\n    return { server };\n  }\n});\n\n// Execute parallel initialization\nconst results = await initializer.initializeAll();\n\n// Check initialization results\nfor (const [taskId, result] of results.entries()) {\n  if (result.success) {\n    console.log(`${taskId}: Initialized successfully in ${result.duration}ms`);\n  } else {\n    console.error(`${taskId}: Failed - ${result.error}`);\n  }\n}\n\n// Get initialization statistics\nconst stats = initializer.getInitializationStatistics();\nconsole.log(`Total tasks: ${stats.totalTasks}, Successful: ${stats.successfulTasks}, Failed: ${stats.failedTasks}`);\n```\n\n## Configuration\n\n### Module Configuration\n\n```typescript\ninterface UnimplementedModuleConfig {\n  moduleId: string;                    // Unique module identifier\n  moduleName: string;                  // Human-readable name\n  description?: string;                // Module description\n  logLevel?: 'debug' | 'info' | 'warn' | 'error'; // Logging level\n  maxCallerHistory?: number;           // Max caller info to retain\n  customMessage?: string;              // Custom unimplemented message\n}\n```\n\n### Factory Configuration\n\n```typescript\ninterface UnimplementedModuleFactoryConfig {\n  enabled: boolean;                    // Enable factory functionality\n  maxModules?: number;                 // Maximum modules to manage\n  cleanupInterval?: number;            // Cleanup interval in ms\n  maxModuleAge?: number;               // Max age before cleanup in ms\n  defaultLogLevel?: string;            // Default logging level\n  defaultMaxCallerHistory?: number;    // Default caller history size\n  enableMetrics?: boolean;             // Enable metrics collection\n  enableAutoCleanup?: boolean;         // Enable automatic cleanup\n}\n```\n\n### Predefined Configurations\n\n```typescript\n// Development environment\nconst devConfig = UNIMPLEMENTED_CONFIG_PRESETS.development;\n\n// Production environment  \nconst prodConfig = UNIMPLEMENTED_CONFIG_PRESETS.production;\n\n// Minimal configuration\nconst minimalConfig = UNIMPLEMENTED_CONFIG_PRESETS.minimal;\n\n// Comprehensive configuration\nconst comprehensiveConfig = UNIMPLEMENTED_CONFIG_PRESETS.comprehensive;\n```\n\n## Statistics and Analytics\n\n### Module-Level Statistics\n\nEach unimplemented module tracks:\n- Total call count\n- First and last call timestamps\n- Caller information (ID, method, context, timestamp)\n- Unique caller count\n- Average calls per day\n\n### Factory-Level Statistics\n\nThe factory provides:\n- Total modules managed\n- Total unimplemented calls across all modules\n- Modules organized by type\n- Most called modules ranking\n- Called vs unused modules identification\n\n### Analytics Features\n\nThe analytics system provides:\n- **Usage Trends**: Hourly, daily, weekly, monthly call patterns\n- **Caller Analysis**: Top callers, caller patterns, context analysis\n- **Implementation Priority**: Algorithm-based priority scoring\n- **Recommendations**: Implementation suggestions with effort/impact assessment\n- **Export Options**: JSON, CSV, and human-readable report formats\n\n## Integration Points\n\n### Provider Manager Integration\n\nThe `EnhancedProviderManager` automatically:\n- Creates unimplemented providers for unsupported provider types\n- Maintains compatibility with existing provider interfaces\n- Provides enhanced statistics including unimplemented usage\n- Supports seamless fallback mechanisms\n\n### Error Handling Integration\n\nAll unimplemented modules integrate with:\n- `rcc-errorhandling` for consistent error processing\n- `rcc-debugcenter` for debug event publishing\n- Standard logging through the `Logger` utility\n\n### Configuration Integration\n\nThe system integrates with RouteCodex's configuration system:\n- Type-safe configuration interfaces\n- Environment-specific presets\n- Runtime configuration updates\n- Validation and error handling\n\n## Module Dependencies\n\n### Internal Dependencies\n- **rcc-basemodule**: Base module functionality and interfaces\n- **rcc-debugcenter**: Debug event publishing and monitoring\n- **rcc-errorhandling**: Consistent error processing and reporting\n- **Logger**: Centralized logging utility\n\n### External Dependencies\n- Uses existing RouteCodex infrastructure\n- No additional external dependencies required\n- Fully compatible with current module system\n\n## 🆕 模块系统使用示例 (v2.1)\n\n### 完整系统初始化流程\n```typescript\nimport { ParallelInitializer } from './initialization/parallel-initializer';\nimport { ConfigManagerModule } from './config-manager/config-manager-module';\nimport { VirtualRouterModule } from './virtual-router/virtual-router-module';\nimport { DebugEnhancementManager } from './debug/debug-enhancement-manager';\nimport { ResourceManager } from './resource/resource-manager';\n\n// 1. 初始化调试增强管理器\nconst debugManager = DebugEnhancementManager.getInstance(debugCenter);\nawait debugManager.initialize();\n\n// 2. 初始化资源管理器\nconst resourceManager = ResourceManager.getInstance();\nawait resourceManager.initialize();\n\n// 3. 创建并行初始化器\nconst initializer = new ParallelInitializer({\n  maxConcurrentTasks: 4,\n  enablePerformanceTracking: true,\n  enableHealthChecks: true\n});\n\n// 4. 添加初始化任务\ninitializer.addTask({\n  id: 'config-manager',\n  name: 'Configuration Manager',\n  dependencies: [],\n  initialize: async () => {\n    const configManager = new ConfigManagerModule();\n    await configManager.initialize({\n      userConfigPath: '~/.routecodex/config.json',\n      systemConfigPath: './config/modules.json',\n      enableAliasGeneration: true\n    });\n    return { configManager };\n  }\n});\n\ninitializer.addTask({\n  id: 'virtual-router',\n  name: 'Virtual Router',\n  dependencies: ['config-manager'],\n  initialize: async (deps) => {\n    const configManager = deps['config-manager'].configManager;\n    const config = await configManager.getMergedConfig();\n    \n    const virtualRouter = new VirtualRouterModule();\n    await virtualRouter.initialize({\n      routeTargets: config.virtualrouter.routeTargets,\n      pipelineConfigs: config.virtualrouter.pipelineConfigs,\n      enableAliasSupport: true\n    });\n    return { virtualRouter };\n  }\n});\n\n// 5. 执行并行初始化\nconst results = await initializer.initializeAll();\n\n// 6. 获取初始化结果\nconst configManager = results.get('config-manager')?.configManager;\nconst virtualRouter = results.get('virtual-router')?.virtualRouter;\n\n// 7. 系统就绪，可以处理请求\nconst response = await virtualRouter.executeRequest({\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello!' }],\n  routeCategory: 'default'\n});\n```\n\n### 别名系统实际应用\n```typescript\n// 用户配置 (包含真实密钥)\nconst userConfig = {\n  virtualrouter: {\n    providers: {\n      openai: {\n        apiKey: [\"sk-proj-xxxxx\", \"sk-proj-yyyyy\", \"sk-proj-zzzzz\"],\n        models: { \"gpt-4\": {} }\n      }\n    },\n    routing: {\n      default: [\"openai.gpt-4\"],           // 使用全部密钥 (自动展开)\n      premium: [\"openai.gpt-4.key1\"],      // 仅使用第1个密钥\n      backup: [\"openai.gpt-4.key2\", \"openai.gpt-4.key3\"] // 使用第2、3个密钥\n    }\n  }\n};\n\n// 系统运行时 (使用别名进行负载均衡)\n// 虚拟路由模块在 key1, key2, key3 之间进行轮询\n// 配置查找使用 openai.gpt-4.key1, openai.gpt-4.key2 等格式\n// 真实密钥在最后一刻才由Provider模块使用\n```\n\n## Recent Updates\n\n- **Analytics Engine**: Added comprehensive usage analytics with trend analysis\n- **Performance Optimization**: Improved memory efficiency and call processing speed\n- **Export Functionality**: Added JSON, CSV, and report export capabilities\n- **Integration Testing**: Enhanced test coverage for all integration points\n- **Documentation**: Updated with detailed file descriptions and usage examples\n\n## Testing\n\nComprehensive test suite includes:\n- Unit tests for all core components\n- Integration tests with provider manager\n- Performance tests for high-volume scenarios\n- Error handling and edge case coverage\n- Configuration validation tests\n\nRun tests:\n```bash\nnpm test tests/modules/unimplemented-module.test.ts\n```\n\n## Performance Considerations\n\n- **Minimal Overhead**: Unimplemented calls add minimal latency (< 5ms)\n- **Memory Efficient**: Caller history with configurable limits\n- **Scalable**: Factory pattern supports thousands of modules\n- **Cleanup**: Automatic cleanup of old/unused modules\n- **Async Processing**: Non-blocking analytics aggregation\n\n## Module State Tracking\n\n### Usage Statistics\nEach module automatically tracks:\n- ✅ Total call count with atomic increments\n- ✅ First/last call timestamps with automatic updates\n- ✅ Caller information with configurable history limits\n- ✅ Unique caller identification and counting\n- ✅ Method-level call distribution\n\n### Health Monitoring\n- ✅ Module initialization status tracking\n- ✅ Error rate monitoring via error handling integration\n- ✅ Debug event publishing for external monitoring\n- ✅ Automatic health check responses\n\n### Analytics Coverage\n- ✅ Real-time usage trend calculation\n- ✅ Hourly/daily/weekly/monthly aggregation\n- ✅ Caller behavior pattern analysis\n- ✅ Implementation priority scoring with multiple algorithms\n- ✅ Export functionality in multiple formats\n\n## Maintenance Notes\n\n### File Modification Guidelines\n- **Core Module** (`unimplemented-module.ts`): Maintain backward compatibility\n- **Factory** (`unimplemented-module-factory.ts`): Ensure thread-safety for concurrent access\n- **Analytics** (`unimplemented-module-analytics.ts`): Optimize for performance with large datasets\n- **Documentation** (`README.md`): Update when adding new features or changing behavior\n\n### Testing Requirements\n- Unit tests must cover all public methods\n- Integration tests required for factory and provider interactions\n- Performance tests for high-volume scenarios (>1000 calls/second)\n- Memory leak tests for long-running instances\n\n## Best Practices\n\n1. **Use Descriptive Names**: Clear module IDs and names for better analytics\n2. **Configure Appropriately**: Use environment-specific configurations\n3. **Monitor Usage**: Regularly review analytics for implementation priorities\n4. **Set Reasonable Limits**: Configure caller history and cleanup settings\n5. **Handle Errors Gracefully**: Always wrap module operations in try-catch\n\n## Migration Guide\n\n### From Existing Code\n\nReplace existing unimplemented stubs:\n\n```typescript\n// Before\nfunction unimplementedFunction() {\n  throw new Error('Not implemented');\n}\n\n// After\nconst response = await unimplementedModule.handleUnimplementedCall('functionName', {\n  callerId: 'caller-info'\n});\n```\n\n### Gradual Adoption\n\n1. Start with high-traffic areas\n2. Use factory for centralized management\n3. Enable analytics gradually\n4. Review usage patterns regularly\n5. Implement based on priority recommendations\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Module Not Found**: Check module ID and factory initialization\n2. **Statistics Not Updating**: Verify analytics configuration and aggregation intervals\n3. **Memory Usage**: Adjust caller history limits and cleanup settings\n4. **Performance**: Review log levels and analytics granularity\n\n### Debug Information\n\nEnable debug logging to troubleshoot:\n```typescript\nconst config = {\n  logLevel: 'debug',\n  enableMetrics: true\n};\n```\n\n## 📊 性能指标 (v2.1)\n\n### 系统性能\n- **初始化时间**: < 2秒 (16个模块并行初始化)\n- **请求延迟**: < 5ms (路由决策 + 流水线选择)\n- **别名解析**: < 0.1ms (密钥别名映射)\n- **配置热重载**: < 500ms (配置文件变更检测和重载)\n\n### 资源使用\n- **内存占用**: ~50MB (基础系统 + 16个模型配置)\n- **连接池**: 支持50个并发HTTP连接\n- **调试历史**: 可配置，默认1000条记录\n- **错误追踪**: 自动清理，保持最近1000条错误\n\n### 可靠性指标\n- **初始化成功率**: > 99.9% (健康检查保障)\n- **故障恢复时间**: < 1秒 (自动故障转移)\n- **配置验证**: 100% (所有配置变更都经过验证)\n- **错误处理**: 100% (无静默失败，所有错误都上报)\n\n## 🚀 版本信息 (v2.1)\n- **当前版本**: v2.1 (Key Alias System & Infrastructure Enhancement)\n- **构建状态**: ✅ ESM兼容，✅ 测试通过，✅ 生产就绪\n- **新增特性**:\n  - ✅ 顺序索引别名系统 (解决密钥解析错误)\n  - ✅ 统一调试增强管理器 (消除代码重复)\n  - ✅ 共享资源池管理器 (连接复用优化)\n  - ✅ 异步并行初始化器 (启动性能提升)\n  - ✅ 4层流水线架构 (LLMSwitch→Workflow→Compatibility→Provider)\n  - ✅ 16个真实AI模型支持 (qwen, iflow, modelscope)\n  - ✅ 56个流水线配置优化 (别名系统兼容)\n- **性能评级**: ⚡ 优秀 (综合性能提升30%)\n- **架构成熟度**: 🏆 生产级 (支持高并发和故障恢复)\n\n## Future Enhancements\n\n- Machine learning-based priority algorithms\n- Real-time usage dashboards\n- Integration with project management tools\n- Automated implementation stub generation\n- Usage-based alerting and notifications\n",
    "src/modules/dry-run": "# Dry-Run Module (Interfaces)\n\n提供干运行（Dry-Run）相关的公共接口与类型，用于路由/流水线离线评估与可观测性。\n\n## 内容\n- `dry-run-interface.ts`：请求/响应、路由决策、字段转换与性能估计等结构。\n\n## 用法\n```ts\nimport type { DryRunResponse } from '../dry-run/dry-run-interface.js';\n```\n\n",
    "src/modules/pipeline": "# Pipeline Module\n\n基于RouteCodex 9大核心架构原则的流水线模块，提供可组合的请求处理流水线，支持协议转换、流式控制和Provider适配。\n\n## 概述\n\n流水线模块是RouteCodex系统的核心请求处理组件，严格遵循9大架构原则，负责将路由后的请求通过预定义的处理流水线转换为Provider可处理的格式，并将响应转换回客户端期望的格式。\n\n### 🚨 架构原则合规性\n\n本模块严格遵循RouteCodex 9大核心架构原则：\n\n| 架构原则 | 实施状态 | 关键实现 |\n|---------|---------|----------|\n| 原则1: 统一工具处理 | ✅ 完全合规 | 所有工具调用通过llmswitch-core处理 |\n| 原则2: 最小兼容层 | ✅ 完全合规 | Compatibility层仅处理provider特定字段 |\n| 原则3: 统一工具引导 | ✅ 完全合规 | 工具指引通过llmswitch-core统一管理 |\n| 原则4: 快速死亡 | ✅ 完全合规 | 错误立即暴露，无fallback逻辑 |\n| 原则5: 暴露问题 | ✅ 完全合规 | 结构化日志，完整错误上下文 |\n| 原则6: 清晰解决 | ✅ 完全合规 | 单一处理路径，确定性行为 |\n| 原则7: 功能分离 | ✅ 完全合规 | 模块职责明确，无功能重叠 |\n| 原则8: 配置驱动 | ✅ 完全合规 | 完全配置化，无硬编码 |\n| 原则9: 模块化 | ✅ 完全合规 | 文件大小控制，功能分拆 |\n\n## 核心特性\n\n### 🔧 模块化架构 (原则7: 功能分离)\n\n严格遵循功能分离原则，每个模块职责单一明确：\n\n- **LLMSwitch**: 协议转换层（目前专注OpenAI透传）\n  - **不处理**: 工具调用转换、Provider特定字段\n  - **专注**: 协议格式转换、请求规范化\n\n- **Workflow**: 流式/非流式转换控制\n  - **不处理**: 业务逻辑、数据格式转换\n  - **专注**: 流式控制、缓冲管理\n\n- **Compatibility**: 协议内字段适配和Provider特定处理\n  - **不处理**: 工具调用转换（原则2: 最小兼容层）\n  - **专注**: Provider特定字段标准化、reasoning_content处理\n\n- **Provider**: 具体供应商实现（支持Qwen、LM Studio等）\n  - **不处理**: 数据格式转换、工具逻辑\n  - **专注**: HTTP通信、认证管理、连接管理\n\n### 🚀 预创建流水线\n- 初始化时创建所有需要的流水线\n- 路由时直接选择对应流水线\n- 避免运行时动态创建开销\n\n### 📋 配置驱动 (原则8: 配置驱动)\n- **完全配置化**: Provider配置中直接指定Compatibility规则\n- **无硬编码**: 基于JSON配置的字段转换，所有参数可配置\n- **类型安全**: 统一的转换表格式，配置验证机制\n- **动态更新**: LM Studio Tools API自动适配，支持配置热更新\n\n### 🛡️ 错误处理集成 (原则4-5: 快速死亡 & 暴露问题)\n- **快速失败**: 集成ErrorHandlingCenter，错误立即暴露\n- **无静默失败**: 所有错误都上报，提供完整上下文\n- **清晰解决方案**: 认证失败自动恢复，单一处理路径\n- **调试友好**: 结构化日志记录，包含完整错误信息和堆栈跟踪\n\n## 近期变更（GLM 1210 兼容）\n\n- 历史消息清理：对发往 GLM 的最终载荷，统一移除“非最后一条”消息上的 `assistant.tool_calls` 字段（最后一条若存在可保留）。此转换不禁用工具功能，也不删除上下文，仅去除会导致 GLM 1210 的历史痕迹字段。\n- 工具与上下文保留：`tools` 定义、`tool` 角色消息保留（必要时仅保留文本内容），`tool_choice` 保持为上游支持的策略（默认 `auto`）。\n- 回归验证：对最近失败样本离线上游重放，原样 400/1210 → 清理历史 `assistant.tool_calls` 后 200，一致通过。\n\n### 相关环境变量\n\n- `RCC_GLM_MAX_CONTEXT_TOKENS` / `RCC_GLM_CONTEXT_SAFETY_RATIO`：上下文裁剪预算与安全边界。\n- `RCC_GLM_DISABLE_TRIM`：关闭上下文裁剪（默认启用裁剪）。\n- `RCC_GLM_FEATURE_TOOLS`：是否启用工具功能（默认启用；设置为 `0` 可关闭）。\n\n## 文件结构\n\n```\nsrc/modules/pipeline/\n├── index.ts                          # 模块入口\n├── README.md                         # 模块文档\n├── core/                             # 核心流水线实现\n│   ├── base-pipeline.ts              # 基础流水线类\n│   ├── pipeline-manager.ts           # 流水线管理器\n│   ├── openai-pipeline.ts            # OpenAI流水线实现\n│   └── openai-pipeline-factory.ts    # OpenAI流水线工厂\n├── interfaces/                       # 模块接口定义\n│   ├── llm-switch-module.ts          # LLMSwitch接口\n│   ├── workflow-module.ts            # Workflow接口\n│   ├── compatibility-module.ts       # Compatibility接口\n│   └── provider-module.ts           # Provider接口\n├── modules/                          # 具体模块实现\n│   ├── llm-switch/                   # LLMSwitch（实现由 rcc-llmswitch-core 提供）\n│   │   └── README.md                 # 使用说明与引入方式\n│   ├── workflow/                     # Workflow实现\n│   │   └── streaming-control.ts      # 流式控制实现\n│   ├── compatibility/                # Compatibility实现\n│   │   ├── field-mapping.ts          # 字段映射实现\n│   │   └── lmstudio-compatibility.ts  # LM Studio兼容性处理\n│   └── providers/                    # Provider实现\n│       ├── base-provider.ts          # 基础Provider类\n│       ├── qwen-http-provider.ts     # Qwen HTTP Provider\n│       ├── lmstudio-provider.ts      # LM Studio Provider\n│       ├── generic-http-provider.ts   # 通用HTTP Provider\n│       └── openai-provider.ts        # OpenAI Provider\n├── types/                            # 类型定义\n│   ├── pipeline-types.ts             # 流水线类型\n│   ├── transformation-types.ts       # 转换类型\n│   └── provider-types.ts             # Provider类型\n├── utils/                            # 工具类\n│   ├── transformation-engine.ts       # 转换引擎\n│   ├── error-integration.ts          # 错误处理集成\n│   └── debug-logger.ts              # 调试日志\n└── config/                           # 配置管理\n    └── pipeline-config-manager.ts    # 配置管理器\n```\n\n## 核心概念\n\n### 流水线组合原则\n\n源协议 + 目标Provider决定了流水线的组成：\n\n```\n源协议: OpenAI + 目标Provider: Qwen =\n  LLMSwitch(OpenAI→OpenAI规范化) +\n  Workflow(流控) +\n  Compatibility(Qwen适配) +\n  Provider(Qwen实现)\n\n源协议: OpenAI + 目标Provider: LM Studio =\n  LLMSwitch(OpenAI→OpenAI规范化) +\n  Workflow(流控) +\n  Compatibility(LM Studio Tools API适配) +\n  Provider(LM Studio实现)\n```\n\n### 模块层次 (原则7: 功能分离 & 原则2: 最小兼容层)\n\n1. **LLMSwitch层**: 协议转换 (委托给llmswitch-core)\n   - OpenAI → OpenAI: 请求规范化\n   - Anthropic → OpenAI: 协议转换\n   - **原则1合规**: 工具调用统一处理通过llmswitch-core\n   - 未来可扩展其他协议映射\n\n2. **Workflow层**: 流式控制\n   - 流式请求 → 非流式发送\n   - 非流式响应 → 流式返回\n   - 缓冲管理\n   - **原则7合规**: 只处理流式控制，不涉及业务逻辑\n\n3. **Compatibility层**: 字段适配 (最小化处理)\n   - 基于JSON配置的字段转换\n   - **原则2合规**: 仅处理Provider特定字段，不做工具调用转换\n   - LM Studio Tools API字段映射（非工具逻辑）\n   - 响应格式标准化（reasoning_content、usage等）\n\n4. **Provider层**: 服务实现\n   - HTTP请求处理\n   - 认证管理\n   - **原则4合规**: 错误立即暴露，不隐藏失败\n   - 连接管理和超时控制\n   - **原则2合规**: 不处理工具调用逻辑\n\n## 使用示例\n\n### 基本使用\n\n```typescript\nimport { PipelineManager, OpenAIPipelineFactory } from './pipeline/index.js';\n\n// 创建流水线管理器\nconst pipelineManager = new PipelineManager();\nawait pipelineManager.initialize({\n  pipelines: [\n    {\n      id: 'qwen.qwen3-coder-plus',\n      provider: qwenProviderConfig,\n      modules: {\n        llmSwitch: { type: 'llmswitch-openai-openai' },\n        workflow: { type: 'streaming-control' },\n        compatibility: { type: 'field-mapping' },\n        provider: { type: 'qwen-http' }\n      }\n    }\n  ]\n});\n\n// 选择流水线处理请求\nconst pipeline = pipelineManager.selectPipeline({\n  providerId: 'qwen',\n  modelId: 'qwen3-coder-plus'\n});\n\nconst response = await pipeline.processRequest(request);\n```\n\n### LM Studio集成示例\n\nLM Studio集成支持Tools API和完整的工具调用功能：\n\n```typescript\n// 创建LM Studio流水线\nconst lmStudioPipeline = {\n  id: 'lmstudio.llama2-7b-chat',\n  provider: {\n    type: 'lmstudio',\n    baseUrl: 'http://localhost:1234',\n    protocol: 'openai',\n    compatibility: {\n      enabled: true,\n      toolsApi: true,\n      requestMappings: [\n        {\n          sourcePath: 'tools',\n          targetPath: 'tools',\n          transform: 'lmstudio-tools'\n        },\n        {\n          sourcePath: 'model',\n          targetPath: 'model',\n          transform: 'mapping',\n          mapping: {\n            'gpt-4': 'llama2-7b-chat',\n            'gpt-3.5-turbo': 'llama2-7b-chat'\n          }\n        }\n      ]\n    },\n    config: {\n      baseUrl: 'http://localhost:1234',\n      auth: {\n        type: 'apikey',\n        apiKey: '${LM_STUDIO_API_KEY}'\n      },\n      models: {\n        'llama2-7b-chat': {\n          maxTokens: 4096,\n          temperature: 0.7,\n          toolsEnabled: true\n        }\n      }\n    }\n  },\n  modules: {\n    llmSwitch: { type: 'llmswitch-openai-openai' },\n    workflow: { type: 'streaming-control' },\n    compatibility: { type: 'lmstudio-compatibility' },\n    provider: { type: 'lmstudio-http' }\n  }\n};\n\n// 使用工具调用\nconst toolCallRequest = {\n  messages: [\n    { role: 'user', content: 'What is the weather in Beijing?' }\n  ],\n  tools: [\n    {\n      type: 'function',\n      function: {\n        name: 'get_weather',\n        description: 'Get weather information for a location',\n        parameters: {\n          type: 'object',\n          properties: {\n            location: {\n              type: 'string',\n              description: 'The city and state, e.g. San Francisco, CA'\n            }\n          },\n          required: ['location']\n        }\n      }\n    }\n  ]\n};\n\nconst response = await pipeline.processRequest(toolCallRequest);\n```\n\n### Provider配置示例\n\n```typescript\nconst qwenProviderConfig = {\n  id: 'qwen-provider',\n  type: 'qwen',\n  protocol: 'openai',\n  compatibility: {\n    enabled: true,\n    requestMappings: [\n      {\n        sourcePath: 'model',\n        targetPath: 'model',\n        transform: 'mapping',\n        mapping: {\n          'gpt-4': 'qwen3-coder-plus',\n          'gpt-3.5-turbo': 'qwen3-coder'\n        }\n      }\n    ],\n    responseMappings: [\n      {\n        sourcePath: 'usage.prompt_tokens',\n        targetPath: 'usage.prompt_tokens',\n        transform: 'direct'\n      }\n    ]\n  },\n  config: {\n    baseUrl: 'https://portal.qwen.ai/v1',\n    auth: {\n      type: 'apikey',\n      apiKey: '${QWEN_API_KEY}'\n    }\n  }\n};\n```\n\n## 配置选项\n\n### 流水线配置\n\n```typescript\ninterface PipelineConfig {\n  id: string;                              // 流水线ID (provider.model)\n  provider: ProviderConfig;                // Provider配置\n  modules: {\n    llmSwitch: {\n      type: 'llmswitch-openai-openai';     // LLMSwitch类型（实现来源 rcc-llmswitch-core）\n\n## 构建顺序（重要）\n\n涉及 `sharedmodule/` 下的修改，需要遵循“先模块、后整包”的构建顺序：\n\n- 先编译共享模块（例如：`sharedmodule/llmswitch-core`）：\n  - `npm run --workspace sharedmodule/llmswitch-core build`\n- 再编译根包并进行安装或发布：\n  - `npm run build`\n  - 如需全局安装：`npm pack && npm i -g ./routecodex-<version>.tgz`\n\n这样可确保 rcc-llmswitch-core 的最新改动被根包正确引用，避免“旧实现或未生效”的问题。\n      config?: any;                        // 额外配置\n    };\n    workflow: {\n      type: 'streaming-control';           // Workflow类型\n      config: {\n        streamingToNonStreaming: boolean;  // 流式转非流式\n        nonStreamingToStreaming: boolean;  // 非流式转流式\n      };\n    };\n    compatibility: {\n      type: 'field-mapping';              // Compatibility类型\n    };\n    provider: {\n      type: string;                        // Provider类型\n      config: any;                         // Provider配置\n    };\n  };\n}\n```\n\n### 转换规则配置\n\n```typescript\ninterface TransformationRule {\n  sourcePath: string;          // 源JSON路径\n  targetPath: string;          // 目标JSON路径\n  transform: TransformType;   // 转换类型\n  mapping?: Record<string, any>; // 值映射表\n  defaultValue?: any;          // 默认值\n  required?: boolean;          // 是否必需\n}\n\ntype TransformType =\n  | 'direct'                    // 直接映射\n  | 'mapping'                   // 值映射\n  | 'rename'                    // 重命名字段\n  | 'structure'                 // 结构转换\n  | 'array-transform'           // 数组转换\n  | 'object-transform'          // 对象转换\n  | 'conditional'               // 条件转换\n  | 'function'                  // 自定义函数\n  | 'lmstudio-tools'            // LM Studio工具调用转换\n  | 'lmstudio-response'         // LM Studio响应格式转换\n```\n\n## 错误处理\n\n流水线模块集成了ErrorHandlingCenter，提供统一的错误处理机制：\n\n```typescript\n// 错误处理示例\ntry {\n  const response = await pipeline.processRequest(request);\n} catch (error) {\n  // 错误已自动上报到ErrorHandlingCenter\n  // 包含完整的上下文信息：\n  // - 流水线ID\n  // - 失败模块\n  // - 请求ID\n  // - 时间戳\n  // - 错误堆栈\n}\n```\n\n### 认证错误处理\n\n- **APIKey失效**: 直接返回错误\n- **OAuth过期**: 自动刷新Token\n- **认证失败**: 触发浏览器重新认证\n\n## 调试支持\n\n每个请求和响应都会被记录为单独的debug信息：\n\n```typescript\n// Debug日志包含每个处理阶段的信息\n{\n  pipeline: 'qwen.qwen3-coder-plus',\n  stage: 'compatibility.request',\n  timestamp: '2025-01-22T10:30:00Z',\n  data: { /* 转换后的请求数据 */ },\n  metadata: {\n    requestId: 'req-123',\n    duration: 5,\n    transformRules: ['model-mapping', 'max_tokens-direct']\n  }\n}\n```\n\n## 性能考虑\n\n- **预创建流水线**: 避免运行时创建开销\n- **模块化设计**: 支持按需加载和替换\n- **并行处理**: 支持多个请求并行处理\n- **内存管理**: 及时清理中间数据\n\n## 扩展性\n\n### 添加新的LLMSwitch实现\n\n```typescript\nclass NewLLMSwitch implements LLMSwitchModule {\n  async transformRequest(request: any): Promise<any> {\n    // 实现协议转换逻辑\n  }\n\n  async transformResponse(response: any): Promise<any> {\n    // 实现响应转换逻辑\n  }\n}\n```\n\n### 添加新的Provider实现\n\n```typescript\nclass NewProvider extends BaseProvider {\n  async sendRequest(request: any): Promise<any> {\n    // 实现Provider特定的请求处理\n  }\n\n  async authenticate(): Promise<AuthResult> {\n    // 实现认证逻辑\n  }\n}\n```\n\n## 依赖关系\n\n- **rcc-basemodule**: 基础模块功能\n- **errorhandling**: 错误处理中心\n- **debugcenter**: 调试中心集成\n- **config-manager**: 配置管理\n- **transformation-tables**: 转换表配置\n\n## 版本信息\n\n- **当前版本**: 1.0.0\n- **兼容性**: RouteCodex v0.2+\n- **最后更新**: 2025-01-22\n",
    "src/modules/pipeline/types": "# Pipeline Type Definitions\n\n流水线模块的TypeScript类型定义，提供完整的类型安全支持。\n\n## 类型文件\n\n### 核心类型\n- **pipeline-types.ts**: 流水线核心类型，包括请求/响应、配置、接口等\n- **transformation-types.ts**: 转换相关类型，包括转换规则、引擎类型等\n- **provider-types.ts**: Provider相关类型，包括认证、配置、错误等\n\n## 设计原则\n\n### 类型安全\n- 严格的接口定义\n- 完整的配置验证\n- 运行时类型检查\n- 编译时错误检测\n\n### 可扩展性\n- 基于泛型的灵活设计\n- 联合类型支持多种实现\n- 可选类型支持向后兼容\n- 条件类型支持复杂逻辑\n\n### 文档化\n- JSDoc注释说明用途\n- 示例代码展示用法\n- 相关类型引用\n- 版本兼容性说明\n\n## 主要类型\n\n### PipelineRequest/PipelineResponse\n标准化的请求响应类型，包含：\n- 原始请求数据\n- 路由信息\n- 元数据\n- 调试上下文\n\n### TransformationRule\n转换规则定义，支持：\n- JSON路径操作\n- 多种转换类型\n- 条件转换逻辑\n- 验证规则\n\n### ProviderConfig\nProvider配置类型，包括：\n- 认证配置\n- 兼容性配置\n- 网络配置\n- 错误处理配置",
    "src/modules/pipeline/core": "# Core Pipeline Implementation\n\n核心流水线实现，包含基础流水线类、流水线管理器和OpenAI专用流水线。\n\n## 文件清单\n\n- **base-pipeline.ts**: 所有流水线的基础抽象类，定义统一的流水线接口\n- **pipeline-manager.ts**: 流水线管理器，负责预创建和管理所有流水线实例\n- **openai-pipeline.ts**: OpenAI专用流水线实现，针对OpenAI协议优化\n- **openai-pipeline-factory.ts**: OpenAI流水线工厂，负责创建OpenAI流水线实例\n\n## 核心设计\n\n### BasePipeline\n所有流水线的基础类，提供：\n- 统一的请求处理接口\n- Debug日志记录集成\n- 错误处理框架\n- 模块生命周期管理\n\n### PipelineManager\n流水线管理器，实现：\n- 初始化时预创建所有流水线\n- 基于provider.model组合选择流水线\n- 流水线实例的生命周期管理\n\n### OpenAIPipeline\nOpenAI专用流水线，特性：\n- OpenAI透传LLMSwitch\n- 流式/非流式转换Workflow\n- 配置驱动的Compatibility\n- 统一的Provider接口\n\n## 使用模式\n\n```typescript\n// 1. 创建流水线管理器\nconst manager = new PipelineManager();\nawait manager.initialize(config);\n\n// 2. 选择流水线\nconst pipeline = manager.selectPipeline({\n  providerId: 'qwen',\n  modelId: 'qwen3-coder-plus'\n});\n\n// 3. 处理请求\nconst response = await pipeline.processRequest(request);\n```",
    "src/modules/pipeline/config": "# Pipeline Configuration\n\n流水线配置管理，负责配置的加载、验证和管理。\n\n## 文件清单\n\n- **pipeline-config-manager.ts**: 流水线配置管理器\n\n## 功能特性\n\n### 配置管理\n- 从多种源加载配置\n- 配置验证和类型检查\n- 配置热重载支持\n- 配置版本管理\n\n### 验证机制\n- JSON Schema验证\n- 业务逻辑验证\n- 依赖关系检查\n- 默认值处理\n\n### 缓存优化\n- 配置缓存机制\n- 增量更新支持\n- 内存使用优化\n- 性能监控\n\n## 配置格式\n\n```typescript\ninterface PipelineManagerConfig {\n  pipelines: PipelineConfig[];\n}\n\ninterface PipelineConfig {\n  id: string;\n  provider: ProviderConfig;\n  modules: {\n    llmSwitch: ModuleConfig;\n    workflow: ModuleConfig;\n    compatibility: ModuleConfig;\n    provider: ModuleConfig;\n  };\n}\n```\n\n## 使用示例\n\n```typescript\nconst configManager = new PipelineConfigManager();\nawait configManager.loadConfig('./config/pipelines.json');\n\nconst config = configManager.getPipelineConfig('qwen.qwen3-coder-plus');\nconst isValid = await configManager.validateConfig(config);\n```",
    "src/modules/pipeline/utils": "# Pipeline Utilities\n\n流水线模块的工具类，提供通用功能和辅助方法。\n\n## 工具类清单\n\n### 核心工具\n- **transformation-engine.ts**: 转换引擎，处理JSON路径操作和数据转换\n- **error-integration.ts**: 错误处理集成，连接ErrorHandlingCenter\n- **debug-logger.ts**: 调试日志记录器，集成DebugCenter\n\n## 功能特性\n\n### TransformationEngine\n- JSON路径解析和操作\n- 多种转换类型支持\n- 条件转换逻辑\n- 批量转换优化\n\n### PipelineErrorIntegration\n- 统一错误处理接口\n- 上下文信息收集\n- 错误分类和路由\n- 重试逻辑协调\n\n### PipelineDebugLogger\n- 分阶段日志记录\n- 性能数据收集\n- 结构化日志格式\n- DebugCenter集成\n\n## 使用示例\n\n```typescript\n// 使用转换引擎\nconst engine = new TransformationEngine();\nconst result = await engine.applyTransformation(data, rules, context);\n\n// 使用错误处理集成\nconst errorIntegration = new PipelineErrorIntegration(errorHandlingCenter);\nawait errorIntegration.handleModuleError(error, context);\n\n// 使用调试日志\nconst logger = new PipelineDebugLogger(debugCenter);\nlogger.logRequest('pipeline-stage', request, metadata);\n```",
    "src/modules/pipeline/modules": "# Module Implementations\n\n流水线模块的具体实现，包含LLMSwitch、Workflow、Compatibility和Provider的具体实现。\n\n## 目录结构\n\n```\nmodules/\n├── llm-switch/          # LLMSwitch（由 rcc-llmswitch-core 提供实现）\n│   └── README.md\n├── workflow/            # Workflow实现\n│   └── streaming-control.ts\n├── compatibility/       # Compatibility实现\n│   └── field-mapping.ts\n└── providers/           # Provider实现\n    ├── base-provider.ts\n    ├── http-provider.ts\n    ├── apikey-provider.ts\n    └── oauth-provider.ts\n```\n\n## 模块说明\n\n### LLMSwitch实现\n- 实现来源：`rcc-llmswitch-core`（避免本地重复实现）\n- OpenAI 规范化：`rcc-llmswitch-core/llmswitch/openai-normalizer`\n- Anthropic ↔ OpenAI：`rcc-llmswitch-core/llmswitch/anthropic-openai-converter`\n\n### Workflow实现\n- **streaming-control.ts**: 流式控制实现，处理流式/非流式转换\n\n### Compatibility实现\n- **field-mapping.ts**: 基于JSON配置的字段映射实现\n\n### Provider实现\n- **base-provider.ts**: 所有Provider的基础类\n- **http-provider.ts**: HTTP请求的通用Provider实现\n- **apikey-provider.ts**: APIKey认证的Provider实现\n- **oauth-provider.ts**: OAuth认证的Provider实现\n\n## 扩展指南\n\n### 添加新的LLMSwitch\n1. 在`llm-switch/`目录下创建新文件\n2. 实现`LLMSwitchModule`接口\n3. 注册到模块注册表\n\n### 添加新的Provider\n1. 继承`BaseProvider`类\n2. 实现必要的认证和请求处理方法\n3. 在工厂中注册新类型\n\n### 添加新的Workflow\n1. 实现`WorkflowModule`接口\n2. 在工厂中添加创建逻辑\n3. 更新配置类型定义\n",
    "src/modules/pipeline/modules/compatibility": "# Compatibility 模块\n\nCompatibility 模块提供协议格式转换功能，将不同供应商的API格式进行相互转换，支持工具调用、字段映射和响应格式适配。作为流水线架构的第 3 层，它专注于处理供应商特定的格式差异。\n\n## 🎯 模块概述\n\nCompatibility 模块是流水线架构的第 3 层，负责处理请求和响应的格式转换。它专注于处理供应商特定的格式差异，确保不同供应商之间的协议兼容性。\n\n### 📋 核心职责\n- **格式转换**: 供应商特定的请求/响应格式转换\n- **工具适配**: 工具调用格式的标准化处理\n- **字段映射**: 字段名称和结构的映射转换\n- **参数适配**: 供应商特定参数的标准化\n\n## 🔄 支持的兼容性模块\n\n### 🔧 字段映射兼容性\n- **实现文件**: `field-mapping.ts`\n- **功能**: 通用字段映射和转换\n- **特性**:\n  - 基于 JSON 配置的转换规则\n  - 支持多种转换类型（映射、重命名、结构转换等）\n  - 条件转换支持\n  - 错误处理和回退机制\n  - 性能监控和统计\n\n### 🏠 LM Studio 兼容性\n- **实现文件**: `lmstudio-compatibility.ts`\n- **功能**: LM Studio 特定的格式转换\n- **特性**:\n  - OpenAI 格式 ↔ LM Studio 格式转换\n  - 工具调用 API 适配\n  - 请求/响应格式标准化\n  - 模型名称映射\n  - 参数适配\n\n### 🔍 Qwen 兼容性\n- **实现文件**: `qwen-compatibility.ts`\n- **功能**: Qwen 特定的格式转换\n- **特性**:\n  - OpenAI 格式 ↔ Qwen 格式转换\n  - 模型名称映射（gpt-4 → qwen3-coder-plus）\n  - 工具调用格式转换\n  - 响应格式标准化\n  - 错误码映射\n  - 思考内容处理\n\n### 🟢 GLM 兼容性\n- **实现文件**: `glm-compatibility.ts`\n- **功能**: GLM 特定的格式转换\n- **特性**:\n  - OpenAI 格式 ↔ GLM 格式转换（最小清理）\n  - 思考内容（thinking）处理（私有 <think>…</think> 清理）\n  - 工具调用兼容性（仅保留最近一轮 `assistant.tool_calls`，空数组字段删除）\n  - 过滤 `view_image` 的非图片路径调用（仅允许常见图片后缀）\n  - 删除空的 user/assistant 消息（无 content 且无 tool_calls）\n  - 1210/1214 错误兼容：严格不伪造工具配对，删除非法调用；默认 `tool_choice=auto`\n\n### 🌊 iFlow 兼容性\n- **实现文件**: `iflow-compatibility.ts`\n- **功能**: iFlow 特定的格式转换\n- **特性**:\n  - OpenAI 格式 ↔ iFlow 格式转换\n  - 温度参数映射\n  - 最大 token 数映射\n  - 响应结构适配\n  - 用户代理头注入\n\n### 🔄 Passthrough 兼容性\n- **实现文件**: `passthrough-compatibility.ts`\n- **功能**: 直接透传，无格式转换\n- **特性**:\n  - 保持原始请求/响应格式不变\n  - 最小的性能开销\n  - 适用于格式完全兼容的场景\n\n## 🌟 核心功能\n\n### 🔄 转换类型支持\n```typescript\ntype TransformType =\n  | 'direct'                    // 直接映射\n  | 'mapping'                   // 值映射\n  | 'rename'                    // 重命名字段\n  | 'structure'                 // 结构转换\n  | 'array-transform'           // 数组转换\n  | 'object-transform'          // 对象转换\n  | 'conditional'               // 条件转换\n  | 'function'                  // 自定义函数\n  | 'lmstudio-tools'            // LM Studio工具调用转换\n  | 'lmstudio-response'         // LM Studio响应格式转换\n  | 'glm-thinking'              // GLM 思考内容处理\n  | 'iflow-headers'             // iFlow 请求头注入\n```\n\n### 📋 配置驱动的转换\n```typescript\n// 转换规则配置\nconst transformationRule: TransformationRule = {\n  id: 'model-name-mapping',\n  transform: 'mapping',\n  sourcePath: 'model',\n  targetPath: 'model',\n  mapping: {\n    'gpt-4': 'qwen3-coder-plus',\n    'gpt-3.5-turbo': 'qwen-turbo'\n  },\n  condition: {\n    field: 'model',\n    operator: 'exists',\n    value: null\n  }\n};\n```\n\n### 🛡️ 错误处理\n```typescript\n// 转换错误处理\ntry {\n  const result = await this.transformationEngine.transform(data, rules);\n} catch (error) {\n  if (this.config.config?.continueOnError) {\n    // 继续处理，返回原始数据\n    return data;\n  } else {\n    // 抛出错误\n    throw error;\n  }\n}\n```\n\n### 📊 性能监控\n```typescript\n// 转换统计\nconst stats = await compatibility.getTransformationStats();\nconsole.log({\n  transformationCount: stats.transformationCount,\n  successCount: stats.successCount,\n  errorCount: stats.errorCount,\n  averageTransformationTime: stats.averageTransformationTime\n});\n```\n\n## 📁 文件结构\n\n```\nsrc/modules/pipeline/modules/compatibility/\n├── field-mapping.ts              # 通用字段映射实现\n├── lmstudio-compatibility.ts     # LM Studio 兼容性实现\n├── glm-compatibility.ts          # GLM 兼容性实现\n├── qwen-compatibility.ts         # Qwen 兼容性实现\n├── iflow-compatibility.ts        # iFlow 兼容性实现\n├── passthrough-compatibility.ts   # Passthrough 兼容性实现\n└── README.md                     # 本文档\n```\n\n## 🚀 使用示例\n\n### 基本字段映射\n```typescript\nimport { FieldMappingCompatibility } from './field-mapping.js';\n\nconst compatibility = new FieldMappingCompatibility({\n  type: 'field-mapping',\n  config: {\n    rules: [\n      {\n        id: 'model-mapping',\n        transform: 'mapping',\n        sourcePath: 'model',\n        targetPath: 'model',\n        mapping: {\n          'gpt-4': 'qwen3-coder-plus',\n          'gpt-3.5-turbo': 'qwen-turbo'\n        }\n      }\n    ]\n  }\n}, dependencies);\n\nawait compatibility.initialize();\n\nconst transformed = await compatibility.processIncoming({\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello' }]\n});\n// 结果: { model: 'qwen3-coder-plus', messages: [...] }\n```\n\n### LM Studio 工具调用适配\n```typescript\nimport { LMStudioCompatibility } from './lmstudio-compatibility.js';\n\nconst compatibility = new LMStudioCompatibility({\n  type: 'lmstudio-compatibility',\n  config: {\n    toolsEnabled: true,\n    customRules: [\n      {\n        id: 'tools-conversion',\n        transform: 'lmstudio-tools',\n        sourcePath: 'tools',\n        targetPath: 'tools'\n      }\n    ]\n  }\n}, dependencies);\n\nawait compatibility.initialize();\n\nconst transformed = await compatibility.processIncoming({\n  model: 'gpt-4',\n  messages: [...],\n  tools: [/* OpenAI 工具格式 */]\n});\n// 结果: 转换为 LM Studio 兼容的工具格式\n```\n\n### GLM 思考内容处理\n```typescript\nimport { GLMCompatibility } from './glm-compatibility.js';\n\nconst compatibility = new GLMCompatibility({\n  type: 'glm-compatibility',\n  config: {\n    forceDisableThinking: false,\n    useMappingConfig: true\n  }\n}, dependencies);\n\nawait compatibility.initialize();\n\n// 处理包含思考内容的请求\nconst transformed = await compatibility.processIncoming({\n  model: 'glm-4',\n  messages: [\n    { role: 'system', content: 'You are a helpful assistant.' },\n    {\n      role: 'assistant',\n      content: '',\n      reasoning_content: 'Let me think about this step by step...'\n    },\n    { role: 'user', content: 'Calculate 15 * 25' }\n  ]\n});\n```\n\n### Qwen 响应格式转换\n```typescript\nimport { QwenCompatibility } from './qwen-compatibility.js';\n\nconst compatibility = new QwenCompatibility({\n  type: 'qwen-compatibility',\n  config: {}\n}, dependencies);\n\nawait compatibility.initialize();\n\nconst request = await compatibility.processIncoming(openAIRequest);\nconst providerResponse = await provider.processIncoming(request);\nconst finalResponse = await compatibility.processOutgoing(providerResponse);\n// 结果: 转换回 OpenAI 响应格式\n```\n\n## 🔄 转换规则详解\n\n### 1. 直接映射 (Direct Mapping)\n```typescript\n{\n  id: 'direct-field',\n  transform: 'direct',\n  sourcePath: 'messages',\n  targetPath: 'messages'\n}\n```\n\n### 2. 值映射 (Value Mapping)\n```typescript\n{\n  id: 'model-names',\n  transform: 'mapping',\n  sourcePath: 'model',\n  targetPath: 'model',\n  mapping: {\n    'gpt-4': 'qwen-max',\n    'gpt-3.5-turbo': 'qwen-turbo'\n  }\n}\n```\n\n### 3. 条件转换 (Conditional Transform)\n```typescript\n{\n  id: 'conditional-transform',\n  transform: 'conditional',\n  sourcePath: 'temperature',\n  targetPath: 'temperature',\n  condition: {\n    field: 'temperature',\n    operator: 'greater_than',\n    value: 1.0\n  },\n  defaultValue: 1.0\n}\n```\n\n### 4. 结构转换 (Structure Transform)\n```typescript\n{\n  id: 'structure-conversion',\n  transform: 'structure',\n  sourcePath: 'choices',\n  targetPath: 'choices',\n  structure: {\n    'index': 'index',\n    'message.role': 'delta.role',\n    'message.content': 'delta.content'\n  }\n}\n```\n\n### 5. GLM 思考内容转换\n```typescript\n{\n  id: 'glm-thinking-extraction',\n  transform: 'glm-thinking',\n  sourcePath: 'messages',\n  targetPath: 'messages',\n  preserveThinking: true\n}\n```\n\n### 6. iFlow 请求头注入\n```typescript\n{\n  id: 'iflow-headers',\n  transform: 'iflow-headers',\n  headers: {\n    'User-Agent': 'iflow-cli/2.0',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n}\n```\n\n## ⚙️ 配置选项\n\n### 字段映射配置\n```typescript\ninterface FieldMappingConfig {\n  enableValidation?: boolean;     // 启用验证\n  continueOnError?: boolean;      // 出错时继续\n  maxTransformations?: number;    // 最大转换数\n  rules: TransformationRule[];    // 转换规则\n  responseMappings?: any[];       // 响应映射规则\n}\n```\n\n### LM Studio 兼容性配置\n```typescript\ninterface LMStudioCompatibilityConfig {\n  toolsEnabled?: boolean;         // 启用工具转换\n  customRules?: TransformationRule[]; // 自定义规则\n  modelMappings?: Record<string, string>; // 模型映射\n}\n```\n\n### Qwen 兼容性配置\n```typescript\ninterface QwenCompatibilityConfig {\n  customRules?: TransformationRule[]; // 自定义规则\n  modelMappings?: Record<string, string>; // 模型映射\n  enableResponseMapping?: boolean; // 启用响应映射\n}\n```\n\n### GLM 兼容性配置\n```typescript\ninterface GLMCompatibilityConfig {\n  forceDisableThinking?: boolean;   // 强制禁用思考功能\n  useMappingConfig?: boolean;       // 使用映射配置\n}\n```\n\n### iFlow 兼容性配置\n```typescript\ninterface iFlowCompatibilityConfig {\n  injectHeaders?: boolean;          // 注入请求头\n  customHeaders?: Record<string, string>; // 自定义请求头\n  temperatureMapping?: Record<number, number>; // 温度映射\n}\n```\n\n## 🔄 工具调用转换\n\n### OpenAI → LM Studio 工具格式\n```typescript\n// OpenAI 格式\n{\n  \"type\": \"function\",\n  \"function\": {\n    \"name\": \"calculate\",\n    \"description\": \"Perform mathematical calculations\",\n    \"parameters\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"expression\": { \"type\": \"string\" }\n      }\n    }\n  }\n}\n\n// 转换为 LM Studio 格式\n{\n  \"type\": \"function\",\n  \"name\": \"calculate\",\n  \"description\": \"Perform mathematical calculations\",\n  \"parameters\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"expression\": { \"type\": \"string\" }\n    }\n  }\n}\n```\n\n### 工具调用响应转换\n```typescript\n// Chat 格式响应\n{\n  \"choices\": [{\n    \"message\": {\n      \"tool_calls\": [{\n        \"id\": \"call_123\",\n        \"type\": \"function\",\n        \"function\": {\n          \"name\": \"calculate\",\n          \"arguments\": \"{\\\"expression\\\":\\\"15*25\\\"}\"\n        }\n      }]\n    }\n  }]\n}\n\n// 转换为标准化格式\nconst standardizedResponse = {\n  tool_calls: [{\n    id: \"call_123\",\n    name: \"calculate\",\n    arguments: \"{\\\"expression\\\":\\\"15*25\\\"}\"\n  }]\n};\n```\n\n## 🛡️ 错误处理\n\n### 转换错误类型\n```typescript\ntype TransformationError =\n  | 'rule_validation_error'      // 规则验证错误\n  | 'path_resolution_error'      // 路径解析错误\n  | 'mapping_not_found'          // 映射未找到\n  | 'type_conversion_error'      // 类型转换错误\n  | 'structure_mismatch'         // 结构不匹配\n  | 'condition_evaluation_error' // 条件评估错误\n```\n\n### 错误处理策略\n```typescript\n// 验证模式\nif (config.enableValidation) {\n  this.validateTransformationRule(rule);\n}\n\n// 错误继续模式\nif (config.continueOnError) {\n  try {\n    return await this.applyTransformations(data, rules);\n  } catch (error) {\n    // 返回原始数据\n    return data;\n  }\n}\n```\n\n## 📊 性能优化\n\n### 缓存机制\n```typescript\n// 转换引擎缓存\nawait this.transformationEngine.initialize({\n  enableCache: true,\n  cacheSize: 1000,\n  maxTimeMs: 5000\n});\n```\n\n### 批量处理\n```typescript\n// 批量转换支持\nconst results = await Promise.all(\n  requests.map(request =>\n    compatibility.processIncoming(request)\n  )\n);\n```\n\n## 🔍 调试支持\n\n### 转换日志\n```typescript\n// 详细的转换日志\nlogger.logTransformation(this.id, 'request-field-mapping', original, transformed);\nlogger.logTransformation(this.id, 'response-field-mapping', original, transformed);\n```\n\n### 转换统计\n```typescript\n// 转换统计信息\nconst stats = await compatibility.getTransformationStats();\nconsole.log({\n  ruleCount: stats.ruleCount,\n  transformationCount: stats.transformationCount,\n  successRate: stats.successCount / stats.transformationCount\n});\n```\n\n## 🌐 API 协议支持\n\n### OpenAI 协议\n- **请求格式**: `/v1/chat/completions`\n- **响应格式**: 标准化 OpenAI 响应\n- **工具调用**: 支持所有 OpenAI 工具调用格式\n\n### OpenAI 兼容协议\n- **Provider**: LM Studio, Qwen, GLM, iFlow\n- **请求转换**: 通过 Compatibility 层进行格式适配\n- **响应转换**: 转换回标准 OpenAI 格式\n\n### Responses 协议\n- **请求路径**: `/v1/responses` → LLM Switch → Chat → Compatibility\n- **响应路径**: Chat → Compatibility → Responses\n- **格式支持**: 通过多层转换实现完整兼容\n\n## 🔧 扩展性\n\n### 添加新的转换类型\n```typescript\n// 注册自定义转换器\nthis.transformationEngine.registerTransformer('custom-transform', {\n  transform: (data: any, rule: TransformationRule) => {\n    // 自定义转换逻辑\n    return transformedData;\n  }\n});\n```\n\n### 添加新的兼容性模块\n```typescript\nclass NewCompatibility implements CompatibilityModule {\n  readonly type = 'new-compatibility';\n  readonly protocol = 'new-protocol';\n\n  async processIncoming(request: any): Promise<any> {\n    // 实现请求转换逻辑\n    const transformed = this.transformRequest(request);\n    return {\n      ...transformed,\n      _metadata: {\n        compatibilityType: this.type,\n        timestamp: Date.now(),\n        originalProtocol: this.detectProtocol(request),\n        targetProtocol: 'openai'\n      }\n    };\n  }\n\n  async processOutgoing(response: any): Promise<any> {\n    // 实现响应转换逻辑\n    return this.transformResponse(response);\n  }\n\n  private transformRequest(request: any): any {\n    // 自定义请求转换逻辑\n  }\n\n  private transformResponse(response: any): any {\n    // 自定义响应转换逻辑\n  }\n}\n```\n\n## 📈 版本信息\n\n- **当前版本**: 2.0.0\n- **新增特性**: GLM 兼容性增强、Responses 支持\n- **兼容性**: RouteCodex Pipeline >= 2.0.0\n- **TypeScript**: >= 5.0.0\n- **Node.js**: >= 18.0.0\n\n## 🔗 依赖关系\n\n- **rcc-debugcenter**: 调试中心集成\n- **PipelineDebugLogger**: 模块日志记录\n- **ErrorHandlingCenter**: 错误处理集成\n- **BaseModule**: 基础模块接口\n\n## 🚨 已知限制\n\n### 当前限制\n1. **嵌套转换性能** - 深层嵌套的 JSON 路径转换可能影响性能\n2. **循环引用** - 不支持循环引用的数据结构转换\n3. **大文件处理** - 大型 JSON 数据的内存处理限制\n4. **实时转换** - 不支持流式数据的实时转换\n\n### 计划改进\n1. **流式转换** - 支持大型 JSON 文件的流式处理\n2. **并行转换** - 多个转换规则的并行执行\n3. **智能缓存** - 基于数据特征的智能缓存策略\n4. **增量转换** - 支持部分数据的增量转换\n\n## 🔄 更新日志\n\n### v2.0.0 (2025-10-17)\n- ✨ 新增 GLM 兼容性完整支持\n- 🌐 完善 Responses API 转换路径文档\n- 🔄 增强的工具调用转换支持\n- 📊 详细的性能监控和调试功能\n- 🛡️ 改进的错误处理和恢复机制\n\n### v1.5.0 (2025-01-22)\n- 🔧 完善字段映射和转换规则\n- 📊 性能监控功能增强\n- 🛡️ 错误处理机制优化\n\n### v1.0.0 (2025-01-22)\n- 🎯 初始版本发布\n- 🔄 基础的字段映射功能\n- 📊 配置驱动的转换引擎\n\n## 📞 技术支持\n\n如有问题或建议，请：\n1. 检查转换规则配置是否正确\n2. 验证输入数据格式是否符合预期\n3. 查看转换日志了解详细信息\n4. 检查目标 Provider 的 API 文档\n\n---\n\n**最后更新**: 2025-10-17 - 全面更新 Compatibility 模块文档，新增 GLM 和 Responses 支持\n",
    "src/modules/pipeline/modules/provider": "# Provider 模块\n\nProvider 模块是流水线架构的第 4 层（最终层），负责与 AI 服务提供商进行 HTTP 通信。它接收来自 Compatibility 层的标准化请求，发送给对应的 AI 服务，并将原始响应返回给上层处理。\n\n## 🎯 模块概述\n\nProvider 模块作为流水线的最终执行层，专注于：\n- **HTTP 通信**: 标准的 HTTP 请求/响应处理\n- **认证管理**: 多种认证方式支持（API Key、OAuth 2.0 等）\n- **错误处理**: 统一的错误处理和重试机制\n- **性能监控**: 请求性能统计和健康检查\n\n## 📁 支持的 Provider\n\n### 🏠 LM Studio Provider\n- **实现文件**: `lmstudio-provider-simple.ts`\n- **协议**: OpenAI Compatible API\n- **认证**: API Key\n- **特性**:\n  - 本地 AI 模型支持\n  - 完整的工具调用功能\n  - 流式响应支持\n  - 健康检查和重试机制\n\n### 🔍 Qwen Provider\n- **实现文件**: `qwen-provider.ts`, `qwen-oauth.ts`\n- **协议**: OpenAI Compatible API\n- **认证**: OAuth 2.0 + API Key\n- **特性**:\n  - 阿里云通义千问模型支持\n  - 自动 OAuth 认证和令牌刷新\n  - 多模型支持（qwen-turbo、qwen-max、qwen-plus）\n  - 工具调用和流式响应\n\n### 🌊 iFlow Provider\n- **实现文件**: `iflow-provider.ts`, `iflow-oauth.ts`\n- **协议**: OpenAI Compatible API\n- **认证**: OAuth 2.0 + PKCE\n- **特性**:\n  - iFlow AI 服务支持\n  - Kimi 模型支持\n  - 增强的安全认证（PKCE）\n  - 多种认证模式支持\n\n### 🤖 OpenAI Provider\n- **实现文件**: `openai-provider.ts`\n- **协议**: OpenAI API\n- **认证**: API Key\n- **特性**:\n  - 官方 OpenAI API 支持\n  - GPT 模型系列支持\n  - 完整的 API 功能支持\n  - 高可靠性和性能\n\n### 🔧 Generic HTTP Provider\n- **实现文件**: `generic-http-provider.ts`\n- **协议**: 可配置\n- **认证**: 可配置\n- **特性**:\n  - 通用 HTTP Provider 框架\n  - 可配置的协议支持\n  - 灵活的认证机制\n  - 自定义请求/响应处理\n\n### 🟢 GLM HTTP Provider\n- **实现文件**: `glm-http-provider.ts`\n- **协议**: OpenAI Compatible API\n- **认证**: API Key\n- **特性**:\n  - 智谱 GLM Coding API 支持\n  - 工具调用优化\n  - 1210 兼容性处理\n  - 诊断和调试支持\n\n### 🌐 Generic Responses Provider\n- **实现文件**: `generic-responses.ts`\n- **协议**: OpenAI Responses API\n- **认证**: Bearer Token\n- **特性**:\n  - OpenAI Responses API 原生支持\n  - 标准化的 HTTP 请求处理\n  - 错误状态码处理\n  - Beta 头部自动添加（`OpenAI-Beta: responses-2024-12-17`）\n  - 灵活的 baseUrl 和认证配置\n  - 完整的错误响应处理\n\n## 🏗️ 模块架构\n\n### 核心接口\n```typescript\ninterface ProviderModule extends BaseModule {\n  readonly type: string;\n  readonly protocol: string;\n\n  async processIncoming(request: any): Promise<ProviderResponse>;\n  async processOutgoing?(response: any): Promise<any>;\n}\n```\n\n### 标准响应格式\n```typescript\ninterface ProviderResponse {\n  data: any;                    // AI 服务响应数据\n  status: number;               // HTTP 状态码\n  headers: Record<string, string>; // 响应头\n  metadata: {                   // 响应元数据\n    requestId: string;\n    providerId: string;\n    modelId: string;\n    responseTime: number;\n    usage?: {\n      promptTokens: number;\n      completionTokens: number;\n      totalTokens: number;\n    };\n  };\n}\n```\n\n## 🔄 请求处理流程\n\n### 标准请求流程\n```typescript\nasync processIncoming(request: any): Promise<ProviderResponse> {\n  // 1. 请求验证\n  this.validateRequest(request);\n\n  // 2. 构建 HTTP 请求\n  const httpConfig = this.buildHttpConfig(request);\n\n  // 3. 发送请求\n  const response = await this.sendHttpRequest(httpConfig);\n\n  // 4. 处理响应\n  return this.processResponse(response);\n}\n```\n\n### 错误处理和重试\n```typescript\nasync sendHttpRequest(config: HttpConfig): Promise<Response> {\n  const maxRetries = this.config.maxRetries || 3;\n  const timeout = this.getTimeout();\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n      const response = await fetch(config.url, {\n        ...config.options,\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n      return response;\n\n    } catch (error) {\n      if (attempt === maxRetries) {\n        throw this.handleFatalError(error, attempt);\n      }\n\n      await this.delay(this.getRetryDelay(attempt));\n    }\n  }\n}\n```\n\n## 🛡️ 认证机制\n\n### API Key 认证\n```typescript\ninterface ApiKeyAuth {\n  type: 'apikey';\n  apiKey: string | string[];\n  headerPrefix?: string; // 默认 \"Bearer\"\n}\n\n// 使用示例\nconst provider = new OpenAIProvider({\n  type: 'openai-provider',\n  config: {\n    auth: {\n      type: 'apikey',\n      apiKey: 'sk-...',\n      headerPrefix: 'Bearer'\n    },\n    baseUrl: 'https://api.openai.com/v1'\n  }\n}, dependencies);\n```\n\n### OAuth 2.0 认证\n```typescript\ninterface OAuthConfig {\n  type: 'oauth';\n  clientId: string;\n  clientSecret?: string;\n  tokenUrl: string;\n  deviceCodeUrl?: string;\n  scopes: string[];\n  tokenFile?: string;\n}\n\n// Qwen OAuth 示例\nconst qwenProvider = new QwenProvider({\n  type: 'qwen-provider',\n  config: {\n    auth: {\n      type: 'oauth',\n      clientId: 'your-client-id',\n      tokenUrl: 'https://chat.qwen.ai/api/v1/oauth2/token',\n      deviceCodeUrl: 'https://chat.qwen.ai/api/v1/oauth2/device/code',\n      scopes: ['openid', 'profile', 'model.completion'],\n      tokenFile: './qwen-token.json'\n    },\n    baseUrl: 'https://chat.qwen.ai'\n  }\n}, dependencies);\n```\n\n## ⚙️ 配置选项\n\n### 通用配置\n```typescript\ninterface ProviderConfig {\n  type: string;                    // Provider 类型\n  protocol: string;                // 协议类型\n  baseUrl: string;                 // API 基础 URL\n  auth: AuthConfig;                // 认证配置\n  timeout?: number;                // 请求超时（毫秒）\n  maxRetries?: number;             // 最大重试次数\n  retryDelay?: number;             // 重试延迟（毫秒）\n  enableHealthCheck?: boolean;     // 启用健康检查\n  enableMetrics?: boolean;         // 启用性能指标\n}\n```\n\n### 特定 Provider 配置\n\n#### LM Studio 配置\n```json\n{\n  \"type\": \"lmstudio-http\",\n  \"config\": {\n    \"baseUrl\": \"http://localhost:1234\",\n    \"auth\": {\n      \"type\": \"apikey\",\n      \"apiKey\": \"your-api-key\"\n    },\n    \"timeout\": 60000,\n    \"maxRetries\": 3,\n    \"enableHealthCheck\": true\n  }\n}\n```\n\n#### Qwen 配置\n```json\n{\n  \"type\": \"qwen-provider\",\n  \"config\": {\n    \"baseUrl\": \"https://chat.qwen.ai\",\n    \"auth\": {\n      \"type\": \"oauth\",\n      \"clientId\": \"your-client-id\",\n      \"tokenUrl\": \"https://chat.qwen.ai/api/v1/oauth2/token\",\n      \"scopes\": [\"openid\", \"profile\", \"model.completion\"]\n    },\n    \"timeout\": 300000,\n    \"maxRetries\": 2\n  }\n}\n```\n\n#### Generic Responses 配置\n```json\n{\n  \"type\": \"generic-responses\",\n  \"config\": {\n    \"baseUrl\": \"https://api.openai.com\",\n    \"auth\": {\n      \"type\": \"apikey\",\n      \"apiKey\": \"sk-your-openai-api-key\"\n    },\n    \"timeout\": 60000,\n    \"maxRetries\": 3,\n    \"enableHealthCheck\": true\n  }\n}\n```\n\n## 🚀 使用示例\n\n### 基本 Provider 使用\n```typescript\nimport { LMStudioProviderSimple } from './lmstudio-provider-simple.js';\n\nconst provider = new LMStudioProviderSimple({\n  type: 'lmstudio-http',\n  config: {\n    baseUrl: 'http://localhost:1234',\n    auth: {\n      type: 'apikey',\n      apiKey: 'your-api-key'\n    },\n    timeout: 60000,\n    enableMetrics: true\n  }\n}, {\n  errorHandlingCenter,\n  debugCenter,\n  logger\n});\n\nawait provider.initialize();\n\n// 处理请求\nconst response = await provider.processIncoming({\n  model: 'gpt-4',\n  messages: [\n    { role: 'user', content: 'Hello!' }\n  ],\n  stream: false\n});\n\nconsole.log(response.data);\nconsole.log(response.metadata.usage);\n```\n\n### 在流水线中使用\n```typescript\n// 流水线配置\nconst pipelineConfig = {\n  modules: {\n    provider: {\n      type: 'lmstudio-http',\n      config: {\n        baseUrl: 'http://localhost:1234',\n        auth: {\n          type: 'apikey',\n          apiKey: 'your-api-key'\n        }\n      }\n    }\n  }\n};\n\n// 请求处理流程\nconst response = await provider.processIncoming(chatRequest);\n// {\n//   data: { id: 'chat-xxx', choices: [...], usage: {...} },\n//   status: 200,\n//   headers: { 'content-type': 'application/json' },\n//   metadata: {\n//     requestId: 'req_123',\n//     providerId: 'lmstudio',\n//     modelId: 'gpt-4',\n//     responseTime: 1250,\n//     usage: { promptTokens: 20, completionTokens: 15, totalTokens: 35 }\n//   }\n// }\n```\n\n## 📊 性能监控\n\n### 性能指标收集\n```typescript\nprivate collectMetrics(request: any, response: any, startTime: number): ProviderMetrics {\n  const endTime = Date.now();\n  const responseTime = endTime - startTime;\n\n  return {\n    requestId: request._metadata?.requestId,\n    providerId: this.config.type,\n    modelId: request.model,\n    responseTime,\n    status: response.status,\n    success: response.ok,\n    usage: response.data?.usage,\n    hasTools: !!request.tools,\n    messageCount: request.messages?.length || 0,\n    timestamp: endTime\n  };\n}\n```\n\n### 健康检查\n```typescript\nasync healthCheck(): Promise<HealthStatus> {\n  try {\n    const response = await fetch(`${this.config.baseUrl}/health`, {\n      method: 'GET',\n      timeout: 5000\n    });\n\n    return {\n      status: response.ok ? 'healthy' : 'unhealthy',\n      timestamp: Date.now(),\n      providerId: this.config.type,\n      responseTime: response.ok ? undefined : 'timeout'\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      timestamp: Date.now(),\n      providerId: this.config.type,\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n}\n```\n\n## 🌐 API 协议支持\n\n### OpenAI 协议\n- **端点**: `/v1/chat/completions`, `/v1/completions`, `/v1/embeddings`\n- **认证**: Bearer Token\n- **支持**: 流式响应、工具调用、函数调用\n\n### OpenAI 兼容协议\n- **Provider**: LM Studio, Qwen, iFlow, GLM\n- **端点**: `/v1/chat/completions`\n- **认证**: Bearer Token / OAuth 2.0\n- **支持**: 流式响应、工具调用（兼容性处理）\n\n### OpenAI Responses 协议\n- **Provider**: Generic Responses Provider\n- **端点**: `/v1/responses`\n- **认证**: Bearer Token\n- **特性**:\n  - 新一代 OpenAI API 原生支持\n  - 自动 Beta 头部注入（`responses-2024-12-17`）\n  - 简化的请求格式（`input` 替代 `messages`）\n  - 原生工具调用支持\n  - 完整的错误状态码处理\n- **转换路径**: 可通过 LLM Switch 转换为 Chat 格式或直接透传\n\n## 🛠️ 调试和诊断\n\n### 请求/响应快照\n```typescript\n// 保存请求快照（调试模式）\nif (this.isDebugEnhanced) {\n  await this.saveRequestSnapshot(request, 'provider-in');\n}\n\n// 保存响应快照（调试模式）\nif (this.isDebugEnhanced) {\n  await this.saveResponseSnapshot(response, 'provider-out');\n}\n```\n\n### 错误诊断\n```typescript\n// 详细错误信息\nconst errorInfo = {\n  requestId: request._metadata?.requestId,\n  providerId: this.config.type,\n  error: error.message,\n  statusCode: error.status,\n  url: error.config?.url,\n  method: error.config?.method,\n  headers: error.config?.headers,\n  timestamp: Date.now()\n};\n\nthis.logger.logModule(this.id, 'provider-error', errorInfo);\n```\n\n## 📝 环境变量\n\n### 通用环境变量\n- `ROUTECODEX_UPSTREAM_TIMEOUT_MS`: 上游请求超时时间（默认 300000ms）\n- `ROUTECODEX_MAX_RETRIES`: 最大重试次数（默认 3）\n- `ROUTECODEX_RETRY_DELAY`: 重试延迟时间（默认 1000ms）\n\n### Provider 特定环境变量\n- `GLM_HTTP_TIMEOUT_MS`: GLM Provider 超时时间\n- `Qwen_OAUTH_TIMEOUT`: Qwen OAuth 超时时间\n- `IFLOW_OAUTH_TIMEOUT`: iFlow OAuth 超时时间\n\n## 🔧 扩展性\n\n### 创建新的 Provider\n```typescript\nclass CustomProvider implements ProviderModule {\n  readonly type = 'custom-provider';\n  readonly protocol = 'custom-api';\n\n  async processIncoming(request: any): Promise<ProviderResponse> {\n    // 1. 验证请求\n    this.validateRequest(request);\n\n    // 2. 构建请求配置\n    const config = this.buildConfig(request);\n\n    // 3. 发送 HTTP 请求\n    const response = await this.sendRequest(config);\n\n    // 4. 处理响应\n    return this.processResponse(response);\n  }\n\n  private validateRequest(request: any): void {\n    // 自定义验证逻辑\n  }\n\n  private buildConfig(request: any): HttpRequestConfig {\n    // 自定义请求构建逻辑\n  }\n\n  private async sendRequest(config: HttpRequestConfig): Promise<Response> {\n    // 自定义 HTTP 请求逻辑\n  }\n\n  private processResponse(response: Response): ProviderResponse {\n    // 自定义响应处理逻辑\n  }\n}\n```\n\n### 自定义认证机制\n```typescript\nclass CustomAuthHandler implements AuthHandler {\n  async authenticate(config: AuthConfig): Promise<AuthResult> {\n    switch (config.type) {\n      case 'custom':\n        return this.handleCustomAuth(config);\n      case 'oauth':\n        return this.handleOAuth(config);\n      default:\n        throw new Error(`Unsupported auth type: ${config.type}`);\n    }\n  }\n\n  private async handleCustomAuth(config: CustomAuthConfig): Promise<AuthResult> {\n    // 自定义认证逻辑\n  }\n}\n```\n\n## 📈 版本信息\n\n- **当前版本**: 2.0.0\n- **新增特性**: 增强的认证支持、性能监控、错误处理\n- **兼容性**: RouteCodex Pipeline >= 2.0.0\n- **TypeScript**: >= 5.0.0\n- **Node.js**: >= 18.0.0\n\n## 🔗 依赖关系\n\n- **rcc-debugcenter**: 调试中心集成\n- **PipelineDebugLogger**: 模块日志记录\n- **ErrorHandlingCenter**: 错误处理集成\n- **BaseModule**: 基础模块接口\n\n## 🚨 已知限制\n\n### 当前限制\n1. **协议版本支持**: 主要支持 API v1 版本\n2. **并发控制**: 单个 Provider 实例的并发限制\n3. **连接池**: 简单的连接管理，无高级连接池\n4. **缓存机制**: 无响应缓存功能\n\n### 未来计划\n1. **连接池管理**: 实现高级连接池和连接复用\n2. **响应缓存**: 智能缓存机制\n3. **负载均衡**: 多实例负载均衡\n4. **协议版本管理**: 支持多版本 API\n\n## 📞 技术支持\n\n如有问题或建议，请：\n1. 检查 Provider 配置是否正确\n2. 验证认证信息是否有效\n3. 查看调试日志了解详细信息\n4. 检查网络连接和防火墙设置\n\n## 🔄 更新日志\n\n### v2.0.0 (2025-10-17)\n- ✨ 新增完整的 Provider 框架文档\n- 🔄 统一的 Provider 接口和响应格式\n- 🛡️ 增强的错误处理和重试机制\n- 📊 完善的性能监控和健康检查\n- 🔧 支持多种认证机制（API Key、OAuth 2.0）\n- 🌐 扩展的协议支持\n\n### v1.5.0 (2025-01-22)\n- 🔧 GLM Provider 1210 兼容性改进\n- 📊 性能监控功能增强\n- 🛡️ 错误处理机制优化\n\n---\n\n**最后更新**: 2025-10-17 - 全面更新 Provider 模块文档",
    "src/modules/pipeline/modules/workflow": "# Workflow 模块\n\nWorkflow 模块提供智能流式控制功能，处理流式（streaming）和非流式（non-streaming）请求之间的转换，支持请求缓冲、响应管理和多种流式协议适配。\n\n## 🎯 模块概述\n\nWorkflow 模块是流水线架构的第 2 层，位于 LLMSwitch 和 Compatibility 之间，负责控制流式请求的处理方式。它不仅处理传统的流式/非流式转换，还支持 **Responses API 流式事件处理**，确保不同协议间的流式响应都能正确转换和管理。\n\n### 📋 核心职责\n- **流式转换**: 流式 ↔ 非流式请求的智能转换\n- **协议适配**: 支持 Chat 和 Responses API 的不同流式格式\n- **事件处理**: Server-Sent Events (SSE) 的规范化处理\n- **缓冲管理**: 流式数据的智能缓冲和分块\n- **响应重建**: 将分块响应重建成完整响应格式\n\n## 🔄 支持的流式转换\n\n### 📡 传统流式控制\n- **实现文件**: `streaming-control.ts`\n- **功能**: Chat Completions API 的流式转换\n- **特性**:\n  - 流式请求 → 非流式发送给供应商\n  - 非流式响应 → 保持非流式返回客户端\n  - 流式参数处理和保存\n  - 错误边界处理和恢复\n\n### 🆕 Responses 流式处理\n- **实现文件**: `responses-streaming-workflow.ts`\n- **功能**: Responses API 的流式事件处理\n- **特性**:\n  - **SSE 事件解析**: 解析 `response.output_text.delta` 等事件\n  - **响应重建**: 将分块事件重建成完整 Responses 格式\n  - **元数据处理**: 处理事件元数据和序列号\n  - **工具调用支持**: 处理 `response.tool_call.delta` 事件\n  - **多模态处理**: 支持文本、图像、工具调用的混合流式内容\n\n## 🌟 核心功能\n\n### 🔄 Chat 流式转换控制\n```typescript\n// 处理传统流式请求\nif (request.stream) {\n  converted._originalStream = request.stream;\n  converted.stream = false;  // 强制非流式发送\n}\n\n// 保存流式选项\nif (request.stream_options) {\n  converted._originalStreamOptions = request.stream_options;\n  delete converted.stream_options;\n}\n```\n\n### 📡 Responses 流式事件处理\n```typescript\n// 处理 Responses 流式事件\nconst processedEvents = await this.processResponseEvents(events);\nconst rebuiltResponse = this.rebuildResponsesResponse(processedEvents);\n\nreturn {\n  ...rebuiltResponse,\n  _streamingEvents: processedEvents,\n  _originalProtocol: 'responses'\n};\n```\n\n### 🛡️ 错误边界处理\n```typescript\n// 智能错误处理\ntry {\n  const result = await this.processStreamingRequest(request);\n} catch (error) {\n  if (this.isStreamingRequest(request)) {\n    return this.createStreamingErrorResponse(error, request._protocol);\n  }\n  throw this.createStandardErrorResponse(error);\n}\n```\n\n## 📁 文件结构\n\n```\nsrc/modules/pipeline/modules/workflow/\n├── streaming-control.ts              # 传统流式控制实现\n├── responses-streaming-workflow.ts   # Responses 流式处理实现 ⭐\n├── streaming-event-processor.ts      # 流式事件处理工具\n├── response-rebuilder.ts             # 响应重建工具\n└── README.md                         # 本文档\n```\n\n## 🔄 工作流类型详解\n\n### 📡 传统流式控制 (StreamingControlWorkflow)\n```typescript\nexport class StreamingControlWorkflow implements WorkflowModule {\n  readonly type = 'streaming-control';\n  readonly workflowType = 'streaming-converter';\n\n  async processIncoming(request: any): Promise<any> {\n    // Chat Completions 流式转换逻辑\n    if (request.stream) {\n      return this.convertStreamingToNonStreaming(request);\n    }\n    return request;\n  }\n\n  async processStreamingControl(request: any): Promise<any> {\n    // 专门的流式控制处理\n    return this.handleStreamingControl(request);\n  }\n}\n```\n\n### 🆕 Responses 流式处理 (ResponsesStreamingWorkflow)\n```typescript\nexport class ResponsesStreamingWorkflow implements WorkflowModule {\n  readonly type = 'responses-streaming-workflow';\n  readonly workflowType = 'responses-event-processor';\n\n  async processIncoming(request: any): Promise<any> {\n    // Responses API 流式事件处理\n    if (request._protocol === 'responses' && request._hasStreamingEvents) {\n      return this.processResponsesStreamingEvents(request);\n    }\n    return request;\n  }\n\n  private async processResponsesStreamingEvents(request: any): Promise<any> {\n    // 处理 SSE 事件流\n    const events = this.extractStreamingEvents(request);\n    const processedEvents = await this.processResponseEvents(events);\n\n    // 重建完整 Responses 响应\n    return this.rebuildResponsesResponse(processedEvents);\n  }\n}\n```\n\n### 🔄 流式到非流式转换\n```typescript\nprivate convertStreamingToNonStreaming(request: any): any {\n  const converted = { ...request };\n\n  // 保存原始流式设置\n  if (request.stream) {\n    converted._originalStream = request.stream;\n    converted.stream = false;  // 强制非流式\n  }\n\n  // 处理流式选项\n  if (request.stream_options) {\n    converted._originalStreamOptions = request.stream_options;\n    delete converted.stream_options;\n  }\n\n  return converted;\n}\n```\n\n### 📡 Responses 事件处理\n```typescript\nprivate async processResponseEvents(events: StreamingEvent[]): Promise<ProcessedEvent[]> {\n  const processedEvents: ProcessedEvent[] = [];\n\n  for (const event of events) {\n    switch (event.type) {\n      case 'response.output_text.delta':\n        processedEvents.push(this.processTextDeltaEvent(event));\n        break;\n      case 'response.tool_call.delta':\n        processedEvents.push(this.processToolCallDeltaEvent(event));\n        break;\n      case 'response.done':\n        processedEvents.push(this.processCompletionEvent(event));\n        break;\n    }\n  }\n\n  return processedEvents;\n}\n\nprivate rebuildResponsesResponse(events: ProcessedEvent[]): ResponsesResponse {\n  const outputText = this.rebuildOutputText(events);\n  const toolCalls = this.rebuildToolCalls(events);\n  const metadata = this.extractMetadata(events);\n\n  return {\n    id: metadata.responseId,\n    status: 'completed',\n    output: [{\n      type: 'message',\n      role: 'assistant',\n      content: [\n        { type: 'input_text', text: outputText },\n        ...toolCalls\n      ]\n    }],\n    usage: metadata.usage,\n    _streamingEvents: events\n  };\n}\n```\n\n## 🚀 使用示例\n\n### 传统流式控制使用\n```typescript\nimport { StreamingControlWorkflow } from './streaming-control.js';\n\nconst workflow = new StreamingControlWorkflow({\n  type: 'streaming-control',\n  config: {\n    streamingToNonStreaming: true,\n    nonStreamingToStreaming: false  // 当前未实现\n  }\n}, dependencies);\n\nawait workflow.initialize();\n\n// 处理流式请求\nconst streamingRequest = {\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello' }],\n  stream: true,\n  stream_options: {\n    include_usage: true\n  }\n};\n\nconst convertedRequest = await workflow.processIncoming(streamingRequest);\n// 结果: { model: 'gpt-4', messages: [...], stream: false, _originalStream: true }\n```\n\n### Responses 流式处理使用\n```typescript\nimport { ResponsesStreamingWorkflow } from './responses-streaming-workflow.js';\n\nconst responsesWorkflow = new ResponsesStreamingWorkflow({\n  type: 'responses-streaming-workflow',\n  config: {\n    enableEventProcessing: true,\n    rebuildCompleteResponse: true\n  }\n}, dependencies);\n\nawait responsesWorkflow.initialize();\n\n// 处理 Responses 流式事件\nconst responsesEventsRequest = {\n  _protocol: 'responses',\n  _hasStreamingEvents: true,\n  streamingEvents: [\n    { type: 'response.output_text.delta', data: { delta: 'Hello' } },\n    { type: 'response.output_text.delta', data: { delta: ' world!' } },\n    { type: 'response.done', data: { usage: { total_tokens: 10 } } }\n  ]\n};\n\nconst rebuiltResponse = await responsesWorkflow.processIncoming(responsesEventsRequest);\n// 结果: 完整的 Responses API 响应格式\n```\n\n### 在流水线配置中使用\n```typescript\nconst pipelineConfig = {\n  modules: {\n    llmSwitch: {\n      type: 'llmswitch-response-chat',  // Responses 协议支持\n      config: { enableValidation: true }\n    },\n    workflow: {\n      type: 'responses-streaming-workflow',  // Responses 流式处理\n      config: { enableEventProcessing: true }\n    },\n    compatibility: {\n      type: 'passthrough-compatibility',\n      config: {}\n    },\n    provider: {\n      type: 'lmstudio-http',\n      config: { baseUrl: 'http://localhost:1234' }\n    }\n  }\n};\n\n// 完整的 Responses API 流式请求处理流程\nconst request = {\n  model: 'gpt-4',\n  instructions: 'You are a helpful assistant.',\n  input: [\n    {\n      type: 'message',\n      role: 'user',\n      content: [{ type: 'input_text', text: 'Hello!' }]\n    }\n  ],\n  stream: true  // 流式请求\n};\n\n// 经过流水线处理：\n// 1. LLM Switch: Responses → Chat 转换\n// 2. Workflow: 流式控制处理\n// 3. Compatibility: 格式适配\n// 4. Provider: 发送给供应商\n```\n\n## ⚙️ 配置选项\n\n### 📡 传统流式控制配置\n```typescript\ninterface StreamingControlConfig {\n  streamingToNonStreaming?: boolean;    // 流式转非流式 (默认: true)\n  nonStreamingToStreaming?: boolean;    // 非流式转流式 (默认: false，未实现)\n  bufferSize?: number;                  // 缓冲区大小\n  chunkSize?: number;                   // 数据块大小\n  timeout?: number;                     // 超时时间\n  preserveStreamOptions?: boolean;      // 保留流式选项\n}\n```\n\n### 🆕 Responses 流式处理配置\n```typescript\ninterface ResponsesStreamingConfig {\n  enableEventProcessing?: boolean;      // 启用事件处理\n  rebuildCompleteResponse?: boolean;    // 重建完整响应\n  eventTimeout?: number;                // 事件处理超时\n  maxEventBufferSize?: number;          // 最大事件缓冲区\n  preserveEventOrder?: boolean;         // 保持事件顺序\n  enableMetrics?: boolean;              // 启用性能指标\n}\n```\n\n### 默认配置\n```typescript\nconst defaultStreamingConfig = {\n  streamingToNonStreaming: true,      // 启用流式到非流式转换\n  nonStreamingToStreaming: false,     // 禁用非流式到流式转换\n  bufferSize: 1024,                   // 1KB 缓冲区\n  chunkSize: 512,                     // 512字节数据块\n  timeout: 30000,                     // 30秒超时\n  preserveStreamOptions: true         // 保留流式选项\n};\n\nconst defaultResponsesConfig = {\n  enableEventProcessing: true,        // 启用事件处理\n  rebuildCompleteResponse: true,      // 重建完整响应\n  eventTimeout: 60000,                // 60秒事件超时\n  maxEventBufferSize: 1000,           // 最大1000个事件\n  preserveEventOrder: true,           // 保持事件顺序\n  enableMetrics: true                 // 启用性能指标\n};\n```\n\n## 📊 流式参数处理\n\n### 📡 Chat 流式参数\n```typescript\n// OpenAI Chat Completions 流式参数\ninterface ChatStreamOptions {\n  stream?: boolean;                   // 启用流式响应\n  stream_options?: {\n    include_usage?: boolean;          // 包含使用统计\n    chunk_size?: number;              // 数据块大小\n  };\n}\n\n// 处理后的流式参数\ninterface ProcessedChatStreamOptions {\n  _originalStream?: boolean;          // 原始流式设置\n  _originalStreamOptions?: ChatStreamOptions; // 原始流式选项\n  _isStreaming?: boolean;             // 标记为流式请求\n}\n```\n\n### 🆕 Responses 流式参数\n```typescript\n// OpenAI Responses API 流式参数\ninterface ResponsesStreamOptions {\n  stream?: boolean;                   // 启用流式响应\n  tools?: any[];                      // 工具定义\n  tool_choice?: any;                  // 工具选择\n  max_output_tokens?: number;         // 最大输出令牌\n}\n\n// Responses 流式事件结构\ninterface ResponsesStreamingEvent {\n  type: string;                       // 事件类型\n  data: any;                          // 事件数据\n  timestamp?: number;                 // 时间戳\n  sequence_number?: number;           // 序列号\n  item_id?: string;                   // 项目ID\n}\n\n// 处理后的 Responses 参数\ninterface ProcessedResponsesStreamOptions {\n  _protocol: 'responses';             // 协议标识\n  _hasStreamingEvents?: boolean;      // 是否包含流式事件\n  _streamingEvents?: ResponsesStreamingEvent[]; // 流式事件数组\n  _originalStreamOptions?: ResponsesStreamOptions; // 原始流式选项\n}\n```\n\n## 🛡️ 错误处理\n\n### 多层错误处理\n```typescript\n// 智能错误处理策略\ntry {\n  const result = await this.processStreamingRequest(request);\n} catch (error) {\n  // 根据协议类型选择错误处理方式\n  if (request._protocol === 'responses') {\n    return this.createResponsesErrorResponse(error);\n  } else if (request._originalStream) {\n    return this.createStreamingErrorResponse(error);\n  }\n  throw this.createStandardErrorResponse(error);\n}\n\n// Responses API 错误响应\nprivate createResponsesErrorResponse(error: any): ResponsesError {\n  return {\n    id: `error_${Date.now()}`,\n    type: 'error',\n    error: {\n      type: 'invalid_request_error',\n      message: error.message,\n      code: 'streaming_processing_error'\n    },\n    _protocol: 'responses',\n    _errorContext: {\n      workflowType: this.type,\n      timestamp: Date.now()\n    }\n  };\n}\n\n// Chat 流式错误响应\nprivate createStreamingErrorResponse(error: any): StreamingError {\n  return {\n    id: `error_${Date.now()}`,\n    object: 'chat.completion.chunk',\n    created: Math.floor(Date.now() / 1000),\n    model: 'error-model',\n    choices: [{\n      index: 0,\n      delta: { role: 'assistant', content: `Error: ${error.message}` },\n      finish_reason: 'error'\n    }],\n    _errorContext: {\n      originalError: error.message,\n      workflowType: this.type\n    }\n  };\n}\n```\n\n### 详细错误日志\n```typescript\n// 分层错误日志记录\nthis.logger.logModule(this.id, 'workflow-error', {\n  error: error instanceof Error ? error.message : String(error),\n  protocol: request._protocol || 'unknown',\n  requestType: this.inferRequestType(request),\n  hasStreamingEvents: !!request._hasStreamingEvents,\n  originalStream: !!request._originalStream,\n  errorContext: {\n    workflowType: this.type,\n    timestamp: Date.now(),\n    stack: error.stack\n  }\n});\n```\n\n## 📈 性能优化\n\n### 内存管理策略\n```typescript\n// 流式数据内存管理\nclass StreamingEventBuffer {\n  private events: ResponsesStreamingEvent[] = [];\n  private maxBufferSize: number;\n\n  constructor(maxSize: number = 1000) {\n    this.maxBufferSize = maxSize;\n  }\n\n  addEvent(event: ResponsesStreamingEvent): void {\n    // 添加事件并管理内存\n    this.events.push(event);\n\n    // 防止内存泄漏\n    if (this.events.length > this.maxBufferSize) {\n      this.events.shift(); // 移除最旧的事件\n    }\n  }\n\n  getEvents(): ResponsesStreamingEvent[] {\n    return [...this.events]; // 返回副本避免外部修改\n  }\n}\n```\n\n### 异步事件处理\n```typescript\n// 异步处理流式事件避免阻塞\nasync processStreamingEventsAsync(events: ResponsesStreamingEvent[]): Promise<ProcessedEvent[]> {\n  const batches = this.createEventBatches(events);\n  const processedBatches = await Promise.all(\n    batches.map(batch => this.processEventBatch(batch))\n  );\n\n  return processedBatches.flat();\n}\n\n// 事件批处理\nprivate createEventBatches(events: ResponsesStreamingEvent[], batchSize: number = 50): ResponsesStreamingEvent[][] {\n  const batches: ResponsesStreamingEvent[][] = [];\n  for (let i = 0; i < events.length; i += batchSize) {\n    batches.push(events.slice(i, i + batchSize));\n  }\n  return batches;\n}\n```\n\n## 🔍 调试支持\n\n### 流式处理调试\n```typescript\n// 详细的流式处理日志\nthis.logger.logModule(this.id, 'streaming-processing-start', {\n  protocol: request._protocol,\n  hasStreamingEvents: !!request._hasStreamingEvents,\n  eventCount: request._streamingEvents?.length || 0,\n  originalStream: !!request._originalStream\n});\n\n// 事件处理进度\nthis.logger.logModule(this.id, 'event-processing-progress', {\n  processedEvents: processedCount,\n  totalEvents: totalEvents,\n  percentage: Math.round((processedCount / totalEvents) * 100),\n  processingTime: Date.now() - startTime\n});\n\n// 响应重建完成\nthis.logger.logModule(this.id, 'response-rebuild-complete', {\n  rebuiltResponseId: response.id,\n  outputLength: response.output?.[0]?.content?.[0]?.text?.length || 0,\n  toolCallCount: response.output?.[0]?.content?.filter(c => c.type === 'tool_call').length || 0,\n  totalProcessingTime: Date.now() - startTime\n});\n```\n\n### 状态监控\n```typescript\n// 工作流状态监控\ninterface WorkflowStatus {\n  id: string;\n  type: string;\n  workflowType: string;\n  isInitialized: boolean;\n  config: any;\n  metrics?: {\n    processedRequests: number;\n    streamingRequestsProcessed: number;\n    responsesEventsProcessed: number;\n    averageProcessingTime: number;\n    errorCount: number;\n  };\n}\n\n// 获取详细状态\ngetStatus(): WorkflowStatus {\n  return {\n    id: this.id,\n    type: this.type,\n    workflowType: this.workflowType,\n    isInitialized: this.isInitialized,\n    config: this.config,\n    metrics: this.metrics?.getMetrics()\n  };\n}\n```\n\n## 🌐 协议支持矩阵\n\n| 协议类型 | 流式支持 | 事件处理 | 响应重建 | 工具调用 | 状态 |\n|---------|---------|---------|---------|---------|------|\n| Chat Completions | ✅ | ✅ | ✅ | ✅ | 稳定 |\n| Responses API | ✅ | ✅ | ✅ | ✅ | 新增 |\n| Anthropic | ❌ | ❌ | ❌ | ❌ | 计划中 |\n| Custom | 🔄 | 🔄 | 🔄 | 🔄 | 扩展中 |\n\n## 🚨 已知限制\n\n### 📡 当前限制\n1. **Chat 流式响应生成** - 不实现非流式到流式的转换\n2. **多协议混合** - 不支持同一请求中的多种协议混合\n3. **事件顺序保证** - 在高并发下可能出现事件乱序\n4. **大事件处理** - 超大流式事件可能导致内存压力\n\n### 🆕 Responses API 限制\n1. **复杂工具调用** - 复杂的流式工具调用处理还在优化中\n2. **多模态流式** - 图像和视频的流式处理支持有限\n3. **长文本重建** - 超长响应的重建性能需要优化\n4. **实时性** - 事件处理和响应重建的延迟问题\n\n### 🔄 未来计划\n1. **完整流式支持** - 实现完整的双向流式转换\n2. **多协议统一** - 统一所有协议的流式处理逻辑\n3. **实时优化** - 减少事件处理和响应重建的延迟\n4. **智能缓冲** - 基于内容类型的智能缓冲策略\n5. **协议扩展** - 支持更多 AI 协议的流式处理\n\n## 🔧 扩展性\n\n### 添加新的工作流类型\n```typescript\n// 新协议工作流实现\nclass NewProtocolWorkflow implements WorkflowModule {\n  readonly type = 'new-protocol-workflow';\n  readonly workflowType = 'new-protocol-processor';\n\n  async processIncoming(request: any): Promise<any> {\n    if (request._protocol === 'new-protocol') {\n      return this.processNewProtocolStreaming(request);\n    }\n    return request;\n  }\n\n  private async processNewProtocolStreaming(request: any): Promise<any> {\n    // 实现新协议的流式处理逻辑\n    const events = this.extractNewProtocolEvents(request);\n    return this.rebuildNewProtocolResponse(events);\n  }\n}\n```\n\n### 自定义事件处理器\n```typescript\n// 自定义事件处理器\nclass CustomEventProcessor {\n  async processEvents(events: any[], processor: (event: any) => Promise<any>): Promise<any[]> {\n    // 自定义事件处理逻辑\n    const processedEvents = [];\n\n    for (const event of events) {\n      try {\n        const processed = await processor(event);\n        processedEvents.push(processed);\n      } catch (error) {\n        // 错误恢复策略\n        processedEvents.push(this.createErrorEvent(event, error));\n      }\n    }\n\n    return processedEvents;\n  }\n}\n```\n\n## 📈 版本信息\n\n- **当前版本**: 2.0.0\n- **新增特性**: Responses API 流式事件处理、智能错误恢复、性能监控\n- **兼容性**: RouteCodex Pipeline >= 2.0.0\n- **TypeScript**: >= 5.0.0\n- **Node.js**: >= 18.0.0\n\n## 🔗 依赖关系\n\n- **rcc-debugcenter**: 调试中心集成\n- **PipelineDebugLogger**: 模块日志记录\n- **ErrorHandlingCenter**: 错误处理集成\n- **BaseModule**: 基础模块接口\n- **StreamingEventProcessor**: 流式事件处理工具\n- **ResponseRebuilder**: 响应重建工具\n\n## 🔄 更新日志\n\n### v2.0.0 (2025-10-17)\n- ✨ 新增 Responses API 流式事件处理支持\n- 🆕 实现完整的 SSE 事件解析和响应重建\n- 🔄 增强的错误处理和恢复机制\n- 📊 完善的性能监控和调试功能\n- 🛡️ 改进的内存管理和缓冲策略\n- 📚 更新文档，添加详细的使用示例和配置指南\n\n### v1.5.0 (2025-01-22)\n- 🔧 完善传统流式控制功能\n- 📊 增加性能监控和日志记录\n- 🛡️ 改进错误处理机制\n\n### v1.0.0 (2025-01-22)\n- 🎯 初始版本发布\n- 🔄 基础的流式控制功能\n- 📊 配置驱动的工作流处理\n\n---\n\n**最后更新**: 2025-10-17 - 全面更新 Workflow 模块文档，新增 Responses API 流式处理支持",
    "src/modules/pipeline/interfaces": "# Pipeline Module Interfaces\n\n基于RouteCodex 9大核心架构原则的流水线模块接口定义，规范各个模块的行为和交互方式。\n\n## 🚨 9大架构原则接口约束\n\n### **原则1-3: 技术架构基础接口约束**\n\n基于RouteCodex核心架构原则，各模块接口严格遵循以下职责分离：\n\n#### **LLMSwitch模块接口约束 (原则1: 统一工具处理)**\n```typescript\ninterface LLMSwitchModule {\n  // ✅ 允许的职责 (原则1合规)\n  processIncoming(request: any): Promise<any>;  // 委托给llmswitch-core\n  processOutgoing(response: any): Promise<any>; // 委托给llmswitch-core\n\n  // ❌ 禁止的职责 (违反原则1)\n  // 不直接处理工具调用转换，全部委托给llmswitch-core\n  // 不进行provider特定的字段适配\n  // 不重复实现工具文本收割逻辑\n}\n```\n\n#### **Compatibility模块接口约束 (原则2: 最小兼容层)**\n```typescript\ninterface CompatibilityModule {\n  // ✅ 允许的职责 (原则2合规)\n  processIncoming(request: any): Promise<any>;  // provider特定配置注入\n  processOutgoing(response: any): Promise<any>; // 字段标准化\n\n  // ❌ 禁止的职责 (违反原则2)\n  // 不处理工具调用格式转换 (原则1)\n  // 不进行文本工具收割 (原则1)\n  // 不重复llmswitch-core的功能\n  // 不实现fallback逻辑 (原则6)\n}\n```\n\n#### **Provider模块接口约束 (原则4-6: 质量保证)**\n```typescript\ninterface ProviderModule {\n  // ✅ 允许的职责 (原则4-6合规)\n  processIncoming(request: any): Promise<any>;  // HTTP请求准备\n  processOutgoing(response: any): Promise<any>; // HTTP响应处理\n\n  // ❌ 禁止的职责 (违反原则4-6)\n  // 不修改数据格式（由Compatibility层处理）\n  // 不处理工具调用逻辑\n  // 不隐藏错误 (原则4)\n  // 不实现silent failures (原则5)\n}\n```\n\n### **原则7-9: 可维护性设计接口约束**\n\n#### **功能分离原则接口设计 (原则7)**\n```typescript\n// 每个模块接口只负责单一职责\ninterface ModuleInterface {\n  // 单一职责方法\n  process(request: any): Promise<any>;\n\n  // 不包含多重职责\n  // 避免功能重叠\n}\n\n// 模块间依赖明确\ninterface ModuleDependencies {\n  llmSwitch: LLMSwitchModule;    // 协议转换\n  workflow: WorkflowModule;      // 流式控制\n  compatibility: CompatibilityModule; // 字段适配\n  provider: ProviderModule;      // HTTP通信\n}\n```\n\n#### **配置驱动原则接口设计 (原则8)**\n```typescript\ninterface ConfigurableModule {\n  // 配置驱动初始化\n  initialize(config: ModuleConfig): Promise<void>;\n\n  // 配置验证\n  validateConfig(config: any): boolean;\n\n  // 热更新支持\n  updateConfig(config: Partial<ModuleConfig>): Promise<void>;\n}\n\ninterface ModuleConfig {\n  type: string;           // 模块类型标识\n  config: any;           // 模块特定配置\n  validation?: ConfigValidation; // 配置验证规则\n}\n```\n\n#### **模块化原则接口设计 (原则9)**\n```typescript\n// 文件大小控制：每个接口文件不超过200行\n// 功能分拆：按职责定义不同的接口文件\n\n// llm-switch-module.ts (单一职责：协议转换)\ninterface LLMSwitchModule { /* 50行 */ }\n\n// workflow-module.ts (单一职责：流式控制)\ninterface WorkflowModule { /* 40行 */ }\n\n// compatibility-module.ts (单一职责：字段适配)\ninterface CompatibilityModule { /* 60行 */ }\n\n// provider-module.ts (单一职责：HTTP通信)\ninterface ProviderModule { /* 50行 */ }\n```\n\n## 接口清单\n\n### 核心处理接口\n- **llm-switch-module.ts**: LLMSwitch模块接口，定义协议转换行为\n- **workflow-module.ts**: Workflow模块接口，定义流式控制行为\n- **compatibility-module.ts**: Compatibility模块接口，定义字段转换行为\n- **provider-module.ts**: Provider模块接口，定义服务提供商行为\n\n## 基于架构原则的设计\n\n### 原则7: 功能分离的统一接口设计\n所有模块都遵循统一的设计模式，确保职责单一：\n- 异步处理方法\n- 配置驱动的初始化\n- 统一的错误处理 (原则4-5)\n- 结构化日志支持 (原则5)\n\n### 原则7: 职责边界清晰\n基于接口设计强制执行模块职责边界：\n- **LLMSwitch**: 协议透传，委托工具处理给llmswitch-core (原则1)\n- **Compatibility**: 仅做provider特定字段适配 (原则2)\n- **Provider**: 纯HTTP通信，错误立即暴露 (原则4)\n\n### 原则6: 清晰解决方案的可替换性\n基于接口的设计允许：\n- 运行时替换模块实现\n- A/B测试不同算法\n- 条件性模块选择\n- 易于单元测试\n- **无fallback逻辑**: 单一明确的实现路径\n\n### 原则8: 配置驱动标准化\n所有模块都使用标准化的配置格式：\n- 类型标识\n- 配置参数\n- 验证规则\n- 默认值\n- **无硬编码**: 所有参数可配置\n\n### 原则9: 模块化文件组织\n- **文件大小控制**: 每个接口文件不超过200行\n- **功能分拆**: 按职责定义不同的接口文件\n- **依赖管理**: 明确模块间依赖关系\n- **可维护性**: 单一文件单一职责\n\n## 接口使用示例\n\n```typescript\n// 实现LLMSwitch接口\nclass CustomLLMSwitch implements LLMSwitchModule {\n  async transformRequest(request: any): Promise<any> {\n    // 实现协议转换逻辑\n  }\n\n  getSupportedProtocols(): { source: string[]; target: string[] } {\n    return { source: ['openai'], target: ['custom'] };\n  }\n}\n\n// 实现Provider接口\nclass CustomProvider implements ProviderModule {\n  async sendRequest(request: any): Promise<any> {\n    // 实现请求处理逻辑\n  }\n\n  async authenticate(): Promise<AuthResult> {\n    // 实现认证逻辑\n  }\n}\n```",
    "src/modules/enhancement": "# Enhancement Module\n\n模块增强工厂与模板集合。为现有模块（如 Pipeline/Provider）动态注入监控、日志、度量等能力，保持原有接口不变。\n\n## 主要职责\n- 增强注册与工厂创建（`ModuleEnhancementFactory`/`EnhancementRegistry`）\n- 模板库（`templates/`）为不同模块提供可复用的增强外壳\n- 全局增强配置管理（`EnhancementConfigManager`）\n\n## 对外接口\n- `ModuleEnhancementFactory`、`EnhancementRegistry`\n- `EnhancementConfigManager`\n\n## 用法\n```ts\nimport { ModuleEnhancementFactory } from './module-enhancement-factory.js';\nconst factory = new ModuleEnhancementFactory();\nconst enhanced = factory.enhance(pipelineModule, { performanceTracking: true });\n```\n\n",
    "src/modules/dry-run-engine": "# Dry-Run Engine\n\n干运行引擎，基于现有流水线接口，对请求在“仅路由/仅流水线/全链路”等不同作用域进行离线评估与回放。\n\n## 主要职责\n- 路由/流水线的非侵入式模拟执行\n- 统计与对比（请求预算、token 估计、工具使用等）\n- 可选持久化，用于后续回放\n\n## 对外接口\n- `DryRunEngine`（`core/engine.ts`）\n  - `runRequest/runResponse/runBidirectional`（按作用域执行）\n- `dryRunEngine`（单例）\n\n## 用法\n```ts\nimport { dryRunEngine } from './core/engine.js';\nconst res = await dryRunEngine.runRequest({ /* opts */ });\n```\n\n",
    "src/modules/config-manager": "# 配置管理模块 (Config Manager Module)\n\n## 功能概述\n配置管理模块负责RouteCodex的配置文件管理、热重载和监控。它提供了统一的配置管理接口，支持配置文件的动态更新和实时监控。\n\n## 核心特性\n\n### 🔥 热重载\n- **实时监控**: 监控配置文件变化\n- **自动重载**: 文件变更时自动重新加载\n- **零停机**: 重载过程不中断服务\n- **原子操作**: 配置更新保证原子性\n\n### 📁 文件管理\n- **多文件支持**: 同时监控多个配置文件\n- **路径解析**: 支持相对路径和绝对路径\n- **权限检查**: 自动检查文件读写权限\n- **错误恢复**: 文件错误时的自动恢复\n\n### ⚙️ 配置生成\n- **自动合并**: 自动生成合并配置文件\n- **验证机制**: 配置格式和完整性验证\n- **备份管理**: 自动备份历史配置\n- **版本控制**: 配置版本信息管理\n\n### 📊 监控和统计\n- **变更日志**: 记录所有配置变更\n- **性能监控**: 监控配置加载性能\n- **错误统计**: 统计配置错误和异常\n- **健康检查**: 定期检查配置文件健康状态\n\n## 文件结构\n\n```\nsrc/modules/config-manager/\n├── README.md                           # 本文档\n├── config-manager-module.ts            # 主模块实现\n├── merged-config-generator.ts          # 合并配置生成器\n└── config-watcher.ts                 # 配置文件监控器\n```\n\n### 文件说明\n\n#### `config-manager-module.ts`\n**用途**: 配置管理模块主实现\n**功能**:\n- 模块初始化和生命周期管理\n- 配置文件加载和管理\n- 热重载控制\n- 错误处理和监控\n\n**关键类**:\n- `ConfigManagerModule`: 主模块类\n\n#### `merged-config-generator.ts`\n**用途**: 合并配置生成器\n**功能**:\n- 解析用户配置\n- 合并系统配置\n- 生成合并配置文件\n- 配置验证和错误处理\n\n**关键类**:\n- `MergedConfigGenerator`: 合并配置生成器\n\n#### `config-watcher.ts`\n**用途**: 配置文件监控器\n**功能**:\n- 文件变化监控\n- 事件通知\n- 防抖处理\n- 错误恢复\n\n**关键类**:\n- `ConfigWatcher`: 配置监控器\n\n## 配置系统架构\n\n### 分层配置\n```\n用户配置 (~/.routecodex/config.json)\n    ↓ 解析和转换\nUserConfigParser\n    ↓ 生成路由目标池和流水线配置\nConfigMerger\n    ↓ 合并系统配置\n./config/merged-config.json\n    ↓ 模块加载\n各个系统模块\n```\n\n### 文件位置\n- **用户配置**: `~/.routecodex/config.json`\n- **系统配置**: `./config/modules.json`\n- **合并配置**: `./config/merged-config.json`\n- **AuthFile目录**: `~/.routecodex/auth/`\n\n## 使用示例\n\n### 基础使用\n```typescript\nimport { ConfigManagerModule } from './config-manager-module';\n\nconst configManager = new ConfigManagerModule();\nawait configManager.initialize({\n  mergedConfigPath: './config/merged-config.json',\n  autoReload: true,\n  watchInterval: 5000\n});\n\n// 获取配置\nconst config = await configManager.getMergedConfig();\nconsole.log('Available providers:', Object.keys(config.modules.virtualrouter.config.providers));\n```\n\n### 热重载配置\n```typescript\nconst configManager = new ConfigManagerModule({\n  watchFiles: [\n    '~/.routecodex/config.json',\n    './config/modules.json'\n  ],\n  watchInterval: 2000,\n  autoReload: true,\n  enableEvents: true\n});\n\n// 监听配置变更\nconfigManager.on('configChanged', (event) => {\n  console.log('Configuration changed:', event.filePath);\n  console.log('Change type:', event.changeType);\n});\n\n// 监听重载完成\nconfigManager.on('reloaded', (config) => {\n  console.log('Configuration reloaded successfully');\n  console.log('New version:', config.version);\n});\n```\n\n### 配置生成\n```typescript\n// 手动触发配置生成\nconst success = await configManager.generateMergedConfig();\nif (success) {\n  console.log('Merged configuration generated successfully');\n} else {\n  console.log('Failed to generate merged configuration');\n}\n```\n\n### 配置验证\n```typescript\n// 验证配置文件\nconst validation = await configManager.validateConfig();\nif (validation.isValid) {\n  console.log('Configuration is valid');\n} else {\n  console.log('Configuration errors:', validation.errors);\n}\n```\n\n## 监控和调试\n\n### 性能监控\n```typescript\n// 获取性能指标\nconst metrics = configManager.getMetrics();\nconsole.log('Last reload time:', metrics.lastReloadTime);\nconsole.log('Total reloads:', metrics.totalReloads);\nconsole.log('Average reload time:', metrics.averageReloadTime);\nconsole.log('Error count:', metrics.errorCount);\n```\n\n### 健康检查\n```typescript\n// 检查系统健康状态\nconst health = await configManager.healthCheck();\nconsole.log('Config files accessible:', health.filesAccessible);\nconsole.log('Watcher active:', health.watcherActive);\nconsole.log('Memory usage:', health.memoryUsage);\n```\n\n### 事件处理\n```typescript\n// 监听各种事件\nconfigManager.on('error', (error) => {\n  console.error('Config manager error:', error);\n});\n\nconfigManager.on('warning', (warning) => {\n  console.warn('Config manager warning:', warning);\n});\n\nconfigManager.on('fileChanged', (event) => {\n  console.log('File changed:', event.path, event.type);\n});\n```\n\n## 配置选项\n\n### 模块配置\n```typescript\ninterface ConfigManagerConfig {\n  mergedConfigPath: string;        // 合并配置文件路径\n  autoReload?: boolean;            // 启用自动重载\n  watchInterval?: number;          // 监控间隔 (ms)\n  enableEvents?: boolean;          // 启用事件通知\n  logLevel?: 'debug' | 'info' | 'warn' | 'error'; // 日志级别\n  enableMetrics?: boolean;         // 启用性能指标\n  backupCount?: number;           // 备份文件数量\n}\n```\n\n### 监控配置\n```typescript\ninterface WatchConfig {\n  files: string[];                // 监控的文件列表\n  interval: number;               // 监控间隔 (ms)\n  debounce: number;              // 防抖时间 (ms)\n  persistent: boolean;            // 持久化监控\n  retryCount: number;            // 重试次数\n  retryDelay: number;            // 重试延迟 (ms)\n}\n```\n\n## 最佳实践\n\n### 配置文件管理\n1. **路径规范**: 使用统一的配置文件路径\n2. **权限设置**: 确保配置文件有正确的读写权限\n3. **备份策略**: 定期备份重要配置文件\n4. **版本控制**: 使用版本控制系统管理配置文件\n\n### 性能优化\n1. **监控间隔**: 根据需要设置合理的监控间隔\n2. **防抖处理**: 避免频繁的文件变更触发重载\n3. **资源管理**: 及时清理不需要的监控器\n4. **错误恢复**: 实现完善的错误恢复机制\n\n### 错误处理\n1. **重试机制**: 文件访问失败时自动重试\n2. **降级处理**: 监控失败时降级到手动重载\n3. **日志记录**: 详细记录错误信息\n4. **用户通知**: 及时通知用户配置问题\n\n## 故障排除\n\n### 常见问题\n1. **文件监控不工作**: 检查文件路径和权限\n2. **配置重载失败**: 检查配置文件格式和内容\n3. **内存使用过高**: 调整监控间隔和缓存设置\n4. **权限错误**: 检查文件读写权限\n\n### 调试技巧\n```typescript\n// 启用调试模式\nconst configManager = new ConfigManagerModule({\n  logLevel: 'debug',\n  enableMetrics: true,\n  enableEvents: true\n});\n\n// 检查监控状态\nconst watcherStatus = configManager.getWatcherStatus();\nconsole.log('Watching files:', watcherStatus.watchingFiles);\nconsole.log('Last check time:', watcherStatus.lastCheckTime);\n\n// 手动触发重载\nawait configManager.reloadConfig();\n```\n\n### 日志分析\n```typescript\n// 获取错误日志\nconst errorLogs = configManager.getErrorLogs();\nerrorLogs.forEach(log => {\n  console.log('Error:', log.message);\n  console.log('Timestamp:', log.timestamp);\n  console.log('Stack trace:', log.stack);\n});\n```\n\n## 性能特性\n\n### 资源使用\n- **内存占用**: < 10MB (正常工作状态)\n- **CPU使用**: < 1% (空闲状态), < 5% (重载时)\n- **文件描述符**: 每个监控文件使用1个文件描述符\n- **网络带宽**: 0 (不使用网络)\n\n### 响应时间\n- **配置加载**: < 100ms (正常配置)\n- **配置重载**: < 200ms (包含验证)\n- **文件监控**: < 10ms (变更检测)\n- **事件通知**: < 5ms (事件分发)\n\n## 版本信息\n- **当前版本**: v2.0 (Configuration System Refactor)\n- **构建状态**: ✅ ESM兼容，✅ 测试通过，✅ 生产就绪\n- **性能评级**: ⚡ 优秀 (< 200ms重载时间)\n- **文件监控**: ✅ 实时监控，✅ 自动重载，✅ 错误恢复",
    "src/modules/initialization": "# Initialization Module\n\n并行初始化器与依赖拓扑工具，负责在启动期解析模块依赖关系并以最优并行度完成初始化、健康检查与清理。\n\n## 主要职责\n- 依赖图构建与循环检测\n- 并行度控制与失败重试（指数退避）\n- 初始化统计与健康检查\n- 统一的清理阶段\n\n## 对外接口\n- `ParallelInitializer`（`parallel-initializer.ts`）\n  - `run(tasks, config)`：执行初始化\n  - `cleanup()`：按反向依赖顺序清理\n\n## 用法\n```ts\nimport { ParallelInitializer } from './parallel-initializer.js';\n\nconst init = new ParallelInitializer();\nconst result = await init.run(tasks, { maxConcurrency: 4 });\n```\n\n",
    "src/modules/virtual-router": "# 虚拟路由模块 (Virtual Router Module)\n\n## 功能概述\n虚拟路由模块是RouteCodex的核心组件，负责智能请求路由、负载均衡和协议转换。它支持多个AI服务提供商的动态路由，并提供了高效的请求分发机制。\n\n## 🆕 顺序索引别名系统支持 (Key Alias System) - v2.1 新增\n\n### 核心改进\n虚拟路由模块现在完全支持新的**顺序索引别名系统**，解决了key字段中特殊字符（如\".\"）导致的解析错误：\n\n1. **接收别名目标**: 从配置模块接收 `key1`、`key2` 等别名格式的路由目标\n2. **负载均衡**: 在 `key1`、`key2`、`key3` 等别名间进行轮询\n3. **配置查找**: 使用别名格式 `provider.model.key1` 查找流水线配置\n4. **向后兼容**: 完全兼容单key和多key场景\n\n### 工作流示例\n```\n配置输入: openai.gpt-4 (3个key)\n↓ 配置模块解析\n路由目标: [\n  {providerId: \"openai\", modelId: \"gpt-4\", keyId: \"key1\"},\n  {providerId: \"openai\", modelId: \"gpt-4\", keyId: \"key2\"},\n  {providerId: \"openai\", modelId: \"gpt-4\", keyId: \"key3\"}\n]\n↓ 虚拟路由模块处理\n负载均衡: 在key1、key2、key3间轮询\n配置查找: 使用 openai.gpt-4.key1、openai.gpt-4.key2 等格式\n```\n\n### 兼容性保证\n- ✅ **单key场景**: 自动映射为 `key1`，无需修改\n- ✅ **多key场景**: 自动展开为 `key1`、`key2`、`key3` 等别名\n- ✅ **特殊key名**: `default`、`oauth-default` 等继续支持\n- ✅ **路由格式**: `provider.model` 自动展开，`provider.model.key1` 精确指定\n\n## 核心特性\n\n## 核心特性\n\n### 🎯 智能路由\n- **动态路由分类**: 根据请求内容自动分类路由\n- **7个路由池**: default, longContext, thinking, coding, background, websearch, vision\n- **负载均衡**: 支持轮询、权重、响应时间等多种策略\n- **故障转移**: 自动切换到备用Provider\n\n### 🔗 协议支持\n- **OpenAI协议**: 完整兼容OpenAI Chat Completions API\n- **Anthropic协议**: 支持Anthropic Messages API\n- **协议转换**: 自动在不同协议间转换请求和响应\n\n### ⚡ 性能优化\n- **路由目标池**: 16个预配置路由目标\n- **流水线配置**: 56个详细执行配置\n- **缓存机制**: 智能缓存常用请求和响应\n- **并发处理**: 支持高并发请求处理\n\n## 文件结构\n\n```\nsrc/modules/virtual-router/\n├── README.md                           # 本文档\n├── virtual-router-module.ts            # 主模块实现\n├── route-target-pool.ts                # 路由目标池管理\n├── pipeline-config-manager.ts          # 流水线配置管理\n└── protocol-manager.ts                 # 协议转换管理\n```\n\n### 文件说明\n\n#### `virtual-router-module.ts`\n**用途**: 虚拟路由模块主实现\n**功能**:\n- 模块初始化和生命周期管理\n- 请求路由和分发\n- Provider管理和负载均衡\n- 错误处理和监控\n\n**关键类**:\n- `VirtualRouterModule`: 主模块类\n\n#### `route-target-pool.ts`\n**用途**: 路由目标池管理\n**功能**:\n- 管理路由目标池\n- 目标选择和负载均衡\n- 故障检测和切换\n\n**关键类**:\n- `RouteTargetPool`: 路由目标池类\n- `RouteTarget`: 路由目标接口\n\n#### `pipeline-config-manager.ts`\n**用途**: 流水线配置管理\n**功能**:\n- 管理流水线配置\n- 配置验证和优化\n- 性能监控\n\n**关键类**:\n- `PipelineConfigManager`: 流水线配置管理器\n- `PipelineConfig`: 流水线配置接口\n\n#### `protocol-manager.ts`\n**用途**: 协议转换管理\n**功能**:\n- OpenAI/Anthropic协议转换\n- 请求/响应格式化\n- 协议兼容性处理\n\n**关键类**:\n- `ProtocolManager`: 协议管理器\n- `ProtocolConverter`: 协议转换器\n\n## 配置系统\n\n### 路由目标池\n系统支持7个预定义的路由池，每个池包含不同的路由目标：\n\n```typescript\ninterface RouteTargetPools {\n  default: RouteTarget[];        // 主要工作负载 (4个目标)\n  longContext: RouteTarget[];   // 长文本处理 (2个目标)\n  thinking: RouteTarget[];      // 复杂推理 (4个目标)\n  coding: RouteTarget[];        // 代码生成 (2个目标)\n  background: RouteTarget[];    // 后台任务 (2个目标)\n  websearch: RouteTarget[];     // 网络搜索 (2个目标)\n  vision: RouteTarget[];        // 图像处理 (0个目标，预留)\n}\n```\n\n### 流水线配置\n每个路由目标都有详细的流水线配置：\n\n```typescript\ninterface PipelineConfig {\n  provider: {\n    type: 'openai' | 'anthropic';\n    baseURL: string;\n  };\n  model: {\n    maxContext: number;\n    maxTokens: number;\n  };\n  keyConfig: {\n    keyId: string;\n    actualKey: string;\n  };\n  protocols: {\n    input: 'openai' | 'anthropic';\n    output: 'openai' | 'anthropic';\n  };\n}\n```\n\n## 真实Provider支持\n\n### QWEN Provider\n- **API地址**: https://portal.qwen.ai/v1\n- **支持模型**: qwen3-coder-plus, qwen3-coder\n- **API密钥**: 2个密钥支持负载均衡\n- **特点**: 专注于代码生成和推理\n\n### IFLOW Provider\n- **API地址**: https://apis.iflow.cn/v1\n- **支持模型**: deepseek-r1, kimi-k2, qwen3-coder, glm-4.5\n- **API密钥**: 3个密钥支持负载均衡\n- **特点**: 多样化模型覆盖\n\n### MODELSCOPE Provider\n- **API地址**: https://api-inference.modelscope.cn/v1/chat/completions\n- **支持模型**: Qwen3-Coder-480B, GLM-4.5, DeepSeek-V3等10个模型\n- **API密钥**: 4个密钥支持负载均衡\n- **特点**: 丰富的模型选择\n\n## 使用示例\n\n### 基础使用\n```typescript\nimport { VirtualRouterModule } from './virtual-router-module';\n\nconst router = new VirtualRouterModule();\nawait router.initialize({\n  routeTargets: routeTargetPools,\n  pipelineConfigs: pipelineConfigs,\n  inputProtocol: 'openai',\n  outputProtocol: 'openai'\n});\n\n// 执行请求\nconst response = await router.executeRequest({\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: 'Hello' }],\n  routeCategory: 'default'\n});\n```\n\n### 自定义路由\n```typescript\n// 指定路由类别\nconst response = await router.executeRequest({\n  model: 'claude-3-sonnet',\n  messages: [{ role: 'user', content: 'Complex thinking task' }],\n  routeCategory: 'thinking'  // 使用思考路由池\n});\n\n// 长文本处理\nconst response = await router.executeRequest({\n  model: 'gpt-4',\n  messages: [{ role: 'user', content: longText }],\n  routeCategory: 'longContext'  // 使用长上下文路由池\n});\n```\n\n### 协议转换\n```typescript\n// Anthropic输入，OpenAI输出\nawait router.initialize({\n  inputProtocol: 'anthropic',\n  outputProtocol: 'openai'\n});\n\nconst response = await router.executeRequest({\n  model: 'claude-3-sonnet',\n  messages: [{ role: 'user', content: 'Hello' }]\n});\n```\n\n## 性能特性\n\n### 路由性能\n- **路由决策时间**: < 1ms\n- **目标选择时间**: < 0.5ms\n- **协议转换时间**: < 2ms\n- **整体延迟**: < 5ms (不含网络时间)\n\n### 负载均衡\n- **轮询策略**: 公平分配请求\n- **故障检测**: 自动检测失效目标\n- **健康检查**: 定期检查目标状态\n- **自动恢复**: 失效目标恢复后自动重新加入\n\n### 缓存机制\n- **路由缓存**: 缓存路由决策结果\n- **配置缓存**: 缓存Provider配置\n- **协议缓存**: 缓存协议转换结果\n\n## 监控和调试\n\n### 日志记录\n```typescript\n// 启用详细日志\nconst router = new VirtualRouterModule({\n  logLevel: 'debug',\n  enableMetrics: true,\n  enableTracing: true\n});\n```\n\n### 性能监控\n```typescript\n// 获取性能指标\nconst metrics = router.getMetrics();\nconsole.log('Total requests:', metrics.totalRequests);\nconsole.log('Average latency:', metrics.averageLatency);\nconsole.log('Success rate:', metrics.successRate);\n```\n\n### 错误处理\n```typescript\n// 自定义错误处理\nrouter.onError((error, context) => {\n  console.error('Router error:', error);\n  console.log('Request context:', context);\n});\n```\n\n## 配置示例\n\n### 完整配置\n```typescript\nconst config = {\n  routeTargets: {\n    default: [\n      {\n        providerId: 'qwen',\n        modelId: 'qwen3-coder-plus',\n        keyId: 'qwen-auth-1',\n        actualKey: 'qwen-auth-1',\n        inputProtocol: 'openai',\n        outputProtocol: 'openai'\n      }\n    ]\n  },\n  pipelineConfigs: {\n    'qwen.qwen3-coder-plus.qwen-auth-1': {\n      provider: {\n        type: 'openai',\n        baseURL: 'https://portal.qwen.ai/v1'\n      },\n      model: {\n        maxContext: 128000,\n        maxTokens: 32000\n      },\n      keyConfig: {\n        keyId: 'qwen-auth-1',\n        actualKey: 'qwen-auth-1'\n      },\n      protocols: {\n        input: 'openai',\n        output: 'openai'\n      }\n    }\n  }\n};\n```\n\n## 最佳实践\n\n1. **路由池配置**: 根据业务需求合理配置路由池\n2. **负载均衡**: 为每个Provider配置多个API密钥\n3. **错误处理**: 实现完善的错误处理和重试机制\n4. **监控**: 启用性能监控和日志记录\n5. **协议选择**: 根据实际需求选择输入输出协议\n\n## 故障排除\n\n### 常见问题\n1. **路由失败**: 检查路由目标配置和网络连接\n2. **协议转换错误**: 确认输入输出协议配置正确\n3. **负载均衡不工作**: 检查API密钥配置和目标状态\n4. **性能问题**: 检查缓存配置和网络延迟\n\n### 调试技巧\n```typescript\n// 启用调试模式\nconst router = new VirtualRouterModule({\n  debug: true,\n  logLevel: 'debug'\n});\n\n// 检查路由状态\nconst status = router.getStatus();\nconsole.log('Available targets:', status.availableTargets);\nconsole.log('Failed targets:', status.failedTargets);\n```\n\n## 版本信息\n- **当前版本**: v2.0 (Configuration System Refactor)\n- **构建状态**: ✅ ESM兼容，✅ 测试通过，✅ 生产就绪\n- **Provider支持**: 3个真实Provider，16个模型，56个配置\n- **性能评级**: ⚡ 优秀 (< 5ms延迟)",
    "src/modules/monitoring": "Monitoring Module (Passive Analysis Skeleton)\n\nGoals\n- Passive, zero-impact request/response observability for OpenAI/Anthropic protocols.\n- Uniform on-disk records under ~/.routecodex/monitor/ for offline routing dry‑run and response replay.\n- Not wired into runtime pipeline by default; importing this module must not change behavior unless explicitly enabled later.\n\nNon-Goals (in this skeleton)\n- No runtime interception/registration in modules.json.\n- No changes to existing request/response paths.\n\nInterfaces (skeleton)\n- MonitorModule\n  - initialize(): Promise<void>\n  - onIncoming(req, ctx): Promise<void>\n  - onRouteDecision(reqId, decision): Promise<void>\n  - onOutgoing(res, ctx): Promise<void>\n  - onStreamChunk(event, ctx): Promise<void>\n- Recorder\n  - start(reqId, snapshot)\n  - writeDecision(reqId, decision)\n  - appendStream(reqId, event)\n  - writeResponse(reqId, response)\n  - finalize(reqId, summary)\n\nStorage plan (not active by default)\n- Root: ~/.routecodex/monitor/sessions/<YYYYMMDD>/<protocol>/<reqId>/\n  - meta.json             // request meta + routing summary + redaction flags\n  - request.json          // original request (protocol‑native shape)\n  - decision.json         // router/pipeline decision if available\n  - response.json         // non‑stream full response\n  - stream-events.jsonl   // streaming chunks or SSE events\n  - replay.json           // optional replay‑ready aggregation\n  - logs-tail.txt         // optional log excerpt\n\nPrivacy/Redaction (defaults to safe values)\n- Never persist Authorization/ApiKey headers.\n- Optional content redaction for messages/tools (configurable later).\n\nStatus\n- This directory only contains a passive skeleton (no runtime wiring).\n- It prepares types and utilities so future enabling is low‑risk.\n\n",
    "src/modules/resource": "# Resource Module\n\n共享资源池与服务实例管理，提供连接池化、实例复用、健康检查与统计能力。\n\n## 主要职责\n- 连接池创建与租借/归还\n- 基于 TTL 的服务实例缓存\n- 健康检查与故障恢复\n- 资源使用度量\n\n## 对外接口\n- `ResourceManager`（`resource-manager.ts`）\n  - `createConnectionPool(...)`\n  - `getServiceInstance(name, factory, ttlMs)`\n  - `metrics()`\n\n## 用法\n```ts\nimport { ResourceManager } from './resource-manager.js';\nconst rm = new ResourceManager();\nconst pool = await rm.createConnectionPool({ name: 'http' });\n```\n\n",
    "src/modules/debug": "# Debug Module\n\n统一调试增强与日志记录。集中管理跨模块的性能度量、请求日志与错误追踪，支持文件落盘。\n\n## 主要职责\n- 注册模块级调试增强（启用/禁用、性能追踪、历史保留）\n- 统一事件总线对接（DebugEventBus）\n- 文件日志记录（可供线下排障）\n\n## 对外接口\n- `DebugEnhancementManager`（`debug-enhancement-manager.ts`）\n- `DebugFileLogger`（`debug-file-logger.ts`）\n\n## 用法\n```ts\nimport { DebugEnhancementManager } from './debug-enhancement-manager.js';\nconst mgr = DebugEnhancementManager.getInstance();\nconst enh = mgr.registerEnhancement('pipeline', { enabled: true });\n```\n\n",
    "src/logging": "# 日志系统 (Logging System)\n\n## 概述\n\n日志系统提供RouteCodex的完整日志记录和管理功能，支持多种日志级别、输出格式和存储方式。\n\n## 核心功能\n\n### 日志记录\n- **多级别日志**: debug, info, warn, error\n- **结构化日志**: JSON格式日志记录\n- **上下文信息**: 请求ID、模块名称等\n- **性能监控**: 执行时间统计\n\n### 日志管理\n- **文件轮转**: 自动日志文件轮转\n- **存储管理**: 日志文件清理和归档\n- **索引系统**: 高效的日志检索\n- **压缩存储**: 日志文件压缩\n\n## 目录结构\n\n```\nlogging/\n├── simple-log-integration.ts    # 简化日志集成\n├── indexer/                    # 日志索引系统\n│   ├── SimpleTimeSeriesIndexer.ts\n│   └── TimeSeriesIndexer.ts\n├── parser/                     # 日志解析器\n│   ├── JsonlParser.ts\n│   └── LogFileScanner.ts\n├── logger.ts                   # 日志记录器\n├── module-log-manager.ts       # 模块日志管理\n└── index.ts                    # 日志模块入口\n```\n\n## 主要组件\n\n### SimpleLogIntegration\n简化日志集成模块，提供基础的日志记录功能：\n- 一键式日志配置\n- 环境变量集成\n- 配置持久化\n- 自动管理\n\n### TimeSeriesIndexer\n时间序列索引器，提供高效的日志检索功能：\n- 时间范围查询\n- 模块过滤\n- 级别过滤\n- 压缩存储\n\n### JsonlParser\nJSONL日志解析器：\n- 结构化日志解析\n- 错误恢复\n- 批量处理\n- 性能优化\n\n## 使用示例\n\n### 基本日志记录\n```typescript\nimport { Logger } from './logger';\n\nconst logger = new Logger('my-module');\n\n// 记录不同级别的日志\nlogger.debug('Debug information');\nlogger.info('Process started');\nlogger.warn('Warning message');\nlogger.error('Error occurred');\n\n// 带上下文的日志\nlogger.info('Request processed', {\n  requestId: 'req-123',\n  duration: 150,\n  status: 'success'\n});\n```\n\n### 简化日志配置\n```typescript\nimport { SimpleLogIntegration } from './simple-log-integration';\n\nconst logIntegration = new SimpleLogIntegration();\n\n// 启用简化日志\nawait logIntegration.enableSimpleLog({\n  level: 'debug',\n  output: 'console',\n  logDirectory: './logs'\n});\n\n// 禁用简化日志\nawait logIntegration.disableSimpleLog();\n```\n\n### 日志索引和搜索\n```typescript\nimport { TimeSeriesIndexer } from './indexer/TimeSeriesIndexer';\n\nconst indexer = new TimeSeriesIndexer('./logs');\n\n// 索引日志文件\nawait indexer.indexLogFile('app.log');\n\n// 搜索日志\nconst results = await indexer.search({\n  startTime: Date.now() - 3600000, // 1小时前\n  endTime: Date.now(),\n  level: 'error',\n  module: 'my-module'\n});\n\nconsole.log('搜索结果:', results);\n```\n\n## 配置选项\n\n### 日志级别\n- **debug**: 调试信息\n- **info**: 一般信息\n- **warn**: 警告信息\n- **error**: 错误信息\n\n### 输出格式\n- **console**: 控制台输出\n- **file**: 文件输出\n- **both**: 控制台和文件输出\n\n### 存储配置\n- **logDirectory**: 日志文件目录\n- **maxFileSize**: 最大文件大小\n- **maxFiles**: 最大文件数量\n- **compress**: 压缩存储\n\n## 性能特性\n\n### 高性能\n- **异步写入**: 非阻塞日志写入\n- **批量处理**: 批量日志处理\n- **内存优化**: 高效内存使用\n- **并发安全**: 线程安全设计\n\n### 可扩展性\n- **模块化设计**: 可插拔组件\n- **配置驱动**: 灵活配置\n- **自定义输出**: 支持自定义输出格式\n- **插件系统**: 支持第三方插件\n\n## 最佳实践\n\n### 日志级别使用\n1. **debug**: 开发调试信息\n2. **info**: 关键业务流程\n3. **warn**: 可恢复的错误\n4. **error**: 严重错误\n\n### 性能优化\n1. **避免过度日志**: 只记录必要信息\n2. **使用结构化日志**: 便于后续分析\n3. **定期清理**: 避免日志文件过大\n4. **监控日志大小**: 防止磁盘空间不足\n\n## 监控和诊断\n\n### 日志监控\n- **错误率监控**: 统计错误日志数量\n- **性能监控**: 监控日志写入性能\n- **磁盘使用**: 监控日志文件大小\n- **实时告警**: 异常情况告警\n\n### 诊断工具\n- **日志分析**: 日志内容分析\n- **性能分析**: 执行时间分析\n- **错误追踪**: 错误链路追踪\n- **资源使用**: 系统资源使用分析\n\n## 相关依赖\n\n- **winston**: 日志记录库\n- **fs-extra**: 文件系统操作\n- **chalk**: 终端颜色输出\n- **moment**: 时间处理\n\n## 文档\n\n- [RouteCodex 主文档](../../README.md)\n- [日志配置指南](../../docs/logging.md)\n- [API 文档](../../docs/api/logging.md)\n- [最佳实践](../../docs/best-practices.md)"
  },
  "claude_md": "# RouteCodex 4-Layer Pipeline Architecture Documentation\n\n> **项目状态**: 活跃开发中 | **架构复杂度**: 高 | **模块数量**: 42 | **最后更新**: 2025-10-31\n\n## 🚨 核心架构Ground Truth定义\n\n### **RouteCodex 9大核心架构原则**\n\nRouteCodex系统严格遵循以下9个核心架构原则，确保系统的可维护性、可扩展性和稳定性：\n\n---\n\n### **原则1: llmswitch-core作为工具调用唯一入口 (Unified Tool Processing)**\n- **核心定位**: 工具调用的请求和响应处理唯一入口在llmswitch-core\n- **三端统一处理**: Chat、Responses、Messages端点的工具调用都在llmswitch-core统一处理\n- **统一规范化入口**: `sharedmodule/llmswitch-core/src/conversion/shared/tool-canonicalizer.ts`\n- **禁止重复实现**: 服务器端点、兼容层、Provider层不得重复实现工具调用处理逻辑\n- **实施要点**: 所有工具文本收割、工具调用标准化、重复调用去重都集中在llmswitch-core\n\n### **原则2: 兼容层职责范围限制 (Minimal Compatibility Layer)**\n- **专注特殊扩展**: 兼容层仅处理该provider特有的非OpenAI标准扩展功能\n- **请求端处理**: 注入provider特殊配置，如thinking模式、特殊参数等\n- **响应端处理**: 仅做字段标准化，将非标准格式转换为标准格式（reasoning、schema等）\n- **禁止兜底逻辑**: 不做工具调用转换、不处理工具文本收割、不实现fallback机制\n- **最小化原则**: 避免与llmswitch-core功能重复，专注于provider特定的最小处理\n\n### **原则3: llmswitch-core统一工具引导 (Unified Tool Guidance)**\n- **统一引导机制**: 三端共用相同的工具引导和系统工具指引机制\n- **标准化处理**: 统一请求修改格式和工具响应处理流程\n- **集中管理**: 系统工具指引在llmswitch-core统一注入和管理\n- **Schema增强**: 提供增强的工具schema验证和参数标准化\n- **一致性保证**: 确保所有端点的工具调用行为完全一致\n\n### **原则4: 快速死亡原则 (Fail Fast)**\n- **立即失败**: 遇到错误立即抛出，不尝试降级处理或fallback\n- **错误源头暴露**: 不隐藏或延迟错误，让问题在源头立即暴露\n- **避免状态恢复**: 错误发生后不进行复杂的状态回滚或恢复操作\n- **明确错误信息**: 提供清晰的错误信息和完整的堆栈跟踪\n- **实施要点**: 移除过度try-catch包装，避免silent failures，使用严格错误处理\n\n### **原则5: 暴露问题原则 (No Silent Failures)**\n- **显式异常处理**: 所有异常和边界条件都必须显式处理，不允许沉默失败\n- **完整日志记录**: 记录所有关键操作和异常，包括系统状态变化\n- **全面监控覆盖**: 对所有关键路径添加监控和告警机制\n- **调试友好设计**: 提供足够的调试信息，便于问题定位和分析\n- **实施要点**: 使用结构化日志，添加关键节点的状态检查，实施全面异常处理\n\n### **原则6: 清晰解决原则 (No Fallback Logic)**\n- **直接解决根本问题**: 避免使用fallback逻辑，直接解决根本问题\n- **单一确定方案**: 每个问题都有明确的解决方案，不依赖多个备选方案\n- **确定性行为**: 系统行为应该是可预测和可重复的\n- **简化分支逻辑**: 减少复杂的if-else-else分支，提高代码可读性\n- **实施要点**: 重构复杂条件逻辑，使用策略模式替代fallback，明确处理路径\n\n### **原则7: 功能分离原则 (No Functional Overlap)**\n- **模块职责唯一**: 每个模块的职责必须明确，严格避免功能重复\n- **单一职责原则**: 每个模块只负责一个明确的功能域\n- **明确接口定义**: 模块间接口必须明确定义，避免隐式依赖\n- **清晰功能边界**: 功能边界必须清晰，便于维护和测试\n- **实施要点**: 定期审查模块职责，移除重复功能，明确模块间依赖关系\n\n### **原则8: 配置驱动原则 (No Hardcoding)**\n- **全面配置化**: 所有可变参数都必须通过配置文件管理\n- **外部化配置**: 业务逻辑参数、服务地址、超时时间等都应可配置\n- **配置验证机制**: 实施配置验证机制，确保配置正确性\n- **动态更新支持**: 支持配置的热更新，无需重启服务\n- **实施要点**: 使用类型安全的配置系统，实施配置校验，提供完整配置文档\n\n### **原则9: 模块化原则 (No Giant Files)**\n- **文件大小控制**: 不做巨型文件，超过500行的代码必须根据功能分拆为模块\n- **功能导向分拆**: 按功能职责将大文件拆分为多个小模块\n- **单一文件职责**: 每个文件只负责一个明确的功能\n- **依赖关系管理**: 明确模块间依赖关系，避免循环依赖\n- **实施要点**: 定期检查文件大小，按功能边界拆分代码，使用模块化设计模式\n\n---\n\n### **架构原则实施指导**\n\n#### **原则间关系和优先级**\n1. **基础原则**: 原则1-3是技术架构的基础，定义了系统的核心处理流程\n2. **质量原则**: 原则4-6确保系统的稳定性和可维护性\n3. **设计原则**: 原则7-9指导系统的模块化和可扩展性设计\n\n#### **违反原则的后果**\n- **违反原则1-3**: 导致工具调用处理混乱，响应格式不一致\n- **违反原则4-6**: 导致系统不稳定，问题难以定位和修复\n- **违反原则7-9**: 导致代码维护困难，扩展性差\n\n#### **架构审查检查点**\n- [ ] 工具调用是否全部通过llmswitch-core处理？\n- [ ] 兼容层是否只处理provider特定功能？\n- [ ] 错误处理是否遵循快速死亡原则？\n- [ ] 是否存在隐藏的fallback逻辑？\n- [ ] 模块功能是否有重叠？\n- [ ] 是否存在硬编码配置？\n- [ ] 是否有超过500行的巨型文件？\n\n你运行进程需要用后台启动的方式，加入&,如果一定要前台运行就要用gtimeout\n\n运行规范\n- 后台运行（推荐）：`npm run start:bg`\n- 前台限时（必须）：`npm run start:fg`\n\n脚本\n- `scripts/run-bg.sh`：后台 + 可选超时守护\n- `scripts/run-fg-gtimeout.sh`：前台 + `gtimeout`（或降级 watcher）\n\n不需要ipv6支持，需要ipv4的本地  127.0.0.1,localhost能被支持，这是刚性要求\n\n## 🏗️ 项目架构管理 (Sysmem集成)\n\n本项目使用Sysmem技能进行自动化项目架构管理：\n\n### 当前架构健康状况\n- **重复文件**: 3318组 (主要在node_modules和依赖文件)\n- **重复函数**: 2个 (影响范围较小)\n- **未记录文件**: 7436个 (主要为node_modules和构建产物)\n- **文档完整度**: ⭐⭐⭐⭐ (CLAUDE.md完整，模块README需要更新)\n\n### 架构管理策略\n- **数据驱动**: 基于sysmem定期扫描和分析\n- **增量更新**: 保护用户自定义内容，智能更新文档\n- **持续监控**: 自动检测架构变化和潜在问题\n\n### 项目管理命令\n```bash\n# 重新收集项目数据\npython3 ~/.claude/skills/sysmem/scripts/collect_data.py .\n\n# 检查架构健康状况\npython3 ~/.claude/skills/sysmem/scripts/analyze_architecture.py .\n```\n\n## 调试与日志采样指引（重要）\n\n- 采样根目录：`~/.routecodex/codex-samples`\n\n- Chat（OpenAI Chat: `/v1/chat/completions`）\n  - 目录：`~/.routecodex/codex-samples/openai-chat`\n  - 关键文件：\n    - `req_<id>_raw-request.json`：进入 Chat 端点的原始 HTTP 载荷\n    - `req_<id>_pre-llmswitch.json` / `post-llmswitch.json`：llmswitch 前后快照（统计角色分布，不含全文）\n    - `req_<id>_provider-in.json`：发往 Provider 的请求摘要（模型/工具/消息计数）\n    - `req_<id>_provider-request.json`：发往上游的完整 OpenAI Chat 载荷\n    - `req_<id>_provider-response.json`：上游“原始响应”快照（未经过兼容层与清洗）\n    - `req_<id>_sse-events.log`：SSE 事件（chunk、chunk.final、done）\n\n- Responses（OpenAI Responses: `/v1/responses`）\n  - 目录：`~/.routecodex/codex-samples/openai-responses`\n  - 关键文件：\n    - `req_<id>_pre-pipeline.json`：进入 pipeline 前的原始请求（可选）\n    - `req_<id>_responses-initial.json` / `responses-final.json`：Responses 形状的起始/终态（output/output_text）\n    - `req_<id>_provider-response.json`：上游“原始响应”快照\n    - `req_<id>_sse-events.log` / `sse-audit.log`：SSE 序列与审计\n\n- Anthropic（`/v1/messages`）\n  - 目录：`~/.routecodex/codex-samples/anthropic-messages`\n  - 关键文件：`_provider-request.json`、`_provider-response.json`、`_sse-events.log`\n\n- 常用排查动作\n  - 定位最近请求：`ls -1t ~/.routecodex/codex-samples/openai-chat/*_raw-request.json | head -n 1`\n  - 检查是否上游 500：`_provider-request.json` 存在而 `_provider-response.json` 缺失\n  - 检查工具文本泄漏：\n    - Chat：`_provider-response.json` 的 `choices[0].message.tool_calls` 与 `content`\n    - Responses：`responses-final.json` 的 `output_text`/`output[..].message.content`\n  - SSE 完整性：`_sse-events.log` 是否出现 `chunk.final` 与 `done`\n\n\n### 📁 项目模块结构\n\n#### 核心模块\n- **src/**: 核心源代码目录\n  - **src/commands/**: CLI命令实现\n  - **src/config/**: 配置管理\n  - **src/core/**: 核心业务逻辑\n  - **src/logging/**: 日志系统\n  - **src/modules/**: 模块化组件\n\n#### 共享模块 (sharedmodule/)\n- **config-engine**: 配置引擎核心\n- **config-testkit**: 配置测试工具包\n- **config-compat**: 配置兼容性处理\n- **llmswitch-core**: LLM切换核心功能\n- **llmswitch-ajv**: AJV验证集成\n\n#### 文档模块 (docs/)\n- **docs/pipeline/**: 流水线架构文档\n- **docs/dry-run/**: Dry-Run系统文档\n- **docs/transformation-tables/**: 转换表规范\n\n#### 用户界面\n- **web-interface/**: Web调试界面\n\n#### 工具脚本\n- **scripts/**: 构建和部署脚本\n\n\n## Overview\n\nThe RouteCodex system implements a sophisticated 4-layer pipeline architecture that provides clean separation of concerns, modular design, and flexible protocol handling. This architecture enables seamless integration with multiple AI providers while maintaining consistent interfaces and proper workflow management.\n\n## Architecture Diagram\n\n```\nHTTP Request → LLM Switch → Compatibility → Provider → AI Service\n     ↓             ↓             ↓            ↓           ↓\n  Request      Protocol      Format       Standard     Response\n  Analysis     Routing     Conversion     HTTP Server  Processing\n```\n\n## Layer 1: LLM Switch (Dynamic Routing Classification)\n\n### Core Functionality\n- **Request Analysis**: Analyzes incoming requests to determine optimal routing\n- **Protocol Routing**: Routes requests to appropriate processing pipelines\n- **Dynamic Classification**: Supports 7 routing categories:\n  - `default`: Standard request routing\n  - `longcontext`: Long text processing requests\n  - `thinking`: Complex reasoning requests\n  - `background`: Background processing requests\n  - `websearch`: Web search requests\n  - `vision`: Image processing requests\n  - `coding`: Code generation requests\n\n### Key Responsibilities\n1. **Request Validation**: Validates incoming request format and parameters\n2. **Protocol Detection**: Determines source and target protocols\n3. **Route Selection**: Selects appropriate processing pipeline based on request characteristics\n4. **Metadata Enrichment**: Adds routing and processing metadata\n\n### Implementation Example\n```typescript\nexport class OpenAIPassthroughLLMSwitch implements LLM SwitchModule {\n  async processIncoming(request: any): Promise<any> {\n    // Analyze request and determine routing\n    const routing = this.analyzeRequest(request);\n\n    // Add routing metadata\n    return {\n      ...request,\n      _metadata: {\n        switchType: 'llmswitch-openai-openai',\n        timestamp: Date.now(),\n        originalProtocol: 'openai',\n        targetProtocol: 'openai',\n        routingCategory: routing.category\n      }\n    };\n  }\n}\n```\n\n## Layer 2: Compatibility (Format Transformation)\n\n### Core Functionality\n- **Protocol Translation**: Converts between different AI service protocols\n- **Format Adaptation**: Transforms request/response formats between providers\n- **Tool Integration**: Handles tool calling format conversion and execution\n- **Configuration-Driven**: Uses JSON configuration for transformation rules\n\n### Key Responsibilities\n1. **Request Transformation**: Converts requests to target provider format\n2. **Response Processing**: Transforms provider responses back to expected format\n3. **Tool Format Conversion**: Handles tool calling format differences\n4. **Error Handling**: Manages transformation errors and fallbacks\n\n### Transformation Engine\n```typescript\n// Example transformation rules\nconst transformationRules = [\n  {\n    id: 'openai-to-lmstudio-tools',\n    transform: 'mapping',\n    sourcePath: 'tools',\n    targetPath: 'tools',\n    mapping: {\n      'type': 'type',\n      'function': 'function'\n    }\n  }\n];\n```\n\n### Implementation Example\n```typescript\nexport class LMStudioCompatibility implements CompatibilityModule {\n  async processIncoming(request: any): Promise<any> {\n    // Apply transformation rules\n    const transformed = await this.transformationEngine.transform(\n      request,\n      this.config.transformationRules\n    );\n\n    return transformed.data || transformed;\n  }\n}\n```\n\n## Layer 3: Provider (Standard HTTP Server)\n\n### Core Functionality\n- **HTTP Communication**: Manages all HTTP communications with AI services\n- **Authentication**: Handles provider authentication and authorization\n- **Error Handling**: Manages network errors and provider-specific issues\n- **Health Monitoring**: Monitors provider health and connectivity\n\n### Key Responsibilities\n1. **Request Execution**: Sends HTTP requests to AI providers\n2. **Response Handling**: Processes HTTP responses from providers\n3. **Authentication Management**: Handles API keys, tokens, and auth contexts\n4. **Connection Management**: Manages HTTP connections and timeouts\n\n### Architecture Principle\n**CRITICAL**: Provider modules do NOT perform any format transformations. They are standard HTTP servers that only send and receive raw HTTP requests/responses. All transformations are handled by the Compatibility layer.\n\n### Implementation Example\n```typescript\nexport class LMStudioProviderSimple implements ProviderModule {\n  async processIncoming(request: any): Promise<any> {\n    // Compatibility模块已经处理了所有转换，直接发送请求\n    const response = await this.sendChatRequest(request);\n    return response;\n  }\n\n  private async sendChatRequest(request: any): Promise<ProviderResponse> {\n    // Standard HTTP request to AI provider\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify(request)\n    });\n\n    return {\n      data: await response.json(),\n      status: response.status,\n      headers: Object.fromEntries(response.headers.entries()),\n      metadata: { /* processing metadata */ }\n    };\n  }\n}\n```\n\n## Layer 4: AI Service (External Provider)\n\n### Core Functionality\n- **Model Processing**: Executes AI models and generates responses\n- **Tool Execution**: Handles tool calling and function execution\n- **Response Generation**: Produces AI-generated content and tool calls\n\n### Supported Providers\n- **LM Studio**: Local AI model hosting with tool support\n- **OpenAI**: GPT models with function calling\n- **Qwen**: Alibaba's language models\n- **Anthropic**: Claude model family\n- **Custom Providers**: Extensible architecture for additional providers\n\n## Data Flow Example\n\n### Request Flow\n```\n1. User Request: {\n  \"model\": \"qwen3-4b-thinking-2507-mlx\",\n  \"messages\": [...],\n  \"tools\": [...]\n}\n\n2. LLM Switch Output: {\n  \"model\": \"qwen3-4b-thinking-2507-mlx\",\n  \"messages\": [...],\n  \"tools\": [...],\n  \"_metadata\": {\n    \"switchType\": \"llmswitch-openai-openai\",\n    \"timestamp\": 1758554010322,\n    \"originalProtocol\": \"openai\",\n    \"targetProtocol\": \"openai\"\n  }\n}\n\n3. Compatibility Output: {\n  \"model\": \"qwen3-4b-thinking-2507-mlx\",\n  \"messages\": [...],\n  \"tools\": [...],\n  \"_metadata\": { ... }\n}\n\n4. Provider HTTP Request: {\n  \"model\": \"qwen3-4b-thinking-2507-mlx\",\n  \"messages\": [...],\n  \"tools\": [...]\n}\n```\n\n### Response Flow\n```\n1. AI Service Response: {\n  \"id\": \"chat-xxx\",\n  \"object\": \"chat.completion\",\n  \"choices\": [{\n    \"finish_reason\": \"tool_calls\",\n    \"message\": {\n      \"content\": \"\\n\\n\",\n      \"tool_calls\": [...]\n    }\n  }]\n}\n\n2. Provider Response: {\n  \"data\": { /* AI service response */ },\n  \"status\": 200,\n  \"headers\": { ... },\n  \"metadata\": { ... }\n}\n\n3. Compatibility Processing: {\n  \"id\": \"chat-xxx\",\n  \"object\": \"chat.completion\",\n  \"choices\": [...],\n  \"_transformed\": true\n}\n\n4. Final User Response: {\n  \"id\": \"chat-xxx\",\n  \"object\": \"chat.completion\",\n  \"choices\": [...],\n  \"usage\": { ... }\n}\n```\n\n## 🔄 工具调用处理流程 (核心Ground Truth实现)\n\n### **llmswitch-core统一工具处理架构**\n\n```\nHTTP Request → Server Endpoint → llmswitch-core → Compatibility → Provider → AI Service\n     ↓                ↓                ↓              ↓            ↓           ↓\n  原始请求        端点预处理        工具规范化       字段适配    HTTP请求    AI响应\n```\n\n### **三端统一工具处理流程**\n\n#### **1. Chat端点 (/v1/chat/completions)**\n```typescript\n// 请求流向\n原始Chat请求 → llmswitch-core.tool-canonicalizer → Compatibility → Provider\n\n// llmswitch-core处理\n- 文本工具意图收割: rcc.tool.v1, XML blocks, Execute blocks\n- 工具调用标准化: arguments字符串化, ID生成\n- 重复调用去重: 相邻重复工具调用清理\n- 工具结果包剥离: 清理executed/result文本包\n```\n\n#### **2. Responses端点 (/v1/responses)**\n```typescript\n// 请求流向\n原始Responses请求 → llmswitch-core工具转换 → Chat格式 → 标准流程\n\n// 特殊处理\n- Responses→Chat桥接层: responses-openai-bridge.ts\n- 保持Responses格式的同时应用工具标准化\n- 统一的工具结果包剥离机制\n```\n\n#### **3. Messages端点 (/v1/messages)**\n```typescript\n// 请求流向\nAnthropic格式 → llmswitch-core格式转换 → 标准Chat流程\n\n// 格式转换\n- Anthropic工具格式 ↔ OpenAI工具格式\n- 消息结构标准化\n- 工具调用参数格式统一\n```\n\n### **兼容层最小化处理原则**\n\n#### **GLM兼容层示例**\n```typescript\n// ✅ 允许的处理: provider特定字段标准化\nnormalizeResponse(response) {\n  // reasoning_content处理 (GLM特有)\n  if (response.reasoning_content) {\n    // 提取工具意图 → rcc.tool.v1格式\n    const { blocks } = harvestRccBlocksFromText(response.reasoning_content);\n    response.reasoning_content = blocks.join('\\n');\n  }\n\n  // 字段标准化 (非工具调用相关)\n  response.usage.completion_tokens = response.usage.output_tokens;\n  response.created = response.created_at;\n\n  return response;\n}\n\n// ❌ 禁止的处理: 工具调用转换和文本收割\n// 以下逻辑必须移至llmswitch-core\nprocessIncoming(request) {\n  // 不再处理assistant.content中的工具文本\n  // 不再进行工具调用格式转换\n  // 仅处理thinking配置等provider特定功能\n}\n```\n\n### **系统工具指引统一管理**\n\n```typescript\n// llmswitch-core统一工具指引注入\nclass SystemToolGuidance {\n  buildSystemToolGuidance(tools: OpenAITool[]): string {\n    // 增强工具schema\n    const augmentedTools = augmentOpenAITools(tools);\n\n    // 生成统一的系统工具指引\n    return generateToolGuidancePrompt(augmentedTools);\n  }\n\n  augmentOpenAITools(tools: OpenAITool[]): OpenAITool[] {\n    return tools.map(tool => ({\n      ...tool,\n      // 严格化参数验证\n      function: {\n        ...tool.function,\n        parameters: enhanceParameters(tool.function.parameters)\n      }\n    }));\n  }\n}\n```\n\n### **错误处理和调试支持**\n\n#### **采样日志关键节点**\n```bash\n# 工具处理验证点\n~/.routecodex/codex-samples/openai-chat/\n├── req_<id>_pre-llmswitch.json     # llmswitch处理前\n├── req_<id>_post-llmswitch.json    # llmswitch处理后\n├── req_<id>_provider-response.json # Provider原始响应\n└── req_<id>_sse-events.log         # 流式事件日志\n\n# 检查要点\n# 1. pre-llmswitch不应包含结构化tool_calls\n# 2. post-llmswitch应包含规范化tool_calls\n# 3. provider-response不应包含文本化工具\n# 4. 最终响应不应包含rcc.tool.v1结果包\n```\n\n#### **调试命令**\n```bash\n# 检查工具处理完整性\ngrep -r \"tool_calls\" ~/.routecodex/codex-samples/openai-chat/*_provider-response.json\ngrep -r \"rcc\\.tool\\.v1\" ~/.routecodex/codex-samples/openai-chat/*_final.json\n\n# 验证llmswitch-core效果\ndiff ~/.routecodex/codex-samples/openai-chat/*_pre-llmswitch.json \\\n     ~/.routecodex/codex-samples/openai-chat/*_post-llmswitch.json\n```\n\n## Configuration Structure\n\n### 🔧 **重要：用户配置 vs 系统配置区分**\n\nRouteCodex系统严格区分**用户基础配置**和**系统扩展配置**，确保两者不重合，避免配置冲突：\n\n#### **用户基础配置** (User Basic Configuration)\n- **作用域**: 用户个人设置，仅影响日志行为\n- **文件位置**: `~/.routecodex/simple-log-config.json`\n- **配置内容**: 仅包含简化日志相关设置\n- **优先级**: 基础级别，不与其他系统配置重叠\n\n#### **系统扩展配置** (System Extended Configuration) \n- **作用域**: 系统级功能，影响整体架构行为\n- **文件位置**: 项目目录下的配置文件\n- **配置内容**: 管道、模块、部署等系统级设置\n- **优先级**: 高级别，扩展用户基础功能\n\n### **配置不重合原则**\n```\n用户基础配置 ← 独立运行 → 系统扩展配置\n     ↓                        ↓\n简化日志系统              4层管道架构\n(个人设置)                (系统架构)\n```\n\n---\n\n### 用户基础配置 (简化日志系统)\n```json\n{\n  \"enabled\": true,\n  \"logLevel\": \"debug\",\n  \"output\": \"console\",\n  \"logDirectory\": \"/Users/fanzhang/.routecodex/logs\",\n  \"autoStart\": true\n}\n```\n**注意**: 此配置**完全独立**于下面的系统架构配置，仅控制简化日志功能。\n\n---\n\n### 系统扩展配置 (4层管道架构)\n```json\n{\n  \"pipeline\": {\n    \"llmSwitch\": {\n      \"type\": \"llmswitch-openai-openai\",\n      \"config\": {\n        \"protocol\": \"openai\",\n        \"targetFormat\": \"lmstudio\"\n      }\n    },\n    \"compatibility\": {\n      \"type\": \"lmstudio-compatibility\",\n      \"config\": {\n        \"toolsEnabled\": true,\n        \"customRules\": [...]\n      }\n    },\n    \"provider\": {\n      \"type\": \"lmstudio-http\",\n      \"config\": {\n        \"type\": \"lmstudio\",\n        \"baseUrl\": \"http://localhost:1234\",\n        \"auth\": {\n          \"type\": \"apikey\",\n          \"apiKey\": \"your-api-key\"\n        }\n      }\n    }\n  }\n}\n```\n**注意**: 此配置**完全不涉及**简化日志设置，仅控制系统架构功能。\n\n### **配置交互规则**\n1. **独立性**: 用户配置修改不影响系统配置\n2. **无重叠**: 两套配置控制完全不同的功能域\n3. **互补性**: 简化日志 + 4层管道 = 完整功能\n4. **优先级**: 系统配置运行时自动检测用户配置状态\n\n## Key Design Principles\n\n### 1. Separation of Concerns\n- **LLM Switch**: Routing and classification\n- **Compatibility**: Format transformation\n- **Provider**: HTTP communication\n- **AI Service**: Model processing\n\n### 2. Configuration-Driven\n- JSON configuration for all transformations\n- Dynamic rule application\n- Hot reload capabilities\n\n### 3. Modular Design\n- Each layer can be independently replaced\n- Plugin architecture for extensibility\n- Interface-based contracts\n\n### 4. Error Handling\n- Comprehensive error handling at each layer\n- Graceful degradation\n- Detailed error reporting\n\n### 5. Performance Optimization\n- Minimal overhead between layers\n- Efficient transformation algorithms\n- Connection pooling and caching\n\n## Benefits\n\n1. **Flexibility**: Easy to add new providers and protocols\n2. **Maintainability**: Clear separation of responsibilities\n3. **Testability**: Each layer can be tested independently\n4. **Extensibility**: Plugin architecture for custom functionality\n5. **Performance**: Optimized for high-throughput scenarios\n6. **Reliability**: Robust error handling and recovery\n\n## Best Practices\n\n1. **Always use Compatibility layer** for transformations\n2. **Keep Provider layer simple** - HTTP communication only\n3. **Configure proper routing** in LLM Switch for optimal performance\n4. **Implement comprehensive logging** for debugging\n5. **Use appropriate timeouts** and retry mechanisms\n6. **Validate all configurations** before deployment\n7. **Monitor system health** and performance metrics\n\n## Testing Strategy\n\n### Unit Tests\n- Test each layer independently\n- Mock external dependencies\n- Verify transformation rules\n- Validate error handling\n\n### Integration Tests\n- Test complete request/response flow\n- Verify provider integration\n- Test tool calling functionality\n- Performance benchmarking\n\n### End-to-End Tests\n- Real AI model testing\n- Tool execution validation\n- Error scenario testing\n- Load testing\n\n## 🔧 Simplified Logging System\n\nRouteCodex includes a simplified logging system designed for users who need basic logging functionality without the complexity of the full debug system.\n\n### 🎯 **重要：用户配置基础功能**\n\n简化日志系统是**用户基础配置**的核心组件，完全独立于系统架构配置：\n\n#### **系统定位**\n- **类型**: 用户个人配置工具\n- **作用域**: 仅影响日志输出行为\n- **独立性**: 与4层管道架构零耦合\n- **目的**: 提供一键式日志管理，无需理解复杂架构\n\n#### **与系统配置的关系**\n```\n用户视角:  routecodex simple-log on --level debug\n              ↓ (完全独立)\n系统视角:  4层管道架构正常运行\n              ↓ (不受用户配置影响)\n部署流程:  高级部署策略照常执行\n```\n\n### Architecture Overview\n\nThe simplified logging system reduces complexity from 788 lines to 150 lines while maintaining essential functionality:\n\n```\nOriginal System (788 lines) → Simplified System (150 lines)\n├── Time Series Indexing        → Basic log storage\n├── Real-time Compression       → Removed\n├── Complex Query Engine        → Removed  \n├── Memory History Management   → Removed\n└── Advanced Analytics          → Basic filtering\n```\n\n### **独立性声明**\n简化日志系统的设计原则：**用户基础配置 ≠ 系统扩展配置**\n- ✅ **用户配置**: 控制个人日志偏好\n- ✅ **系统配置**: 控制4层管道架构  \n- ✅ **零重叠**: 两套配置控制不同功能域\n- ✅ **互补运行**: 同时启用，互不影响\n\n### Key Components\n\n#### 1. SimpleLogConfigManager\n- **Location**: `src/logging/simple-log-integration.ts`\n- **Purpose**: Manages configuration loading and monitoring\n- **Features**: \n  - File-based configuration storage\n  - Automatic configuration reloading\n  - Environment variable integration\n\n#### 2. SimpleTimeSeriesIndexer\n- **Location**: `src/logging/indexer/SimpleTimeSeriesIndexer.ts`\n- **Purpose**: Basic log storage without complex indexing\n- **Features**:\n  - Simple file-based storage\n  - No compression or sharding\n  - Basic time-based organization\n\n#### 3. Simple Log CLI\n- **Location**: `src/commands/simple-log.ts`\n- **Purpose**: User-friendly CLI for log configuration\n- **Commands**:\n  ```bash\n  routecodex simple-log on [--level debug] [--output console]\n  routecodex simple-log off\n  routecodex simple-log status\n  routecodex simple-log level <level>\n  routecodex simple-log output <output>\n  ```\n\n### Configuration Integration\n\nThe simplified logging system integrates seamlessly with the existing RouteCodex architecture:\n\n1. **CLI Detection**: `src/cli.ts` detects simple log configuration\n2. **Server Integration**: `src/server/http-server.ts` applies configuration during startup\n3. **Environment Variables**: Configuration applied via `SIMPLE_LOG_*` environment variables\n4. **Persistent Storage**: Settings stored in `~/.routecodex/simple-log-config.json`\n\n### Usage Flow\n\n```bash\n# User enables simplified logging\nroutecodex simple-log on --level debug --output console\n\n# Configuration saved to ~/.routecodex/simple-log-config.json\n{\n  \"enabled\": true,\n  \"logLevel\": \"debug\",\n  \"output\": \"console\",\n  \"autoStart\": true\n}\n\n# Server startup detects and applies configuration\nroutecodex start\n# Output: \"检测到简单日志配置，正在应用...\"\n# Output: \"✨ 简单日志配置已应用到系统！\"\n```\n\n### Benefits\n\n1. **Simplicity**: One-click configuration with sensible defaults\n2. **Persistence**: Configuration survives system restarts\n3. **Flexibility**: Support for multiple log levels and output modes\n4. **Performance**: Reduced memory footprint and faster startup\n5. **Compatibility**: Works alongside existing debug systems\n\n### Implementation Details\n\n#### Configuration Schema\n```typescript\ninterface SimpleLogConfig {\n  enabled: boolean;\n  logLevel: 'debug' | 'info' | 'warn' | 'error';\n  output: 'console' | 'file' | 'both';\n  logDirectory?: string;\n  autoStart: boolean;\n}\n```\n\n#### Integration Points\n- **Startup**: Configuration loaded in `src/index.ts`\n- **Module Loading**: Applied during module initialization\n- **Runtime**: Configuration changes monitored and applied dynamically\n\n#### Log Level Filtering\n```typescript\n// Simplified logger respects log level settings\nconst logger = createLoggerWithSimpleConfig(moduleId, moduleType);\n\n// Only logs at or above configured level are output\nif (levelPriority[level] >= levelPriority[config.logLevel]) {\n  console.log(`[${level}] [${moduleId}] ${message}`);\n}\n```\n\nThis architecture provides a solid foundation for building scalable, maintainable AI service integrations with proper separation of concerns and flexible configuration options.\n\n你运行进程需要用后台启动的方式，加入&,如果一定要前台运行就要用gtimeout\n\n---\n\n## 🔧 架构改进建议 (基于Sysmem分析)\n\n### 🚨 当前架构问题\n\n#### 高优先级问题\n1. **重复文件过多** (3318组)\n   - **原因**: node_modules、构建产物、依赖文件重复\n   - **影响**: 增加存储开销，扫描时间过长\n   - **解决方案**:\n     - 在.gitignore中完善忽略规则\n     - 清理不必要的构建产物\n     - 优化依赖管理策略\n\n2. **文档覆盖不完整** (7436个未记录文件)\n   - **原因**: 大量node_modules文件未被文档化\n   - **影响**: 架构分析准确度降低\n   - **解决方案**:\n     - 完善模块README文档\n     - 建立API文档自动生成机制\n     - 定期更新项目结构文档\n\n#### 中优先级问题\n1. **重复函数** (2个)\n   - **影响**: 代码维护复杂度增加\n   - **解决方案**: 重构通用函数到共享模块\n\n### 📈 改进路线图\n\n#### 第一阶段：清理和优化 (1-2周)\n- [ ] 完善.gitignore规则\n- [ ] 清理重复的构建产物\n- [ ] 统一依赖管理策略\n- [ ] 优化扫描过滤规则\n\n#### 第二阶段：文档完善 (2-3周)\n- [ ] 补充缺失的模块README\n- [ ] 建立API文档自动生成\n- [ ] 更新架构图和流程图\n- [ ] 创建开发者指南\n\n#### 第三阶段：架构优化 (3-4周)\n- [ ] 重构重复代码\n- [ ] 优化模块依赖关系\n- [ ] 建立自动化测试\n- [ ] 实施持续监控\n\n### 🛠️ 推荐工具和配置\n\n#### 依赖管理优化\n```json\n// package.json workspaces配置\n{\n  \"workspaces\": [\n    \"web-interface\",\n    \"sharedmodule/*\"\n  ]\n}\n```\n\n#### Git忽略规则优化\n```gitignore\n# 完善的忽略规则\nnode_modules/\ndist/\nbuild/\n*.log\n.env.local\n.DS_Store\n.vscode/settings.json\ncoverage/\n.nyc_output/\n```\n\n#### 自动化脚本\n```bash\n# scripts/architecture-health-check.sh\n#!/bin/bash\necho \"🔍 开始架构健康检查...\"\npython3 ~/.claude/skills/sysmem/scripts/collect_data.py .\necho \"✅ 架构检查完成，查看报告：.claude/skill/sysmem/project_data.json\"\n```\n\n### 📊 成功指标\n\n#### 定量指标\n- 重复文件数量减少 > 80%\n- 文档覆盖率达到 > 90%\n- 构建时间减少 > 20%\n- 代码重复率 < 5%\n\n#### 定性指标\n- 模块职责清晰分离\n- 文档完整且及时更新\n- 新开发者上手时间 < 1天\n- 架构变更影响可预测\n\n### 🔄 持续改进策略\n\n#### 定期检查\n- **每周**: 运行sysmem扫描，监控架构健康\n- **每月**: 评估改进措施效果，调整策略\n- **每季度**: 重大架构审查和优化\n\n#### 团队协作\n- **代码审查**: 包含架构影响评估\n- **文档更新**: 与代码变更同步进行\n- **知识分享**: 定期架构设计讨论\n\n---\n\n**文档维护**: 本文档由Sysmem技能自动维护，最后更新时间: 2025-10-31\n"
}