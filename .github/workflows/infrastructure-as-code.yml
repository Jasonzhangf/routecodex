name: Infrastructure as Code Security

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - 'docker-compose.yml'
      - '.github/workflows/infrastructure-as-code.yml'
      - 'helm/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - 'docker-compose.yml'
      - 'helm/**'

env:
  TERRAFORM_VERSION: '1.7.0'
  HELM_VERSION: '3.13.0'

jobs:
  # Terraform 安全检查
  terraform-security:
    runs-on: ubuntu-latest
    if: hashFiles('terraform/**/*.tf') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
        if [ $? -ne 0 ]; then
          echo "❌ Terraform files are not properly formatted"
          echo "Run 'terraform fmt -recursive' to fix formatting issues"
          exit 1
        fi

    - name: Terraform Init
      run: |
        cd terraform
        terraform init -backend=false

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Run Checkov Security Scan
      uses: bridgecrewio/checkov-action@v12
      with:
        directory: terraform/
        framework: terraform
        output_format: sarif
        output_file_path: checkov-results.sarif
        download_external_modules: true
        compact: true
        quiet: false
        soft_fail: false
        severity: medium

    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

    - name: Run tfsec Security Scan
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform/
        format: sarif
        out: tfsec-results.sarif
        soft_fail: false
        severity: medium

    - name: Upload tfsec scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: tfsec-results.sarif

    - name: Terraform Cost Estimation
      uses: terraform-linters/tflint@v1
      with:
        tflint_version: v0.50.0
        working_directory: terraform/

    - name: Check for hardcoded secrets in Terraform
      run: |
        # 检查Terraform文件中的硬编码密钥
        if grep -r "password\|secret\|key\|token" terraform/*.tf | grep -v "variable\|data\|local" | grep "="; then
          echo "⚠️  Potential hardcoded secrets found in Terraform files"
          exit 1
        fi

    - name: Validate Terraform naming conventions
      run: |
        # 检查命名约定
        cd terraform
        
        # 检查资源命名
        grep -r "resource \"" . | grep -v "_" && {
          echo "❌ Terraform resources should use snake_case naming"
          exit 1
        }
        
        # 检查变量命名
        grep -r "variable \"" . | grep "[A-Z]" && {
          echo "❌ Terraform variables should use lowercase naming"
          exit 1
        }

    - name: Check Terraform provider versions
      run: |
        # 确保provider版本被锁定
        cd terraform
        if ! grep -r "required_providers" . | grep -q "version"; then
          echo "⚠️  Terraform provider versions should be pinned for reproducibility"
        fi

  # Kubernetes 安全检查
  kubernetes-security:
    runs-on: ubuntu-latest
    if: hashFiles('k8s/**/*.yaml') != '' || hashFiles('k8s/**/*.yml') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.29.0'

    - name: Validate Kubernetes manifests
      run: |
        # 验证所有Kubernetes YAML文件
        find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "Validating $file..."
          kubectl apply --dry-run=client -f "$file"
          if [ $? -ne 0 ]; then
            echo "❌ Invalid Kubernetes manifest: $file"
            exit 1
          fi
        done

    - name: Run Polaris security scan
      uses: fairwindsops/polaris-action@v1
      with:
        config: |
          checks:
            cpuLimitsMissing: warning
            memoryLimitsMissing: warning
            runAsNonRoot: error
            runAsPrivileged: error
            dangerousCapabilities: error
            hostPIDSet: error
            hostNetworkSet: error
            hostIPCSet: error
            notReadOnlyRootFilesystem: warning
            privilegeEscalationAllowed: error

    - name: Run Kubesec Security Scan
      run: |
        # 下载并运行kubesec
        wget https://github.com/controlplaneio/kubesec/releases/download/v2.11.5/kubesec_linux_amd64.tar.gz
        tar -xzf kubesec_linux_amd64.tar.gz
        chmod +x kubesec
        
        # 扫描所有Kubernetes文件
        find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
          echo "Scanning $file with Kubesec..."
          ./kubesec scan "$file" > "${file}.kubesec.json"
          
          # 检查分数是否过低
          SCORE=$(jq -r '.[].score' "${file}.kubesec.json" | head -n 1)
          if [ "$SCORE" -lt 5 ]; then
            echo "❌ Low security score ($SCORE) for $file"
            exit 1
          fi
        done

    - name: Check for privileged containers
      run: |
        # 检查特权容器
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs grep -l "privileged:\s*true" && {
          echo "❌ Privileged containers found - security risk!"
          exit 1
        }

    - name: Check for host network access
      run: |
        # 检查主机网络访问
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs grep -l "hostNetwork:\s*true" && {
          echo "❌ Host network access found - security risk!"
          exit 1
        }

    - name: Validate resource limits
      run: |
        # 检查资源限制
        find k8s/ -name "*.yaml" -o -name "*.yml" | while read file; do
          if grep -q "kind: Deployment\|kind: StatefulSet\|kind: DaemonSet" "$file"; then
            if ! grep -A 20 "containers:" "$file" | grep -q "resources:"; then
              echo "⚠️  Resource limits not defined in $file"
            fi
          fi
        done

    - name: Check for latest image tags
      run: |
        # 检查是否使用了latest标签
        find k8s/ -name "*.yaml" -o -name "*.yml" | xargs grep -l "image:.*:latest" && {
          echo "⚠️  'latest' image tags found - consider using specific versions"
        }

  # Helm Chart 安全检查
  helm-security:
    runs-on: ubuntu-latest
    if: hashFiles('helm/**/*.yaml') != '' || hashFiles('helm/**/*.yml') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Lint Helm charts
      run: |
        # 检查所有Helm chart
        find helm/ -name Chart.yaml | while read chart; do
          CHART_DIR=$(dirname "$chart")
          echo "Linting Helm chart in $CHART_DIR..."
          helm lint "$CHART_DIR"
          if [ $? -ne 0 ]; then
            echo "❌ Helm chart linting failed for $CHART_DIR"
            exit 1
          fi
        done

    - name: Validate Helm chart schema
      run: |
        # 验证values文件
        find helm/ -name values.yaml | while read values; do
          CHART_DIR=$(dirname "$values")
          if [ -f "$CHART_DIR/values.schema.json" ]; then
            echo "Validating values against schema for $CHART_DIR..."
            # 这里可以添加JSON schema验证
          fi
        done

    - name: Run Helm security scan
      run: |
        # 使用helm-secrets检查加密值
        if command -v helm-secrets >/dev/null 2>&1; then
          find helm/ -name secrets.yaml | while read secrets; do
            echo "Checking encrypted secrets in $secrets..."
            helm secrets view "$secrets" >/dev/null
          done
        fi

    - name: Check Helm chart security
      run: |
        # 使用helm-template渲染并检查
        find helm/ -name Chart.yaml | while read chart; do
          CHART_DIR=$(dirname "$chart")
          echo "Security checking Helm chart in $CHART_DIR..."
          
          # 渲染模板
          helm template test-release "$CHART_DIR" > rendered.yaml
          
          # 检查渲染后的YAML安全性
          if grep -q "runAsUser: 0" rendered.yaml; then
            echo "❌ Container running as root user found"
            exit 1
          fi
          
          if grep -q "privileged: true" rendered.yaml; then
            echo "❌ Privileged container found"
            exit 1
          fi
          
          rm rendered.yaml
        done

  # Docker Compose 安全检查
  docker-compose-security:
    runs-on: ubuntu-latest
    if: hashFiles('docker-compose.yml') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate Docker Compose
      run: |
        # 基本语法验证
        docker-compose config > /dev/null
        if [ $? -ne 0 ]; then
          echo "❌ Invalid Docker Compose file"
          exit 1
        fi

    - name: Check Docker Compose security
      run: |
        # 检查安全最佳实践
        
        # 检查是否使用了root用户
        if grep -q "user:.*root" docker-compose.yml; then
          echo "❌ Root user specified in docker-compose.yml"
          exit 1
        fi
        
        # 检查是否使用了特权模式
        if grep -q "privileged:.*true" docker-compose.yml; then
          echo "❌ Privileged mode enabled in docker-compose.yml"
          exit 1
        fi
        
        # 检查资源限制
        if ! grep -q "deploy:" docker-compose.yml; then
          echo "⚠️  Resource limits not specified - consider adding deploy section"
        fi
        
        # 检查网络配置
        if grep -q "network_mode:.*host" docker-compose.yml; then
          echo "⚠️  Host network mode used - ensure this is necessary"
        fi

    - name: Validate Docker Compose secrets
      run: |
        # 检查是否正确使用secrets
        if grep -q "password\|secret\|key" docker-compose.yml && ! grep -q "secrets:" docker-compose.yml; then
          echo "⚠️  Potential secrets found - consider using Docker secrets"
        fi

  # 基础设施成本估算
  infrastructure-cost:
    runs-on: ubuntu-latest
    if: hashFiles('terraform/**/*.tf') != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Install Infracost
      run: |
        curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh

    - name: Generate cost estimate
      env:
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
      run: |
        cd terraform
        terraform init -backend=false
        
        # 生成成本估算
        infracost breakdown --path . \
          --format json \
          --out-file /tmp/infracost.json
        
        # 显示成本估算
        infracost output --path /tmp/infracost.json --format table
        
        # 检查成本是否超过阈值
        MONTHLY_COST=$(infracost output --path /tmp/infracost.json --format json | jq -r '.totalMonthlyCost')
        MAX_COST=100  # 最大$100/月
        
        if (( $(echo "$MONTHLY_COST > $MAX_COST" | bc -l) )); then
          echo "❌ Estimated monthly cost ($$MONTHLY_COST) exceeds maximum allowed ($$MAX_COST)"
          exit 1
        fi

    - name: Comment PR with cost estimate
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const infracostData = JSON.parse(fs.readFileSync('/tmp/infracost.json', 'utf8'));
          
          const comment = `## 💰 Infrastructure Cost Estimate
          
          **Estimated Monthly Cost**: $${infracostData.totalMonthlyCost}
          
          <details>
          <summary>Cost Breakdown</summary>
          
          \`\`\`
          ${JSON.stringify(infracostData.projects[0].breakdown.resources, null, 2)}
          \`\`\`
          </details>
          
          *Powered by Infracost*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });