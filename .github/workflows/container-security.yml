name: Container Security Scan

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/container-security.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨2点运行

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建和扫描容器镜像
  container-security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        load: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'  # 发现严重漏洞时失败

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Grype vulnerability scanner
      uses: anchore/scan-action@v3
      with:
        image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        fail-build: true
        severity-cutoff: high

    - name: Docker Scout vulnerability scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
        format: sarif
        output: docker-scout-results.sarif

    - name: Check for root user
      run: |
        # 检查容器是否以root用户运行
        docker run --rm --entrypoint sh ${{ fromJSON(steps.meta.outputs.json).tags[0] }} -c 'id' | grep -v 'uid=0(root)'
        if [ $? -eq 0 ]; then
          echo "✅ Container is not running as root user"
        else
          echo "❌ Container is running as root user - security risk!"
          exit 1
        fi

    - name: Check for unnecessary packages
      run: |
        # 扫描容器中不必要的软件包
        docker run --rm --entrypoint sh ${{ fromJSON(steps.meta.outputs.json).tags[0] }} -c '
          if command -v apt-get >/dev/null 2>&1; then
            apt list --installed | grep -E "(vim|nano|emacs|curl|wget)" && exit 1
          elif command -v yum >/dev/null 2>&1; then
            yum list installed | grep -E "(vim|nano|emacs|curl|wget)" && exit 1
          fi
        '
        if [ $? -eq 0 ]; then
          echo "⚠️  Found potentially unnecessary packages in container"
        fi

    - name: Check image size
      run: |
        # 检查镜像大小是否合理
        IMAGE_SIZE=$(docker images ${{ fromJSON(steps.meta.outputs.json).tags[0] }} --format "table {{.Size}}" | tail -n 1 | sed 's/MB//')
        MAX_SIZE=500
        
        if (( $(echo "$IMAGE_SIZE > $MAX_SIZE" | bc -l) )); then
          echo "❌ Image size ($IMAGE_SIZE MB) exceeds maximum allowed size ($MAX_SIZE MB)"
          exit 1
        else
          echo "✅ Image size ($IMAGE_SIZE MB) is within acceptable limits"
        fi

    - name: Push image if secure
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Dockerfile 最佳实践检查
  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: false
        failure-threshold: warning

    - name: Upload Hadolint scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: hadolint-results.sarif

    - name: Check Dockerfile security
      run: |
        # 检查Dockerfile中的安全问题
        if grep -q "USER root" Dockerfile; then
          echo "⚠️  Dockerfile contains USER root - consider using non-root user"
        fi
        
        if grep -q "apt-get update" Dockerfile; then
          echo "⚠️  Dockerfile contains apt-get update - ensure cleanup is performed"
        fi
        
        if ! grep -q "apk --no-cache" Dockerfile && grep -q "apk add" Dockerfile; then
          echo "⚠️  Consider using --no-cache with apk commands"
        fi

  # 容器运行时安全测试
  container-runtime-security:
    runs-on: ubuntu-latest
    needs: [container-security-scan]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download built image
      uses: actions/download-artifact@v3
      with:
        name: container-image

    - name: Load Docker image
      run: |
        docker load -i image.tar

    - name: Test container runtime security
      run: |
        # 测试容器运行时安全配置
        docker run -d --name test-container --read-only --tmpfs /tmp --tmpfs /var/tmp ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        sleep 5
        
        # 检查容器是否以只读模式运行
        docker exec test-container touch /test-write 2>/dev/null
        if [ $? -eq 0 ]; then
          echo "❌ Container filesystem is not read-only"
          exit 1
        else
          echo "✅ Container filesystem is properly read-only"
        fi
        
        docker stop test-container
        docker rm test-container

    - name: Test capability dropping
      run: |
        # 测试容器是否丢弃了不必要的capabilities
        docker run --rm --cap-drop=ALL --cap-add=CHOWN ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest sh -c 'getpcaps $$' | grep -v "cap_sys_admin"
        if [ $? -eq 0 ]; then
          echo "✅ Container capabilities properly restricted"
        else
          echo "❌ Container has excessive capabilities"
          exit 1
        fi

  # 镜像签名和验证
  image-signing:
    runs-on: ubuntu-latest
    needs: [container-security-scan, dockerfile-lint]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Sign container image
      run: |
        # 使用Cosign对容器镜像进行签名
        cosign sign --yes ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      env:
        COSIGN_EXPERIMENTAL: 1

    - name: Verify image signature
      run: |
        # 验证镜像签名
        cosign verify ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --certificate-identity-regexp=".*" --certificate-oidc-issuer-regexp=".*"