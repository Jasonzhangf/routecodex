name: Strict CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'
  MIN_COVERAGE: 80
  MAX_COMPLEXITY: 10

jobs:
  # 严格的代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint with strict config
      run: npm run lint
      continue-on-error: false

    - name: Check TypeScript strict mode
      run: npx tsc --noEmit --strict
      continue-on-error: false

    - name: Run Prettier format check
      run: npm run format:check
      continue-on-error: false

    - name: Check code complexity
      run: |
        npm run complexity:check
        if [ $? -ne 0 ]; then
          echo "Code complexity analysis failed"
          exit 1
        fi

    - name: Check for code duplication
      run: |
        npm run duplication:check
        if [ $? -ne 0 ]; then
          echo "Code duplication exceeds 5% threshold"
          exit 1
        fi

  # 严格的安全审计
  security-audit:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit (HIGH severity)
      run: |
        npm audit --audit-level high
        if [ $? -ne 0 ]; then
          echo "Security vulnerabilities found at HIGH severity level"
          exit 1
        fi

    - name: Check for known vulnerabilities
      run: npx audit-ci --config ./audit-ci.json

    - name: Run Snyk security scan
      if: ${{ secrets.SNYK_TOKEN != '' }}
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Check for hardcoded secrets
      run: |
        npm run secrets:check
        if [ $? -ne 0 ]; then
          echo "Potential hardcoded secrets detected"
          exit 1
        fi

  # 全面的测试覆盖
  comprehensive-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Check coverage threshold
      run: |
        npx nyc check-coverage \
          --statements ${{ env.MIN_COVERAGE }} \
          --branches ${{ env.MIN_COVERAGE }} \
          --functions ${{ env.MIN_COVERAGE }} \
          --lines ${{ env.MIN_COVERAGE }}
        if [ $? -ne 0 ]; then
          echo "Code coverage below minimum threshold (${{ env.MIN_COVERAGE }}%)"
          exit 1
        fi

    - name: Run integration tests
      run: npm run test:integration

    - name: Run end-to-end tests
      run: npm run test:e2e

    - name: Run performance tests
      run: npm run test:performance

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # 依赖和许可证检查
  dependency-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check for unused dependencies
      run: |
        npm run depcheck
        if [ $? -ne 0 ]; then
          echo "Unused dependencies found"
          exit 1
        fi

    - name: Check dependency licenses
      run: |
        npm run license:check
        if [ $? -ne 0 ]; then
          echo "Non-approved licenses found in dependencies"
          exit 1
        fi

    - name: Check for outdated dependencies
      run: |
        npm run ncu:check
        if [ $? -ne 0 ]; then
          echo "Critical dependency updates available"
          exit 1
        fi

  # 构建验证
  build-validation:
    runs-on: ubuntu-latest
    needs: [code-quality, security-audit, comprehensive-testing, dependency-check]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Clean build
      run: |
        npm run clean
        npm run build

    - name: Verify build artifacts
      run: |
        if [ ! -d "dist" ]; then
          echo "Build artifacts not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.js" ]; then
          echo "Main entry point not found"
          exit 1
        fi

    - name: Test CLI functionality
      run: |
        node dist/cli.js --help
        node dist/cli.js simple-log status || true

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          dist/
          coverage/
          !coverage/node_modules/
        retention-days: 30

  # 发布准备检查
  release-readiness:
    runs-on: ubuntu-latest
    needs: [build-validation]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check version consistency
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "Package version: $PACKAGE_VERSION"
        
        # Check if version is valid semver
        if ! [[ $PACKAGE_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format"
          exit 1
        fi

    - name: Validate package.json
      run: |
        npm run package:validate
        if [ $? -ne 0 ]; then
          echo "package.json validation failed"
          exit 1
        fi

    - name: Check for breaking changes
      run: |
        if git diff HEAD~1 HEAD --name-only | grep -q "BREAKING_CHANGE"; then
          echo "Breaking changes detected - manual review required"
          exit 1
        fi
