import React, { useState, useCallback, useMemo } from 'react';
import { MessageTruncator, type TruncationOptions, type TruncationResult } from '../utils/message-truncator';

interface EnhancedJsonViewerProps {
  data: any;
  title?: string;
  initialExpanded?: boolean;
  enableTruncation?: boolean;
  truncationOptions?: TruncationOptions;
  onTruncationChange?: (result: TruncationResult) => void;
  showTruncationControls?: boolean;
  theme?: 'light' | 'dark';
}

export const EnhancedJsonViewer: React.FC<EnhancedJsonViewerProps> = ({
  data,
  title = 'JSON Data',
  initialExpanded = false,
  enableTruncation = true,
  truncationOptions,
  onTruncationChange,
  showTruncationControls = true,
  theme = 'light'
}) => {
  const [expandedPaths, setExpandedPaths] = useState<Set<string>>(new Set());
  const [isFullyExpanded, setIsFullyExpanded] = useState(initialExpanded);
  const [customTruncationOptions, setCustomTruncationOptions] = useState<TruncationOptions>(truncationOptions || {});

  // 智能截断建议
  const truncationSuggestions = useMemo(() => {
    if (!enableTruncation) return null;
    return MessageTruncator.getTruncationSuggestions(data);
  }, [data, enableTruncation]);

  // 应用截断
  const truncatedData = useMemo(() => {
    if (!enableTruncation) return data;

    const options = {
      ...truncationSuggestions?.recommended,
      ...customTruncationOptions
    };

    const result = MessageTruncator.truncate(data, options);
    onTruncationChange?.(result);
    return result.data;
  }, [data, enableTruncation, truncationSuggestions, customTruncationOptions, onTruncationChange]);

  // 获取截断信息
  const truncationInfo = useMemo(() => {
    if (!enableTruncation) return null;
    const result = MessageTruncator.truncate(data, customTruncationOptions || {});
    return result.truncationInfo;
  }, [data, enableTruncation, customTruncationOptions]);

  // 大型内容检测
  const largeContentInfo = useMemo(() => {
    return MessageTruncator.detectLargeContent(data);
  }, [data]);

  // 切换路径展开状态
  const togglePath = useCallback((path: string) => {
    setExpandedPaths(prev => {
      const newSet = new Set(prev);
      if (newSet.has(path)) {
        newSet.delete(path);
      } else {
        newSet.add(path);
      }
      return newSet;
    });
  }, []);

  // 展开所有路径
  const expandAll = useCallback(() => {
    const allPaths = new Set<string>();
    const collectPaths = (obj: any, path: string = '') => {
      if (typeof obj === 'object' && obj !== null) {
        if (Array.isArray(obj)) {
          obj.forEach((item, index) => {
            collectPaths(item, `${path}[${index}]`);
          });
        } else {
          Object.keys(obj).forEach(key => {
            const newPath = path ? `${path}.${key}` : key;
            allPaths.add(newPath);
            collectPaths(obj[key], newPath);
          });
        }
      }
    };
    collectPaths(truncatedData);
    setExpandedPaths(allPaths);
    setIsFullyExpanded(true);
  }, [truncatedData]);

  // 折叠所有路径
  const collapseAll = useCallback(() => {
    setExpandedPaths(new Set());
    setIsFullyExpanded(false);
  }, []);

  // 渲染JSON值
  const renderJsonValue = useCallback((value: any, path: string, level: number = 0): React.ReactNode => {
    const isExpanded = expandedPaths.has(path);
    const isArray = Array.isArray(value);
    const isObject = typeof value === 'object' && value !== null && !isArray;

    // 处理特殊截断标记
    if (typeof value === 'string' && value.includes('[TRUNCATED:')) {
      const parts = value.split('[TRUNCATED:');
      const content = parts[0];
      const truncationInfo = parts[1]?.replace(']', '') || '';

      return (
        <div className="json-truncated" style={{ marginLeft: level * 20 }}>
          <div className="json-content truncated">
            <pre>{content}</pre>
          </div>
          <div className="truncation-warning">
            ⚠️ {truncationInfo}
          </div>
        </div>
      );
    }

    // 处理省略标记
    if (typeof value === 'string' && (value.includes('[... omitted') || value.includes('[... omitted items'))) {
      return (
        <div className="json-omitted" style={{ marginLeft: level * 20 }}>
          <span className="omitted-marker">📦 {value}</span>
        </div>
      );
    }

    // 处理循环引用和深度限制
    if (typeof value === 'string' && (value.includes('[Circular Reference]') || value.includes('[Max Depth Exceeded]'))) {
      return (
        <div className="json-special" style={{ marginLeft: level * 20 }}>
          <span className="special-marker">🔗 {value}</span>
        </div>
      );
    }

    if (isObject || isArray) {
      const itemCount = Object.keys(value).length;
      const canExpand = itemCount > 0;

      return (
        <div className="json-object" style={{ marginLeft: level * 20 }}>
          <div
            className={`json-toggle ${canExpand ? 'clickable' : ''}`}
            onClick={() => canExpand && togglePath(path)}
          >
            {canExpand && (
              <span className="toggle-icon">
                {isExpanded ? '▼' : '▶'}
              </span>
            )}
            <span className="json-key">
              {path.split('.').pop()?.replace(/\[\d+\]$/, '')}:
            </span>
            <span className="json-type">
              {isArray ? `Array[${itemCount}]` : `Object{${itemCount}}`}
            </span>
            {canExpand && (
              <span className="toggle-hint">
                ({isExpanded ? '收起' : '展开'})
              </span>
            )}
          </div>

          {isExpanded && (
            <div className="json-children">
              {Object.entries(value).map(([key, val]) => (
                <div key={key}>
                  {renderJsonValue(val, `${path}.${key}`, level + 1)}
                </div>
              ))}
            </div>
          )}
        </div>
      );
    }

    // 基本类型值
    return (
      <div className="json-value" style={{ marginLeft: level * 20 }}>
        <span className="json-key">
          {path.split('.').pop()?.replace(/\[\d+\]$/, '')}:
        </span>
        <span className={`json-value-${typeof value}`}>
          {typeof value === 'string' && value.length > 100
            ? `${value.substring(0, 100)}...`
            : JSON.stringify(value)
          }
        </span>
        {typeof value === 'string' && value.length > 100 && (
          <span className="length-info">
            ({value.length} chars)
          </span>
        )}
      </div>
    );
  }, [expandedPaths, togglePath]);

  // 更新截断选项
  const updateTruncationOption = useCallback((key: keyof TruncationOptions, value: any) => {
    setCustomTruncationOptions(prev => ({
      ...prev,
      [key]: value
    }));
  }, []);

  // 重置截断选项
  const resetTruncationOptions = useCallback(() => {
    setCustomTruncationOptions({});
  }, []);

  return (
    <div className={`enhanced-json-viewer ${theme}`}>
      {/* 头部信息和控制 */}
      <div className="json-viewer-header">
        <div className="json-title">
          <h3>{title}</h3>
          {largeContentInfo.isLarge && (
            <span className="large-content-warning">
              📊 大型内容 ({(largeContentInfo.totalSize / 1024).toFixed(1)}KB)
            </span>
          )}
        </div>

        <div className="json-actions">
          <button onClick={expandAll} title="展开全部">
            📂 展开全部
          </button>
          <button onClick={collapseAll} title="折叠全部">
            📁 折叠全部
          </button>
          <button
            onClick={() => navigator.clipboard.writeText(JSON.stringify(data, null, 2))}
            title="复制原始数据"
          >
            📋 复制原始
          </button>
          <button
            onClick={() => navigator.clipboard.writeText(JSON.stringify(truncatedData, null, 2))}
            title="复制截断数据"
          >
            📋 复制截断
          </button>
        </div>
      </div>

      {/* 截断控制面板 */}
      {showTruncationControls && enableTruncation && (
        <div className="truncation-controls">
          <div className="truncation-header">
            <h4>🔧 截断设置</h4>
            <button onClick={resetTruncationOptions} className="reset-btn">
              重置
            </button>
          </div>

          <div className="truncation-options">
            <div className="option-group">
              <label>
                最大字符数:
                <input
                  type="number"
                  value={customTruncationOptions.maxLength || truncationSuggestions?.recommended.maxLength || 10000}
                  onChange={(e) => updateTruncationOption('maxLength', parseInt(e.target.value))}
                  min="100"
                  max="100000"
                />
              </label>
            </div>

            <div className="option-group">
              <label>
                最大行数:
                <input
                  type="number"
                  value={customTruncationOptions.maxLines || truncationSuggestions?.recommended.maxLines || 50}
                  onChange={(e) => updateTruncationOption('maxLines', parseInt(e.target.value))}
                  min="10"
                  max="200"
                />
              </label>
            </div>

            <div className="option-group">
              <label>
                数组最大项数:
                <input
                  type="number"
                  value={customTruncationOptions.maxArrayItems || truncationSuggestions?.recommended.maxArrayItems || 20}
                  onChange={(e) => updateTruncationOption('maxArrayItems', parseInt(e.target.value))}
                  min="5"
                  max="100"
                />
              </label>
            </div>

            <div className="option-group">
              <label>
                <input
                  type="checkbox"
                  checked={customTruncationOptions.showTruncationInfo !== false}
                  onChange={(e) => updateTruncationOption('showTruncationInfo', e.target.checked)}
                />
                显示截断信息
              </label>
            </div>
          </div>

          {/* 截断建议 */}
          {truncationSuggestions && truncationSuggestions.detectedIssues.length > 0 && (
            <div className="truncation-suggestions">
              <h5>💡 智能建议:</h5>
              <p>{truncationSuggestions.reason}</p>
              <ul>
                {truncationSuggestions.detectedIssues.map((issue, index) => (
                  <li key={index}>{issue}</li>
                ))}
              </ul>
            </div>
          )}

          {/* 截断信息 */}
          {truncationInfo && truncationInfo.isTruncated && (
            <div className="truncation-info">
              <h5>📊 截断统计:</h5>
              <div className="info-grid">
                <div className="info-item">
                  <span>原始大小:</span>
                  <span>{(truncationInfo.originalLength / 1024).toFixed(1)}KB</span>
                </div>
                <div className="info-item">
                  <span>截断后:</span>
                  <span>{(truncationInfo.truncatedLength / 1024).toFixed(1)}KB</span>
                </div>
                <div className="info-item">
                  <span>压缩率:</span>
                  <span>{((1 - truncationInfo.truncatedLength / truncationInfo.originalLength) * 100).toFixed(1)}%</span>
                </div>
                <div className="info-item">
                  <span>截断类型:</span>
                  <span>{truncationInfo.truncationType}</span>
                </div>
              </div>

              {truncationInfo.truncatedPaths.length > 0 && (
                <div className="truncated-paths">
                  <h6>已截断路径:</h6>
                  <div className="path-list">
                    {truncationInfo.truncatedPaths.slice(0, 5).map((path, index) => (
                      <span key={index} className="path-tag">{path}</span>
                    ))}
                    {truncationInfo.truncatedPaths.length > 5 && (
                      <span className="path-more">+{truncationInfo.truncatedPaths.length - 5} more</span>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      {/* JSON内容 */}
      <div className="json-content">
        {renderJsonValue(truncatedData, 'root', 0)}
      </div>
    </div>
  );
};

export default EnhancedJsonViewer;