import React, { useState } from 'react';
import { EnhancedJsonViewer } from '../components/EnhancedJsonViewer';
import { MessageTruncator } from '../utils/message-truncator';

// 示例数据 - 模拟大型流水线数据
const createSampleData = () => {
  // 大型消息内容
  const largeMessage = "这是一个非常长的消息内容，用于测试截断功能。" +
    "在真实的AI应用场景中，我们经常会遇到很长的对话历史、".repeat(20) +
    "或者大量的工具调用结果。这些内容如果不进行适当处理，".repeat(15) +
    "会严重影响页面性能和用户体验。通过智能截断，我们可以".repeat(10) +
    "在保持数据结构完整性的同时，只显示关键信息。".repeat(8);

  // 大型数组
  const largeArray = Array.from({ length: 50 }, (_, i) => ({
    id: `item-${i}`,
    content: `数组项 ${i} 的内容`,
    metadata: {
      index: i,
      timestamp: Date.now() + i * 1000,
      details: `详细信息 ${i}`.repeat(5)
    }
  }));

  // 深层嵌套对象
  const deepObject = {
    level1: {
      level2: {
        level3: {
          level4: {
            level5: {
              data: "深层嵌套数据",
              array: largeArray.slice(0, 10),
              messages: Array.from({ length: 30 }, (_, i) => ({
                role: i % 2 === 0 ? 'user' : 'assistant',
                content: largeMessage.substring(0, 100) + ` [消息 ${i}]`
              }))
            }
          }
        }
      }
    }
  };

  return {
    pipeline: {
      id: 'pipeline-123',
      type: 'llm-switch → compatibility → provider → ai-service',
      status: 'running',
      startTime: Date.now(),
      nodes: [
        {
          id: 'llm-switch-1',
          name: 'OpenAI Passthrough',
          type: 'llm-switch',
          input: {
            model: 'gpt-4',
            messages: [
              {
                role: 'system',
                content: '你是一个 helpful assistant'
              },
              {
                role: 'user',
                content: largeMessage
              },
              ...Array.from({ length: 25 }, (_, i) => ({
                role: i % 2 === 0 ? 'user' : 'assistant',
                content: `对话消息 ${i}: ${largeMessage.substring(0, 200)}...`
              }))
            ],
            max_tokens: 4000,
            temperature: 0.7
          },
          output: {
            routing: {
              category: 'longcontext',
              confidence: 0.85,
              reasoning: '长文本处理请求，需要大上下文支持'
            },
            metadata: {
              processingTime: 150,
              tokensEstimated: 2500
            }
          }
        },
        {
          id: 'compatibility-1',
          name: 'LM Studio Compatibility',
          type: 'compatibility',
          input: {
            originalRequest: {
              model: 'gpt-4',
              messages: largeArray.slice(0, 5).map((item, i) => ({
                role: i % 2 === 0 ? 'user' : 'assistant',
                content: item.content
              }))
            },
            transformedRequest: {
              model: 'qwen-turbo',
              messages: largeArray.slice(0, 5).map((item, i) => ({
                role: i % 2 === 0 ? 'user' : 'assistant',
                content: item.content
              }))
            }
          },
          output: {
            compatibility: {
              toolsConverted: 3,
              formatAdapted: true,
              providerReady: true
            }
          }
        },
        {
          id: 'provider-1',
          name: 'Qwen Provider',
          type: 'provider',
          input: {
            model: 'qwen-turbo',
            messages: largeArray.slice(0, 10).map((item, i) => ({
              role: i % 2 === 0 ? 'user' : 'assistant',
              content: item.content
            })),
            tools: [
              {
                type: 'function',
                function: {
                  name: 'get_weather',
                  description: '获取天气信息',
                  parameters: {
                    type: 'object',
                    properties: {
                      location: {
                        type: 'string',
                        description: '城市名称'
                      },
                      unit: {
                        type: 'string',
                        enum: ['celsius', 'fahrenheit']
                      }
                    },
                    required: ['location']
                  }
                }
              }
            ]
          },
          output: {
            response: {
              id: 'chat-123',
              object: 'chat.completion',
              created: Date.now(),
              model: 'qwen-turbo',
              choices: [
                {
                  index: 0,
                  message: {
                    role: 'assistant',
                    content: largeMessage.substring(0, 500) + '... [响应内容被截断]'
                  },
                  finish_reason: 'stop'
                }
              ],
              usage: {
                prompt_tokens: 1500,
                completion_tokens: 800,
                total_tokens: 2300
              }
            },
            metadata: {
              provider: 'qwen',
              processingTime: 2800,
              success: true
            }
          }
        }
      ],
      performance: {
        totalTime: 3200,
        nodeTimes: [150, 250, 2800],
        memoryUsage: {
          used: 256 * 1024 * 1024,
          total: 512 * 1024 * 1024,
          percentage: 50
        }
      },
      deepData: deepObject
    }
  };
};

export const EnhancedJsonViewerExample: React.FC = () => {
  const [sampleData] = useState(() => createSampleData());
  const [activeTab, setActiveTab] = useState<'input' | 'output' | 'config' | 'performance'>('input');
  const [truncationEnabled, setTruncationEnabled] = useState(true);
  const [theme, setTheme] = useState<'light' | 'dark'>('light');

  // 获取当前显示的数据
  const getCurrentData = () => {
    switch (activeTab) {
      case 'input':
        return sampleData.pipeline.nodes[0].input;
      case 'output':
        return sampleData.pipeline.nodes[2].output;
      case 'config':
        return sampleData.pipeline;
      case 'performance':
        return sampleData.pipeline.performance;
      default:
        return sampleData;
    }
  };

  // 大型内容检测
  const contentAnalysis = MessageTruncator.detectLargeContent(getCurrentData());

  return (
    <div className={`example-container ${theme}`}>
      <style>
        {`
          .example-container {
            padding: 20px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
          }
          .example-container.dark {
            background: #1a1a1a;
            color: #e0e0e0;
            min-height: 100vh;
          }
          .example-header {
            margin-bottom: 20px;
          }
          .example-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 8px;
          }
          .example-description {
            color: #666;
            margin-bottom: 16px;
          }
          .dark .example-description {
            color: #aaa;
          }
          .controls {
            display: flex;
            gap: 12px;
            margin-bottom: 20px;
            flex-wrap: wrap;
          }
          .tab-buttons {
            display: flex;
            background: #f0f0f0;
            border-radius: 6px;
            padding: 4px;
          }
          .dark .tab-buttons {
            background: #333;
          }
          .tab-button {
            padding: 8px 16px;
            border: none;
            background: transparent;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
          }
          .tab-button.active {
            background: #007bff;
            color: white;
          }
          .dark .tab-button.active {
            background: #0056b3;
          }
          .control-button {
            padding: 8px 16px;
            border: 1px solid #ddd;
            background: white;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.2s;
          }
          .control-button:hover {
            background: #f0f0f0;
          }
          .dark .control-button {
            background: #333;
            border-color: #555;
            color: #e0e0e0;
          }
          .dark .control-button:hover {
            background: #444;
          }
          .content-analysis {
            background: #f8f9fa;
            border: 1px solid #e0e0e0;
            border-radius: 6px;
            padding: 12px;
            margin-bottom: 16px;
            font-size: 14px;
          }
          .dark .content-analysis {
            background: #2a2a2a;
            border-color: #444;
          }
          .analysis-title {
            font-weight: 600;
            margin-bottom: 8px;
          }
          .analysis-stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 12px;
          }
          .stat-item {
            display: flex;
            justify-content: space-between;
          }
          .stat-label {
            color: #666;
          }
          .dark .stat-label {
            color: #aaa;
          }
          .stat-value {
            font-weight: 600;
          }
        `}
      </style>

      <div className="example-header">
        <h1 className="example-title">Enhanced JSON Viewer 示例</h1>
        <p className="example-description">
          演示智能截断和可折叠JSON查看器的功能，特别适用于大型流水线数据的可视化展示。
        </p>
      </div>

      <div className="controls">
        <div className="tab-buttons">
          {['input', 'output', 'config', 'performance'].map(tab => (
            <button
              key={tab}
              className={`tab-button ${activeTab === tab ? 'active' : ''}`}
              onClick={() => setActiveTab(tab as any)}
            >
              {tab === 'input' && '输入数据'}
              {tab === 'output' && '输出数据'}
              {tab === 'config' && '配置信息'}
              {tab === 'performance' && '性能数据'}
            </button>
          ))}
        </div>

        <button
          className="control-button"
          onClick={() => setTruncationEnabled(!truncationEnabled)}
        >
          {truncationEnabled ? '禁用截断' : '启用截断'}
        </button>

        <button
          className="control-button"
          onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
        >
          {theme === 'light' ? '暗色主题' : '亮色主题'}
        </button>

        <button
          className="control-button"
          onClick={() => {
            const data = getCurrentData();
            navigator.clipboard.writeText(JSON.stringify(data, null, 2));
          }}
        >
          复制数据
        </button>
      </div>

      {/* 内容分析 */}
      {contentAnalysis.isLarge && (
        <div className="content-analysis">
          <div className="analysis-title">📊 内容分析</div>
          <div className="analysis-stats">
            <div className="stat-item">
              <span className="stat-label">总大小:</span>
              <span className="stat-value">{(contentAnalysis.totalSize / 1024).toFixed(1)}KB</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">大型字段:</span>
              <span className="stat-value">{contentAnalysis.largeFields.length}</span>
            </div>
            <div className="stat-item">
              <span className="stat-label">截断状态:</span>
              <span className="stat-value">{truncationEnabled ? '已启用' : '已禁用'}</span>
            </div>
          </div>
          {contentAnalysis.largeFields.length > 0 && (
            <div style={{ marginTop: '8px' }}>
              <div style={{ fontSize: '12px', color: '#666' }}>
                检测到的大型字段: {contentAnalysis.largeFields.slice(0, 3).join(', ')}
                {contentAnalysis.largeFields.length > 3 && '...'}
              </div>
            </div>
          )}
        </div>
      )}

      {/* JSON 查看器 */}
      <EnhancedJsonViewer
        data={getCurrentData()}
        title={`${activeTab === 'input' && '输入数据' || activeTab === 'output' && '输出数据' || activeTab === 'config' && '配置信息' || activeTab === 'performance' && '性能数据'}`}
        initialExpanded={false}
        enableTruncation={truncationEnabled}
        showTruncationControls={true}
        theme={theme}
        onTruncationChange={(result) => {
          console.log('截断结果:', result);
        }}
      />
    </div>
  );
};

export default EnhancedJsonViewerExample;